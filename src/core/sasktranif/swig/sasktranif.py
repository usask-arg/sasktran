# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _sasktranif
else:
    import _sasktranif

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NXBASE_NXVECTOR_H = _sasktranif.NXBASE_NXVECTOR_H
class nxVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sasktranif.nxVector_swiginit(self, _sasktranif.new_nxVector(*args))

    def FromSequence(self, fixedarray: "double const [3]") -> "void":
        return _sasktranif.nxVector_FromSequence(self, fixedarray)

    def AsSequence(self) -> "nxVector":
        return _sasktranif.nxVector_AsSequence(self)

    def SetCoords(self, *args) -> "void":
        return _sasktranif.nxVector_SetCoords(self, *args)

    def FromLatLong(self, latitude: "double", longitude: "double", magnitude: "double"=1.0) -> "void":
        return _sasktranif.nxVector_FromLatLong(self, latitude, longitude, magnitude)

    def IsZero(self) -> "bool":
        return _sasktranif.nxVector_IsZero(self)

    def IsValid(self) -> "bool":
        return _sasktranif.nxVector_IsValid(self)

    def SetInvalid(self) -> "void":
        return _sasktranif.nxVector_SetInvalid(self)

    def X(self) -> "double":
        return _sasktranif.nxVector_X(self)

    def Y(self) -> "double":
        return _sasktranif.nxVector_Y(self)

    def Z(self) -> "double":
        return _sasktranif.nxVector_Z(self)

    def Data(self) -> "NXVECTOR &":
        return _sasktranif.nxVector_Data(self)

    def AngleTo(self, V2: "nxVector") -> "double":
        return _sasktranif.nxVector_AngleTo(self, V2)

    def UnitVector(self) -> "nxVector":
        return _sasktranif.nxVector_UnitVector(self)

    def ComponentPerpendicularTo(self, Z: "nxVector") -> "nxVector":
        return _sasktranif.nxVector_ComponentPerpendicularTo(self, Z)

    def ComponentParallelTo(self, Z: "nxVector") -> "nxVector":
        return _sasktranif.nxVector_ComponentParallelTo(self, Z)

    def IndexOfMaxComponent(self) -> "int":
        return _sasktranif.nxVector_IndexOfMaxComponent(self)

    def Longitude(self) -> "double":
        return _sasktranif.nxVector_Longitude(self)

    def Latitude(self) -> "double":
        return _sasktranif.nxVector_Latitude(self)

    def EquatorialToGeographic(self, Tnow: "nxTimeStamp const &") -> "nxVector":
        return _sasktranif.nxVector_EquatorialToGeographic(self, Tnow)

    def GeographicToEquatorial(self, Tnow: "nxTimeStamp const &") -> "nxVector":
        return _sasktranif.nxVector_GeographicToEquatorial(self, Tnow)

    def GeographicToGeomagneticDipole(self) -> "nxVector":
        return _sasktranif.nxVector_GeographicToGeomagneticDipole(self)

    def TransformToNewPole(self, *args) -> "void":
        return _sasktranif.nxVector_TransformToNewPole(self, *args)

    def RotateAboutXaxis(self, theta: "double") -> "void":
        return _sasktranif.nxVector_RotateAboutXaxis(self, theta)

    def RotateAboutZaxis(self, theta: "double") -> "void":
        return _sasktranif.nxVector_RotateAboutZaxis(self, theta)

    def Dot(self, v2: "nxVector") -> "double":
        return _sasktranif.nxVector_Dot(self, v2)

    def Magnitude(self) -> "double":
        return _sasktranif.nxVector_Magnitude(self)

    def Cross(self, v2: "nxVector") -> "nxVector":
        return _sasktranif.nxVector_Cross(self, v2)

    def __iadd__(self, v2: "nxVector") -> "nxVector &":
        return _sasktranif.nxVector___iadd__(self, v2)

    def __isub__(self, v2: "nxVector") -> "nxVector &":
        return _sasktranif.nxVector___isub__(self, v2)

    def __imul__(self, *args) -> "nxVector &":
        return _sasktranif.nxVector___imul__(self, *args)

    def __itruediv__(self, *args):
        return _sasktranif.nxVector___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __neg__(self) -> "nxVector":
        return _sasktranif.nxVector___neg__(self)

    def __add__(self, *args) -> "nxVector":
        return _sasktranif.nxVector___add__(self, *args)

    def __sub__(self, *args) -> "nxVector":
        return _sasktranif.nxVector___sub__(self, *args)

    def __truediv__(self, *args):
        return _sasktranif.nxVector___truediv__(self, *args)
    __div__ = __truediv__



    def __xor__(self, v2: "nxVector") -> "nxVector":
        return _sasktranif.nxVector___xor__(self, v2)

    def __and__(self, v2: "nxVector") -> "double":
        return _sasktranif.nxVector___and__(self, v2)
    __swig_destroy__ = _sasktranif.delete_nxVector

# Register nxVector in _sasktranif:
_sasktranif.nxVector_swigregister(nxVector)

class GEODETIC_INSTANT(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    latitude = property(_sasktranif.GEODETIC_INSTANT_latitude_get, _sasktranif.GEODETIC_INSTANT_latitude_set)
    longitude = property(_sasktranif.GEODETIC_INSTANT_longitude_get, _sasktranif.GEODETIC_INSTANT_longitude_set)
    heightm = property(_sasktranif.GEODETIC_INSTANT_heightm_get, _sasktranif.GEODETIC_INSTANT_heightm_set)
    mjd = property(_sasktranif.GEODETIC_INSTANT_mjd_get, _sasktranif.GEODETIC_INSTANT_mjd_set)

    def __init__(self, *args):
        _sasktranif.GEODETIC_INSTANT_swiginit(self, _sasktranif.new_GEODETIC_INSTANT(*args))

    def __eq__(self, other: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.GEODETIC_INSTANT___eq__(self, other)

    def FromSequence(self, fixedarray: "double const [4]") -> "void":
        return _sasktranif.GEODETIC_INSTANT_FromSequence(self, fixedarray)

    def AsSequence(self) -> "GEODETIC_INSTANT":
        return _sasktranif.GEODETIC_INSTANT_AsSequence(self)
    __swig_destroy__ = _sasktranif.delete_GEODETIC_INSTANT

# Register GEODETIC_INSTANT in _sasktranif:
_sasktranif.GEODETIC_INSTANT_swigregister(GEODETIC_INSTANT)


def AddGlobalClimatologyHandle(name: "char const *", handle: "CLIMATOLOGY_HANDLE const &") -> "bool":
    return _sasktranif.AddGlobalClimatologyHandle(name, handle)

def FindGlobalClimatologyHandle(name: "char const *", printerror: "bool"=True) -> "CLIMATOLOGY_HANDLE *":
    return _sasktranif.FindGlobalClimatologyHandle(name, printerror)

def FindGlobalClimatologyNameOfHandle(handle: "CLIMATOLOGY_HANDLE &") -> "char const *":
    return _sasktranif.FindGlobalClimatologyNameOfHandle(handle)

def HasKey_InGlobalClimatologyHandle(name: "char const *") -> "bool":
    return _sasktranif.HasKey_InGlobalClimatologyHandle(name)

def InternalGlobalClimatologyHandleTable() -> "std::map< nxString,CLIMATOLOGY_HANDLE > *":
    return _sasktranif.InternalGlobalClimatologyHandleTable()

def AddGeneratedGlobalClimatologyHandleIfNotExists(name: "char const *") -> "bool":
    return _sasktranif.AddGeneratedGlobalClimatologyHandleIfNotExists(name)

def SetParentHandleTable(parenttable: "std::map< nxString,CLIMATOLOGY_HANDLE > *") -> "bool":
    return _sasktranif.SetParentHandleTable(parenttable)
class ISKBasisDirection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def Assign(self, prop: "nxVector", theta: "nxVector", phi: "nxVector") -> "void":
        return _sasktranif.ISKBasisDirection_Assign(self, prop, theta, phi)

    def Propagation(self) -> "nxVector const &":
        return _sasktranif.ISKBasisDirection_Propagation(self)

    def Theta(self) -> "nxVector const &":
        return _sasktranif.ISKBasisDirection_Theta(self)

    def Phi(self) -> "nxVector const &":
        return _sasktranif.ISKBasisDirection_Phi(self)

    def __init__(self):
        _sasktranif.ISKBasisDirection_swiginit(self, _sasktranif.new_ISKBasisDirection())
    __swig_destroy__ = _sasktranif.delete_ISKBasisDirection

# Register ISKBasisDirection in _sasktranif:
_sasktranif.ISKBasisDirection_swigregister(ISKBasisDirection)
cvar = _sasktranif.cvar
SKCLIMATOLOGY_AOA_DAYS = cvar.SKCLIMATOLOGY_AOA_DAYS
SKCLIMATOLOGY_AEROSOLDUST_CM3 = cvar.SKCLIMATOLOGY_AEROSOLDUST_CM3
SKCLIMATOLOGY_AEROSOLH2SO4_CM3 = cvar.SKCLIMATOLOGY_AEROSOLH2SO4_CM3
SKCLIMATOLOGY_AEROSOLICE_CM3 = cvar.SKCLIMATOLOGY_AEROSOLICE_CM3
SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3 = cvar.SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3
SKCLIMATOLOGY_AEROSOLWATER_CM3 = cvar.SKCLIMATOLOGY_AEROSOLWATER_CM3
SKCLIMATOLOGY_AEROSOL_CM3 = cvar.SKCLIMATOLOGY_AEROSOL_CM3
SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM = cvar.SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM
SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 = cvar.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3
SKCLIMATOLOGY_ALBEDO = cvar.SKCLIMATOLOGY_ALBEDO
SKCLIMATOLOGY_Ar_CM3 = cvar.SKCLIMATOLOGY_Ar_CM3
SKCLIMATOLOGY_BCPI = cvar.SKCLIMATOLOGY_BCPI
SKCLIMATOLOGY_BCPO = cvar.SKCLIMATOLOGY_BCPO
SKCLIMATOLOGY_BRCL_CM3 = cvar.SKCLIMATOLOGY_BRCL_CM3
SKCLIMATOLOGY_BRNO3_CM3 = cvar.SKCLIMATOLOGY_BRNO3_CM3
SKCLIMATOLOGY_BRO_CM3 = cvar.SKCLIMATOLOGY_BRO_CM3
SKCLIMATOLOGY_BRO_VMR = cvar.SKCLIMATOLOGY_BRO_VMR
SKCLIMATOLOGY_BRX_CM3 = cvar.SKCLIMATOLOGY_BRX_CM3
SKCLIMATOLOGY_BRX_VMR = cvar.SKCLIMATOLOGY_BRX_VMR
SKCLIMATOLOGY_BRY_CM3 = cvar.SKCLIMATOLOGY_BRY_CM3
SKCLIMATOLOGY_BRY_VMR = cvar.SKCLIMATOLOGY_BRY_VMR
SKCLIMATOLOGY_BR_CM3 = cvar.SKCLIMATOLOGY_BR_CM3
SKCLIMATOLOGY_C2H2_CM3 = cvar.SKCLIMATOLOGY_C2H2_CM3
SKCLIMATOLOGY_C2H4_CM3 = cvar.SKCLIMATOLOGY_C2H4_CM3
SKCLIMATOLOGY_C2H6_CM3 = cvar.SKCLIMATOLOGY_C2H6_CM3
SKCLIMATOLOGY_C3H6O_CM3 = cvar.SKCLIMATOLOGY_C3H6O_CM3
SKCLIMATOLOGY_C3H6O_VMR = cvar.SKCLIMATOLOGY_C3H6O_VMR
SKCLIMATOLOGY_C5H8_CM3 = cvar.SKCLIMATOLOGY_C5H8_CM3
SKCLIMATOLOGY_C5H8_VMR = cvar.SKCLIMATOLOGY_C5H8_VMR
SKCLIMATOLOGY_CCL4_CM3 = cvar.SKCLIMATOLOGY_CCL4_CM3
SKCLIMATOLOGY_CCL4_VMR = cvar.SKCLIMATOLOGY_CCL4_VMR
SKCLIMATOLOGY_CF2CL2_CM3 = cvar.SKCLIMATOLOGY_CF2CL2_CM3
SKCLIMATOLOGY_CF2CL2_VMR = cvar.SKCLIMATOLOGY_CF2CL2_VMR
SKCLIMATOLOGY_CF4_CM3 = cvar.SKCLIMATOLOGY_CF4_CM3
SKCLIMATOLOGY_CFCL3_CM3 = cvar.SKCLIMATOLOGY_CFCL3_CM3
SKCLIMATOLOGY_CFCL3_VMR = cvar.SKCLIMATOLOGY_CFCL3_VMR
SKCLIMATOLOGY_CH2O_CM3 = cvar.SKCLIMATOLOGY_CH2O_CM3
SKCLIMATOLOGY_CH2O_VMR = cvar.SKCLIMATOLOGY_CH2O_VMR
SKCLIMATOLOGY_CH3BR_CM3 = cvar.SKCLIMATOLOGY_CH3BR_CM3
SKCLIMATOLOGY_CH3BR_VMR = cvar.SKCLIMATOLOGY_CH3BR_VMR
SKCLIMATOLOGY_CH3CL_CM3 = cvar.SKCLIMATOLOGY_CH3CL_CM3
SKCLIMATOLOGY_CH3CL_VMR = cvar.SKCLIMATOLOGY_CH3CL_VMR
SKCLIMATOLOGY_CH3CN_CM3 = cvar.SKCLIMATOLOGY_CH3CN_CM3
SKCLIMATOLOGY_CH3I_CM3 = cvar.SKCLIMATOLOGY_CH3I_CM3
SKCLIMATOLOGY_CH3I_VMR = cvar.SKCLIMATOLOGY_CH3I_VMR
SKCLIMATOLOGY_CH3OH_CM3 = cvar.SKCLIMATOLOGY_CH3OH_CM3
SKCLIMATOLOGY_CH4_CM3 = cvar.SKCLIMATOLOGY_CH4_CM3
SKCLIMATOLOGY_CH4_VMR = cvar.SKCLIMATOLOGY_CH4_VMR
SKCLIMATOLOGY_CL2O2_CM3 = cvar.SKCLIMATOLOGY_CL2O2_CM3
SKCLIMATOLOGY_CL2_CM3 = cvar.SKCLIMATOLOGY_CL2_CM3
SKCLIMATOLOGY_CLNO3_CM3 = cvar.SKCLIMATOLOGY_CLNO3_CM3
SKCLIMATOLOGY_CLONO2_CM3 = cvar.SKCLIMATOLOGY_CLONO2_CM3
SKCLIMATOLOGY_CLOUD_FRACTION = cvar.SKCLIMATOLOGY_CLOUD_FRACTION
SKCLIMATOLOGY_CLO_CM3 = cvar.SKCLIMATOLOGY_CLO_CM3
SKCLIMATOLOGY_CLY_CM3 = cvar.SKCLIMATOLOGY_CLY_CM3
SKCLIMATOLOGY_CLY_VMR = cvar.SKCLIMATOLOGY_CLY_VMR
SKCLIMATOLOGY_CL_CM3 = cvar.SKCLIMATOLOGY_CL_CM3
SKCLIMATOLOGY_CO2_CM3 = cvar.SKCLIMATOLOGY_CO2_CM3
SKCLIMATOLOGY_CO2_VMR = cvar.SKCLIMATOLOGY_CO2_VMR
SKCLIMATOLOGY_COF2_CM3 = cvar.SKCLIMATOLOGY_COF2_CM3
SKCLIMATOLOGY_CO_CM3 = cvar.SKCLIMATOLOGY_CO_CM3
SKCLIMATOLOGY_CO_VMR = cvar.SKCLIMATOLOGY_CO_VMR
SKCLIMATOLOGY_DUST_0p7mu = cvar.SKCLIMATOLOGY_DUST_0p7mu
SKCLIMATOLOGY_DUST_1p4mu = cvar.SKCLIMATOLOGY_DUST_1p4mu
SKCLIMATOLOGY_DUST_2p4mu = cvar.SKCLIMATOLOGY_DUST_2p4mu
SKCLIMATOLOGY_DUST_4p5mu = cvar.SKCLIMATOLOGY_DUST_4p5mu
SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS = cvar.SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS
SKCLIMATOLOGY_EPV = cvar.SKCLIMATOLOGY_EPV
SKCLIMATOLOGY_GEOMETRIC_HEIGHT = cvar.SKCLIMATOLOGY_GEOMETRIC_HEIGHT
SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT = cvar.SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT
SKCLIMATOLOGY_H2CO_CM3 = cvar.SKCLIMATOLOGY_H2CO_CM3
SKCLIMATOLOGY_H2O2_CM3 = cvar.SKCLIMATOLOGY_H2O2_CM3
SKCLIMATOLOGY_H2O_CM3 = cvar.SKCLIMATOLOGY_H2O_CM3
SKCLIMATOLOGY_H2O_VMR = cvar.SKCLIMATOLOGY_H2O_VMR
SKCLIMATOLOGY_H2S_CM3 = cvar.SKCLIMATOLOGY_H2S_CM3
SKCLIMATOLOGY_H2_CM3 = cvar.SKCLIMATOLOGY_H2_CM3
SKCLIMATOLOGY_H2_VMR = cvar.SKCLIMATOLOGY_H2_VMR
SKCLIMATOLOGY_HBR_CM3 = cvar.SKCLIMATOLOGY_HBR_CM3
SKCLIMATOLOGY_HCL_CM3 = cvar.SKCLIMATOLOGY_HCL_CM3
SKCLIMATOLOGY_HCN_CM3 = cvar.SKCLIMATOLOGY_HCN_CM3
SKCLIMATOLOGY_HCOOH_CM3 = cvar.SKCLIMATOLOGY_HCOOH_CM3
SKCLIMATOLOGY_HF_CM3 = cvar.SKCLIMATOLOGY_HF_CM3
SKCLIMATOLOGY_HI_CM3 = cvar.SKCLIMATOLOGY_HI_CM3
SKCLIMATOLOGY_HNO2_CM3 = cvar.SKCLIMATOLOGY_HNO2_CM3
SKCLIMATOLOGY_HNO2_VMR = cvar.SKCLIMATOLOGY_HNO2_VMR
SKCLIMATOLOGY_HNO3_CM3 = cvar.SKCLIMATOLOGY_HNO3_CM3
SKCLIMATOLOGY_HNO3_VMR = cvar.SKCLIMATOLOGY_HNO3_VMR
SKCLIMATOLOGY_HNO4_CM3 = cvar.SKCLIMATOLOGY_HNO4_CM3
SKCLIMATOLOGY_HO2_CM3 = cvar.SKCLIMATOLOGY_HO2_CM3
SKCLIMATOLOGY_HOBR_CM3 = cvar.SKCLIMATOLOGY_HOBR_CM3
SKCLIMATOLOGY_HOCL_CM3 = cvar.SKCLIMATOLOGY_HOCL_CM3
SKCLIMATOLOGY_H_CM3 = cvar.SKCLIMATOLOGY_H_CM3
SKCLIMATOLOGY_He_CM3 = cvar.SKCLIMATOLOGY_He_CM3
SKCLIMATOLOGY_ICE_CM3 = cvar.SKCLIMATOLOGY_ICE_CM3
SKCLIMATOLOGY_JH2O = cvar.SKCLIMATOLOGY_JH2O
SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS = cvar.SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS
SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH = cvar.SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH
SKCLIMATOLOGY_MECL_CM3 = cvar.SKCLIMATOLOGY_MECL_CM3
SKCLIMATOLOGY_MECL_VMR = cvar.SKCLIMATOLOGY_MECL_VMR
SKCLIMATOLOGY_N2O5_CM3 = cvar.SKCLIMATOLOGY_N2O5_CM3
SKCLIMATOLOGY_N2O_CM3 = cvar.SKCLIMATOLOGY_N2O_CM3
SKCLIMATOLOGY_N2O_VMR = cvar.SKCLIMATOLOGY_N2O_VMR
SKCLIMATOLOGY_N2_CM3 = cvar.SKCLIMATOLOGY_N2_CM3
SKCLIMATOLOGY_N2_VMR = cvar.SKCLIMATOLOGY_N2_VMR
SKCLIMATOLOGY_NH3_CM3 = cvar.SKCLIMATOLOGY_NH3_CM3
SKCLIMATOLOGY_NH3_VMR = cvar.SKCLIMATOLOGY_NH3_VMR
SKCLIMATOLOGY_NITS = cvar.SKCLIMATOLOGY_NITS
SKCLIMATOLOGY_NO2_CM3 = cvar.SKCLIMATOLOGY_NO2_CM3
SKCLIMATOLOGY_NO2_VMR = cvar.SKCLIMATOLOGY_NO2_VMR
SKCLIMATOLOGY_NO3_CM3 = cvar.SKCLIMATOLOGY_NO3_CM3
SKCLIMATOLOGY_NOPLUS_CM3 = cvar.SKCLIMATOLOGY_NOPLUS_CM3
SKCLIMATOLOGY_NOY_CM3 = cvar.SKCLIMATOLOGY_NOY_CM3
SKCLIMATOLOGY_NOY_VMR = cvar.SKCLIMATOLOGY_NOY_VMR
SKCLIMATOLOGY_NO_CM3 = cvar.SKCLIMATOLOGY_NO_CM3
SKCLIMATOLOGY_NO_VMR = cvar.SKCLIMATOLOGY_NO_VMR
SKCLIMATOLOGY_N_CM3 = cvar.SKCLIMATOLOGY_N_CM3
SKCLIMATOLOGY_O2_CM3 = cvar.SKCLIMATOLOGY_O2_CM3
SKCLIMATOLOGY_O2_O2_CM6 = cvar.SKCLIMATOLOGY_O2_O2_CM6
SKCLIMATOLOGY_O2_VMR = cvar.SKCLIMATOLOGY_O2_VMR
SKCLIMATOLOGY_O3_CM3 = cvar.SKCLIMATOLOGY_O3_CM3
SKCLIMATOLOGY_O3_VMR = cvar.SKCLIMATOLOGY_O3_VMR
SKCLIMATOLOGY_OCLO_CM3 = cvar.SKCLIMATOLOGY_OCLO_CM3
SKCLIMATOLOGY_OCPI = cvar.SKCLIMATOLOGY_OCPI
SKCLIMATOLOGY_OCPO = cvar.SKCLIMATOLOGY_OCPO
SKCLIMATOLOGY_OCS_CM3 = cvar.SKCLIMATOLOGY_OCS_CM3
SKCLIMATOLOGY_OH_CM3 = cvar.SKCLIMATOLOGY_OH_CM3
SKCLIMATOLOGY_O_CM3 = cvar.SKCLIMATOLOGY_O_CM3
SKCLIMATOLOGY_PAN_CM3 = cvar.SKCLIMATOLOGY_PAN_CM3
SKCLIMATOLOGY_PAN_VMR = cvar.SKCLIMATOLOGY_PAN_VMR
SKCLIMATOLOGY_PH3_CM3 = cvar.SKCLIMATOLOGY_PH3_CM3
SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K = cvar.SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K
SKCLIMATOLOGY_PRESSURE_PA = cvar.SKCLIMATOLOGY_PRESSURE_PA
SKCLIMATOLOGY_QI_MMR = cvar.SKCLIMATOLOGY_QI_MMR
SKCLIMATOLOGY_QL_MMR = cvar.SKCLIMATOLOGY_QL_MMR
SKCLIMATOLOGY_QV = cvar.SKCLIMATOLOGY_QV
SKCLIMATOLOGY_RH = cvar.SKCLIMATOLOGY_RH
SKCLIMATOLOGY_ROOH_CM3 = cvar.SKCLIMATOLOGY_ROOH_CM3
SKCLIMATOLOGY_ROO_CM3 = cvar.SKCLIMATOLOGY_ROO_CM3
SKCLIMATOLOGY_SALA = cvar.SKCLIMATOLOGY_SALA
SKCLIMATOLOGY_SALC = cvar.SKCLIMATOLOGY_SALC
SKCLIMATOLOGY_SF6_CM3 = cvar.SKCLIMATOLOGY_SF6_CM3
SKCLIMATOLOGY_SO2_CM3 = cvar.SKCLIMATOLOGY_SO2_CM3
SKCLIMATOLOGY_SO2_VMR = cvar.SKCLIMATOLOGY_SO2_VMR
SKCLIMATOLOGY_SO4_CM3 = cvar.SKCLIMATOLOGY_SO4_CM3
SKCLIMATOLOGY_SO4_VMR = cvar.SKCLIMATOLOGY_SO4_VMR
SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT = cvar.SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT
SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT = cvar.SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT
SKCLIMATOLOGY_SURFACE_PRESSURE_PA = cvar.SKCLIMATOLOGY_SURFACE_PRESSURE_PA
SKCLIMATOLOGY_TEMPERATURE_K = cvar.SKCLIMATOLOGY_TEMPERATURE_K
SKCLIMATOLOGY_UNDEFINED = cvar.SKCLIMATOLOGY_UNDEFINED
SKCLIMATOLOGY_XXX_CM3 = cvar.SKCLIMATOLOGY_XXX_CM3
SKCLIMATOLOGY_XXX_VMR = cvar.SKCLIMATOLOGY_XXX_VMR
SKEMISSION_PHOTOCHEMICAL_0 = cvar.SKEMISSION_PHOTOCHEMICAL_0
SKEMISSION_PHOTOCHEMICAL_1 = cvar.SKEMISSION_PHOTOCHEMICAL_1
SKEMISSION_PHOTOCHEMICAL_2 = cvar.SKEMISSION_PHOTOCHEMICAL_2
SKEMISSION_PHOTOCHEMICAL_3 = cvar.SKEMISSION_PHOTOCHEMICAL_3
SKEMISSION_PHOTOCHEMICAL_4 = cvar.SKEMISSION_PHOTOCHEMICAL_4
SKEMISSION_PHOTOCHEMICAL_5 = cvar.SKEMISSION_PHOTOCHEMICAL_5
SKEMISSION_PHOTOCHEMICAL_6 = cvar.SKEMISSION_PHOTOCHEMICAL_6
SKEMISSION_PHOTOCHEMICAL_7 = cvar.SKEMISSION_PHOTOCHEMICAL_7
SKEMISSION_PHOTOCHEMICAL_8 = cvar.SKEMISSION_PHOTOCHEMICAL_8
SKEMISSION_PHOTOCHEMICAL_9 = cvar.SKEMISSION_PHOTOCHEMICAL_9
SKEMISSION_PHOTOCHEMICAL_O2 = cvar.SKEMISSION_PHOTOCHEMICAL_O2
SKEMISSION_PHOTOCHEMICAL_OH = cvar.SKEMISSION_PHOTOCHEMICAL_OH
SKEMISSION_PHOTOCHEMICAL_O3 = cvar.SKEMISSION_PHOTOCHEMICAL_O3
SKEMISSION_THERMAL = cvar.SKEMISSION_THERMAL
SKCLIMATOLOGY_AEROSOL_CM3_MODE2 = cvar.SKCLIMATOLOGY_AEROSOL_CM3_MODE2
SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS = cvar.SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS
SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON = cvar.SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON
SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS = cvar.SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS
SKCLIMATOLOGY_AEROSOL_MODEWIDTH = cvar.SKCLIMATOLOGY_AEROSOL_MODEWIDTH
SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS = cvar.SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS
SKCLIMATOLOGY_ICE_MODEWIDTH = cvar.SKCLIMATOLOGY_ICE_MODEWIDTH

class IQUV(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    I = property(_sasktranif.IQUV_I_get, _sasktranif.IQUV_I_set)
    Q = property(_sasktranif.IQUV_Q_get, _sasktranif.IQUV_Q_set)
    U = property(_sasktranif.IQUV_U_get, _sasktranif.IQUV_U_set)
    V = property(_sasktranif.IQUV_V_get, _sasktranif.IQUV_V_set)

    def __init__(self):
        _sasktranif.IQUV_swiginit(self, _sasktranif.new_IQUV())
    __swig_destroy__ = _sasktranif.delete_IQUV

# Register IQUV in _sasktranif:
_sasktranif.IQUV_swigregister(IQUV)

class ISKStokesVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sasktranif.ISKStokesVector_swiginit(self, _sasktranif.new_ISKStokesVector(*args))

    def Assign(self, stokes: "IQUV", new_basis: "ISKBasisDirection") -> "void":
        return _sasktranif.ISKStokesVector_Assign(self, stokes, new_basis)

    def Stokes(self) -> "IQUV const &":
        return _sasktranif.ISKStokesVector_Stokes(self)

    def Basis(self) -> "ISKBasisDirection const &":
        return _sasktranif.ISKStokesVector_Basis(self)

    def to_new_basis(self, *args) -> "void":
        return _sasktranif.ISKStokesVector_to_new_basis(self, *args)

    def propagation_direction(self) -> "nxVector const &":
        return _sasktranif.ISKStokesVector_propagation_direction(self)

    def theta_direction(self) -> "nxVector const &":
        return _sasktranif.ISKStokesVector_theta_direction(self)

    def phi_direction(self) -> "nxVector const &":
        return _sasktranif.ISKStokesVector_phi_direction(self)

    def I(self) -> "double":
        return _sasktranif.ISKStokesVector_I(self)

    def Q(self) -> "double":
        return _sasktranif.ISKStokesVector_Q(self)

    def U(self) -> "double":
        return _sasktranif.ISKStokesVector_U(self)

    def V(self) -> "double":
        return _sasktranif.ISKStokesVector_V(self)
    __swig_destroy__ = _sasktranif.delete_ISKStokesVector

# Register ISKStokesVector in _sasktranif:
_sasktranif.ISKStokesVector_swigregister(ISKStokesVector)


def SKTRAN_IFSetRegistryDirectory(registrydirname: "char const *") -> "bool":
    return _sasktranif.SKTRAN_IFSetRegistryDirectory(registrydirname)

def SKTRAN_IFCreateRegistryEntriesForDLL(dllname: "char const *", paramstr: "char const *") -> "bool":
    return _sasktranif.SKTRAN_IFCreateRegistryEntriesForDLL(dllname, paramstr)
class ISKModuleBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _sasktranif.delete_ISKModuleBase

    def RawObjectUnknown(self) -> "nxUnknown *":
        return _sasktranif.ISKModuleBase_RawObjectUnknown(self)

    def SetProperty(self, propertyname: "char const *", valueorobject: "void *") -> "bool":
        return _sasktranif.ISKModuleBase_SetProperty(self, propertyname, valueorobject)

    def GetProperty(self, propertyname: "char const *") -> "bool":
        return _sasktranif.ISKModuleBase_GetProperty(self, propertyname)

# Register ISKModuleBase in _sasktranif:
_sasktranif.ISKModuleBase_swigregister(ISKModuleBase)

class ISKClimatology(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, climatologyname: "char const *"):
        _sasktranif.ISKClimatology_swiginit(self, _sasktranif.new_ISKClimatology(climatologyname))
    __swig_destroy__ = _sasktranif.delete_ISKClimatology

    def Stub(self) -> "ISKClimatology_Stub *":
        return _sasktranif.ISKClimatology_Stub(self)

    def Create_New_ClimatologyName(self, name: "char const *") -> "bool":
        return _sasktranif.ISKClimatology_Create_New_ClimatologyName(self, name)

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKClimatology_IsValidObject(self)

    def UpdateCache(self, location: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.ISKClimatology_UpdateCache(self, location)

    def GetParameter(self, climatology_handle_name: "char const *", location: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.ISKClimatology_GetParameter(self, climatology_handle_name, location)

    def GetHeightProfile(self, climatology_handle_name: "char const *", location: "GEODETIC_INSTANT", altitude: "double const *") -> "bool":
        return _sasktranif.ISKClimatology_GetHeightProfile(self, climatology_handle_name, location, altitude)

    def SetPropertyUserDefined(self, climatology_handle_name: "char const *", profilevalues: "double *") -> "bool":
        return _sasktranif.ISKClimatology_SetPropertyUserDefined(self, climatology_handle_name, profilevalues)

# Register ISKClimatology in _sasktranif:
_sasktranif.ISKClimatology_swigregister(ISKClimatology)

class ISKOpticalProperty(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _sasktranif.ISKOpticalProperty_swiginit(self, _sasktranif.new_ISKOpticalProperty(*args))
    __swig_destroy__ = _sasktranif.delete_ISKOpticalProperty

    def Stub(self) -> "ISKOpticalProperty_Stub *":
        return _sasktranif.ISKOpticalProperty_Stub(self)

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKOpticalProperty_IsValidObject(self)

    def SetAtmosphericState(self, atmosphere: "ISKClimatology") -> "bool":
        return _sasktranif.ISKOpticalProperty_SetAtmosphericState(self, atmosphere)

    def SetLocation(self, pt: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.ISKOpticalProperty_SetLocation(self, pt)

    def InternalClimatology_UpdateCache(self, pt: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.ISKOpticalProperty_InternalClimatology_UpdateCache(self, pt)

    def CalculateCrossSections(self, wavenumber: "double const *") -> "bool":
        return _sasktranif.ISKOpticalProperty_CalculateCrossSections(self, wavenumber)

    def CalculatePhaseMatrix(self, wavenumber: "double", cosscatterangle: "double") -> "bool":
        return _sasktranif.ISKOpticalProperty_CalculatePhaseMatrix(self, wavenumber, cosscatterangle)

    def AddUserDefined(self, temperature: "double", wavelen_nm: "double *", crosssection: "double *") -> "bool":
        return _sasktranif.ISKOpticalProperty_AddUserDefined(self, temperature, wavelen_nm, crosssection)

    def AddUserDefinedPressure(self, pressure: "double *", temperature: "double *", wavelen_nm: "double *", crosssection: "double *", broadnervmr: "double") -> "bool":
        return _sasktranif.ISKOpticalProperty_AddUserDefinedPressure(self, pressure, temperature, wavelen_nm, crosssection, broadnervmr)

# Register ISKOpticalProperty in _sasktranif:
_sasktranif.ISKOpticalProperty_swigregister(ISKOpticalProperty)

class ISKEmission(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, emissionname: "char const *"):
        _sasktranif.ISKEmission_swiginit(self, _sasktranif.new_ISKEmission(emissionname))
    __swig_destroy__ = _sasktranif.delete_ISKEmission

    def Stub(self) -> "ISKEmission_Stub *":
        return _sasktranif.ISKEmission_Stub(self)

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKEmission_IsValidObject(self)

    def UpdateLocation(self, pt: "GEODETIC_INSTANT", isground: "bool") -> "bool":
        return _sasktranif.ISKEmission_UpdateLocation(self, pt, isground)

    def UpdateCache(self, pt: "GEODETIC_INSTANT") -> "bool":
        return _sasktranif.ISKEmission_UpdateCache(self, pt)

    def IsotropicEmission(self, wavenumber: "double const *") -> "bool":
        return _sasktranif.ISKEmission_IsotropicEmission(self, wavenumber)

# Register ISKEmission in _sasktranif:
_sasktranif.ISKEmission_swigregister(ISKEmission)

class ISKBrdf(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, brdfname: "char const *"):
        _sasktranif.ISKBrdf_swiginit(self, _sasktranif.new_ISKBrdf(brdfname))
    __swig_destroy__ = _sasktranif.delete_ISKBrdf

    def Stub(self) -> "ISKBrdf_Stub *":
        return _sasktranif.ISKBrdf_Stub(self)

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKBrdf_IsValidObject(self)

    def BRDF(self, wavelennm: "double", pt: "GEODETIC_INSTANT", MU_in: "double", MU_out: "double", COSDPHI: "double") -> "bool":
        return _sasktranif.ISKBrdf_BRDF(self, wavelennm, pt, MU_in, MU_out, COSDPHI)

# Register ISKBrdf in _sasktranif:
_sasktranif.ISKBrdf_swigregister(ISKBrdf)

class ISKSolarSpectrum(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, solarspectrumname: "char const *"):
        _sasktranif.ISKSolarSpectrum_swiginit(self, _sasktranif.new_ISKSolarSpectrum(solarspectrumname))
    __swig_destroy__ = _sasktranif.delete_ISKSolarSpectrum

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKSolarSpectrum_IsValidObject(self)

    def Irradiance(self, wavelen_nm_vacuum: "double const *") -> "bool":
        return _sasktranif.ISKSolarSpectrum_Irradiance(self, wavelen_nm_vacuum)

    def IrradianceAt1AU(self, wavelen_nm_vacuum: "double const *") -> "bool":
        return _sasktranif.ISKSolarSpectrum_IrradianceAt1AU(self, wavelen_nm_vacuum)

    def SetSolarDistanceFromMjd(self, mjd: "double") -> "bool":
        return _sasktranif.ISKSolarSpectrum_SetSolarDistanceFromMjd(self, mjd)

    def SetSolarDistanceFromAU(self, au: "double") -> "bool":
        return _sasktranif.ISKSolarSpectrum_SetSolarDistanceFromAU(self, au)

    def MinValidWavelength(self) -> "bool":
        return _sasktranif.ISKSolarSpectrum_MinValidWavelength(self)

    def MaxValidWavelength(self) -> "bool":
        return _sasktranif.ISKSolarSpectrum_MaxValidWavelength(self)

    def NanometerResolutionFWHM(self, wavelen_nm_vacuum: "double const *") -> "bool":
        return _sasktranif.ISKSolarSpectrum_NanometerResolutionFWHM(self, wavelen_nm_vacuum)

    def SampleSpacing(self, wavelen_nm_vacuum: "double const *") -> "bool":
        return _sasktranif.ISKSolarSpectrum_SampleSpacing(self, wavelen_nm_vacuum)

# Register ISKSolarSpectrum in _sasktranif:
_sasktranif.ISKSolarSpectrum_swigregister(ISKSolarSpectrum)

class ISKStokesVectorIF(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m_stokes = property(_sasktranif.ISKStokesVectorIF_m_stokes_get, _sasktranif.ISKStokesVectorIF_m_stokes_set)
    __swig_destroy__ = _sasktranif.delete_ISKStokesVectorIF

    def RawObjectUnknown(self) -> "nxUnknown *":
        return _sasktranif.ISKStokesVectorIF_RawObjectUnknown(self)

    def __init__(self):
        _sasktranif.ISKStokesVectorIF_swiginit(self, _sasktranif.new_ISKStokesVectorIF())

# Register ISKStokesVectorIF in _sasktranif:
_sasktranif.ISKStokesVectorIF_swigregister(ISKStokesVectorIF)

class ISKEngine(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, enginename: "char const *"):
        _sasktranif.ISKEngine_swiginit(self, _sasktranif.new_ISKEngine(enginename))
    __swig_destroy__ = _sasktranif.delete_ISKEngine

    def Stub(self) -> "ISKEngine_Stub *":
        return _sasktranif.ISKEngine_Stub(self)

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKEngine_IsValidObject(self)

    def AddLineOfSight(self, mjd: "double", observer: "nxVector", lookvector: "nxVector") -> "bool":
        return _sasktranif.ISKEngine_AddLineOfSight(self, mjd, observer, lookvector)

    def AddSpecies(self, climatology_handle_name: "char const *", climatology: "ISKClimatology", opticalproperty: "ISKOpticalProperty") -> "bool":
        return _sasktranif.ISKEngine_AddSpecies(self, climatology_handle_name, climatology, opticalproperty)

    def AddEmission(self, climatology_handle_name: "char const *", emission: "ISKEmission") -> "bool":
        return _sasktranif.ISKEngine_AddEmission(self, climatology_handle_name, emission)

    def SetAtmosphericState(self, climatology: "ISKClimatology") -> "bool":
        return _sasktranif.ISKEngine_SetAtmosphericState(self, climatology)

    def SetAlbedo(self, albedo: "double") -> "bool":
        return _sasktranif.ISKEngine_SetAlbedo(self, albedo)

    def SetBRDF(self, brdf: "ISKBrdf") -> "bool":
        return _sasktranif.ISKEngine_SetBRDF(self, brdf)

    def SetPolarizationMode(self, polarizationmode: "int") -> "bool":
        return _sasktranif.ISKEngine_SetPolarizationMode(self, polarizationmode)

    def SetWavelengths(self, wavelen: "double const *") -> "bool":
        return _sasktranif.ISKEngine_SetWavelengths(self, wavelen)

    def InitializeModel(self) -> "bool":
        return _sasktranif.ISKEngine_InitializeModel(self)

    def CalculateRadiance(self) -> "bool":
        return _sasktranif.ISKEngine_CalculateRadiance(self)

    def CalculateStokesVector(self) -> "bool":
        return _sasktranif.ISKEngine_CalculateStokesVector(self)

    def GetWeightingFunctions(self) -> "bool":
        return _sasktranif.ISKEngine_GetWeightingFunctions(self)

    def GetProperty(self, propertyname: "char const *") -> "bool":
        return _sasktranif.ISKEngine_GetProperty(self, propertyname)

# Register ISKEngine in _sasktranif:
_sasktranif.ISKEngine_swigregister(ISKEngine)

class ISKGeodetic(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _sasktranif.ISKGeodetic_swiginit(self, _sasktranif.new_ISKGeodetic())
    __swig_destroy__ = _sasktranif.delete_ISKGeodetic

    def IsValidObject(self) -> "bool":
        return _sasktranif.ISKGeodetic_IsValidObject(self)

    def SetLocationLatLonAlt(self, latitude: "double", longitude: "double", alt: "double") -> "bool":
        return _sasktranif.ISKGeodetic_SetLocationLatLonAlt(self, latitude, longitude, alt)

    def SetLocationXYZ(self, geocentric: "nxVector") -> "bool":
        return _sasktranif.ISKGeodetic_SetLocationXYZ(self, geocentric)

    def SetLocationFromTangentPoint(self, r: "nxVector", lookv: "nxVector") -> "bool":
        return _sasktranif.ISKGeodetic_SetLocationFromTangentPoint(self, r, lookv)

    def SetLocationFromTangentAltitude(self, requiredheight: "double", spacecraftlocation: "nxVector", boresightplane: "nxVector") -> "bool":
        return _sasktranif.ISKGeodetic_SetLocationFromTangentAltitude(self, requiredheight, spacecraftlocation, boresightplane)

    def GetLocalWest(self) -> "nxVector":
        return _sasktranif.ISKGeodetic_GetLocalWest(self)

    def GetLocalSouth(self) -> "nxVector":
        return _sasktranif.ISKGeodetic_GetLocalSouth(self)

    def GetLocalUp(self) -> "nxVector":
        return _sasktranif.ISKGeodetic_GetLocalUp(self)

    def GetLocationXYZ(self) -> "nxVector":
        return _sasktranif.ISKGeodetic_GetLocationXYZ(self)

    def GetLongitude(self) -> "double":
        return _sasktranif.ISKGeodetic_GetLongitude(self)

    def GetLatitude(self) -> "double":
        return _sasktranif.ISKGeodetic_GetLatitude(self)

    def GetAlt(self) -> "double":
        return _sasktranif.ISKGeodetic_GetAlt(self)

    def GetAltitudeIntercepts(self, H: "double", observerposition: "nxVector", look: "nxVector") -> "bool":
        return _sasktranif.ISKGeodetic_GetAltitudeIntercepts(self, H, observerposition, look)

    def GetOsculatingSpheroidCenter(self) -> "nxVector":
        return _sasktranif.ISKGeodetic_GetOsculatingSpheroidCenter(self)

    def GetOsculatingSpheroidRadius(self) -> "double":
        return _sasktranif.ISKGeodetic_GetOsculatingSpheroidRadius(self)

# Register ISKGeodetic in _sasktranif:
_sasktranif.ISKGeodetic_swigregister(ISKGeodetic)

class ISKMie(ISKModuleBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, name: "char const *"):
        _sasktranif.ISKMie_swiginit(self, _sasktranif.new_ISKMie(name))
    __swig_destroy__ = _sasktranif.delete_ISKMie

    def Calculate(self, _lambda: "double", radius: "double", refrac_real: "double", refrac_imag: "double") -> "bool":
        return _sasktranif.ISKMie_Calculate(self, _lambda, radius, refrac_real, refrac_imag)

    def Qext(self) -> "double":
        return _sasktranif.ISKMie_Qext(self)

    def Qsca(self) -> "double":
        return _sasktranif.ISKMie_Qsca(self)

    def Qabs(self) -> "double":
        return _sasktranif.ISKMie_Qabs(self)

    def Cext(self) -> "double":
        return _sasktranif.ISKMie_Cext(self)

    def Csca(self) -> "double":
        return _sasktranif.ISKMie_Csca(self)

    def Cabs(self) -> "double":
        return _sasktranif.ISKMie_Cabs(self)

    def S1(self) -> "void":
        return _sasktranif.ISKMie_S1(self)

    def S2(self) -> "void":
        return _sasktranif.ISKMie_S2(self)

    def PMom(self) -> "void":
        return _sasktranif.ISKMie_PMom(self)

    def Sforward(self) -> "void":
        return _sasktranif.ISKMie_Sforward(self)

    def SBackward(self) -> "void":
        return _sasktranif.ISKMie_SBackward(self)

    def TForward(self, i: "int") -> "void":
        return _sasktranif.ISKMie_TForward(self, i)

    def TBackward(self, i: "int") -> "void":
        return _sasktranif.ISKMie_TBackward(self, i)

    def Spike(self) -> "double":
        return _sasktranif.ISKMie_Spike(self)

# Register ISKMie in _sasktranif:
_sasktranif.ISKMie_swigregister(ISKMie)



