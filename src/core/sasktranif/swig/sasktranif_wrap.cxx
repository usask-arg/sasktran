/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
/* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
  return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
  char *newstr = 0;
  str = PyUnicode_AsUTF8String(str);
  if (str) {
    char *cstr;
    Py_ssize_t len;
    if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
      newstr = (char *) malloc(len+1);
      if (newstr)
        memcpy(newstr, cstr, len+1);
    }
    Py_XDECREF(str);
  }
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred())
    PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    PyObject *old_str = PyObject_Str(value);
    const char *tmp = SWIG_Python_str_AsChar(old_str);
    PyErr_Clear();
    Py_XINCREF(type);
    if (tmp)
      PyErr_Format(type, "%s %s", tmp, mesg);
    else
      PyErr_Format(type, "%s", mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
  PyObject *error;
  if (obj)
    return 0;
  error = PyErr_Occurred();
  return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
  if (SWIG_Python_TypeErrorOccurred(NULL)) {
    /* Use existing TypeError to preserve stacktrace and enhance with given message */
    PyObject *newvalue;
    PyObject *type = NULL, *value = NULL, *traceback = NULL;
    PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
    newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
    newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
    Py_XDECREF(value);
    PyErr_Restore(type, newvalue, traceback);
  } else {
    /* Raise TypeError using given message */
    PyErr_SetString(PyExc_TypeError, message);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  const char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
  PyDict_SetItemString(d, name, obj);
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
  int no_kwargs = 1;
  if (kwargs) {
    assert(PyDict_Check(kwargs));
    if (PyDict_Size(kwargs) > 0) {
      PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
      no_kwargs = 0;
    }
  }
  return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  int fail = data ? data->implicitconv : 0;
  if (fail)
    PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
  return fail;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
      data->newraw = PyObject_GetAttrString(data->klass, "__new__");
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
      data->delargs = !(flags & (METH_O));
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_repr(SwigPyObject *v)
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

/* We need a version taking two PyObject* parameters so it's a valid
 * PyCFunction to use in swigobject_methods[]. */
SWIGRUNTIME PyObject *
SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  return SwigPyObject_repr((SwigPyObject*)v);
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *type = NULL, *value = NULL, *traceback = NULL;
      PyErr_Fetch(&type, &value, &traceback);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(type, value, traceback);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
    return NULL;
  } else {
    SwigPyObject *sobj = (SwigPyObject *)v;
    PyObject *obj = PyBool_FromLong(sobj->own);
    if (val) {
      if (PyObject_IsTrue(val)) {
        SwigPyObject_acquire(v,args);
      } else {
        SwigPyObject_disown(v,args);
      }
    } 
    return obj;
  }
}

static PyMethodDef
swigobject_methods[] = {
  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
  {0, 0, 0, 0}  
};

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#else
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyObject",                       /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      "SwigPyPacked",                       /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
      0,                                    /* tp_del */
      0,                                    /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
      0,                                    /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
      0,                                    /* tp_print */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
      0,                                    /* tp_prev */
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

static PyObject *Swig_This_global = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (Swig_This_global == NULL)
    Swig_This_global = SWIG_Python_str_FromChar("this");
  return Swig_This_global;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
      if (!SWIG_IsOK(res) && obj == Py_None) {
        if (ptr)
          *ptr = 0;
        if (PyErr_Occurred())
          PyErr_Clear();
        res = SWIG_OK;
      }
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    swig_cast_info *tc;

    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc)
      return SWIG_ERROR;
    tc = SWIG_TypeCheck(desc,ty);
    if (tc) {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    } else {
      return SWIG_ERROR;
    }
    return SWIG_OK;
  }
}

/* Convert a packed pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
        Py_DECREF(inst);
        inst = 0;
      }
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *empty_args = PyTuple_New(0);
    if (empty_args) {
      PyObject *empty_kwargs = PyDict_New();
      if (empty_kwargs) {
        inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
        Py_DECREF(empty_kwargs);
        if (inst) {
          if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
            Py_DECREF(inst);
            inst = 0;
          } else {
            Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
          }
        }
      }
      Py_DECREF(empty_args);
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
}

SWIGRUNTIME int
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
  PyObject **dictptr = _PyObject_GetDictPtr(inst);
  if (dictptr != NULL) {
    PyObject *dict = *dictptr;
    if (dict == NULL) {
      dict = PyDict_New();
      *dictptr = dict;
    }
    return PyDict_SetItem(dict, SWIG_This(), swig_this);
  }
#endif
  return PyObject_SetAttr(inst, SWIG_This(), swig_this);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
        return NULL;
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_DestroyModule(PyObject *obj)
{
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  Swig_This_global = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      const char *tmp = SWIG_Python_str_AsChar(old_str);
      const char *errmesg = tmp ? tmp : "Invalid error message";
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, errmesg);
      } else {
	PyErr_Format(type, "%s %s", errmesg, mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
      if (!encoded_name)
        return -1;
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

/* Method creation and docstring support functions */

SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GEODETIC_INSTANT swig_types[0]
#define SWIGTYPE_p_GUID swig_types[1]
#define SWIGTYPE_p_IQUV swig_types[2]
#define SWIGTYPE_p_ISKBasisDirection swig_types[3]
#define SWIGTYPE_p_ISKBrdf swig_types[4]
#define SWIGTYPE_p_ISKBrdf_Stub swig_types[5]
#define SWIGTYPE_p_ISKClimatology swig_types[6]
#define SWIGTYPE_p_ISKClimatology_Stub swig_types[7]
#define SWIGTYPE_p_ISKEmission swig_types[8]
#define SWIGTYPE_p_ISKEmission_Stub swig_types[9]
#define SWIGTYPE_p_ISKEngine swig_types[10]
#define SWIGTYPE_p_ISKEngine_Stub swig_types[11]
#define SWIGTYPE_p_ISKGeodetic swig_types[12]
#define SWIGTYPE_p_ISKMie swig_types[13]
#define SWIGTYPE_p_ISKModuleBase swig_types[14]
#define SWIGTYPE_p_ISKOpticalProperty swig_types[15]
#define SWIGTYPE_p_ISKOpticalProperty_Stub swig_types[16]
#define SWIGTYPE_p_ISKSolarSpectrum swig_types[17]
#define SWIGTYPE_p_ISKStokesVector swig_types[18]
#define SWIGTYPE_p_ISKStokesVectorIF swig_types[19]
#define SWIGTYPE_p_a_3__double swig_types[20]
#define SWIGTYPE_p_char swig_types[21]
#define SWIGTYPE_p_double swig_types[22]
#define SWIGTYPE_p_int swig_types[23]
#define SWIGTYPE_p_nxTimeStamp swig_types[24]
#define SWIGTYPE_p_nxUnknown swig_types[25]
#define SWIGTYPE_p_nxVector swig_types[26]
#define SWIGTYPE_p_p_ISKStokesVector swig_types[27]
#define SWIGTYPE_p_p_double swig_types[28]
#define SWIGTYPE_p_p_std__complexT_double_t swig_types[29]
#define SWIGTYPE_p_std__mapT_nxString_GUID_t swig_types[30]
static swig_type_info *swig_types[32];
static swig_module_info swig_module = {swig_types, 31, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
              @(target):= _sasktranif.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__sasktranif

#else
#  define SWIG_init    init_sasktranif

#endif
#define SWIG_name    "_sasktranif"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#define SWIG_FILE_WITH_INIT
#include "sasktranif_internals.h"
#include "nxbase_math.h"

static PyObject *g_sasktranifError;


#ifndef SWIG_FILE_WITH_INIT
#define NO_IMPORT_ARRAY
#endif
#include "stdio.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include <numpy/arrayobject.h>


#include <complex> 


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


  #define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
    int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if (!obj)
      return SWIG_TypeError;
    if (alloc)
      *alloc = SWIG_NEWOBJ;
#endif
    if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#else
    if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
      return SWIG_TypeError;
#endif
    if (cptr) {
      if (alloc) {
	if (*alloc == SWIG_NEWOBJ) {
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
        if (!*cptr)
          ret = SWIG_TypeError;
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return ret;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (!obj)
        return SWIG_TypeError;
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}





#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


#if NPY_API_VERSION < 0x00000007
#define NPY_ARRAY_DEFAULT NPY_DEFAULT
#define NPY_ARRAY_FARRAY  NPY_FARRAY
#define NPY_FORTRANORDER  NPY_FORTRAN
#endif


/* Macros to extract array attributes.
 */
#if NPY_API_VERSION < 0x00000007
#define is_array(a)            ((a) && PyArray_Check((PyArrayObject*)a))
#define array_type(a)          (int)(PyArray_TYPE((PyArrayObject*)a))
#define array_numdims(a)       (((PyArrayObject*)a)->nd)
#define array_dimensions(a)    (((PyArrayObject*)a)->dimensions)
#define array_size(a,i)        (((PyArrayObject*)a)->dimensions[i])
#define array_strides(a)       (((PyArrayObject*)a)->strides)
#define array_stride(a,i)      (((PyArrayObject*)a)->strides[i])
#define array_data(a)          (((PyArrayObject*)a)->data)
#define array_descr(a)         (((PyArrayObject*)a)->descr)
#define array_flags(a)         (((PyArrayObject*)a)->flags)
#define array_clearflags(a,f)  (((PyArrayObject*)a)->flags) &= ~f
#define array_enableflags(a,f) (((PyArrayObject*)a)->flags) = f
#define array_is_fortran(a)    (PyArray_ISFORTRAN((PyArrayObject*)a))
#else
#define is_array(a)            ((a) && PyArray_Check(a))
#define array_type(a)          PyArray_TYPE((PyArrayObject*)a)
#define array_numdims(a)       PyArray_NDIM((PyArrayObject*)a)
#define array_dimensions(a)    PyArray_DIMS((PyArrayObject*)a)
#define array_strides(a)       PyArray_STRIDES((PyArrayObject*)a)
#define array_stride(a,i)      PyArray_STRIDE((PyArrayObject*)a,i)
#define array_size(a,i)        PyArray_DIM((PyArrayObject*)a,i)
#define array_data(a)          PyArray_DATA((PyArrayObject*)a)
#define array_descr(a)         PyArray_DESCR((PyArrayObject*)a)
#define array_flags(a)         PyArray_FLAGS((PyArrayObject*)a)
#define array_enableflags(a,f) PyArray_ENABLEFLAGS((PyArrayObject*)a,f)
#define array_clearflags(a,f)  PyArray_CLEARFLAGS((PyArrayObject*)a,f)
#define array_is_fortran(a)    (PyArray_IS_F_CONTIGUOUS((PyArrayObject*)a))
#endif
#define array_is_contiguous(a) (PyArray_ISCONTIGUOUS((PyArrayObject*)a))
#define array_is_native(a)     (PyArray_ISNOTSWAPPED((PyArrayObject*)a))


  /* Given a PyObject, return a string describing its type.
   */
  const char* pytype_string(PyObject* py_obj)
  {
    if (py_obj == NULL          ) return "C NULL value";
    if (py_obj == Py_None       ) return "Python None" ;
    if (PyCallable_Check(py_obj)) return "callable"    ;
    if (PyBytes_Check(   py_obj)) return "string"      ;
    if (PyInt_Check(     py_obj)) return "int"         ;
    if (PyFloat_Check(   py_obj)) return "float"       ;
    if (PyDict_Check(    py_obj)) return "dict"        ;
    if (PyList_Check(    py_obj)) return "list"        ;
    if (PyTuple_Check(   py_obj)) return "tuple"       ;

    return "unknown type";
  }

  /* Given a NumPy typecode, return a string describing the type.
   */
  const char* typecode_string(int typecode)
  {
    static const char* type_names[25] = {"bool",
                                         "byte",
                                         "unsigned byte",
                                         "short",
                                         "unsigned short",
                                         "int",
                                         "unsigned int",
                                         "long",
                                         "unsigned long",
                                         "long long",
                                         "unsigned long long",
                                         "float",
                                         "double",
                                         "long double",
                                         "complex float",
                                         "complex double",
                                         "complex long double",
                                         "object",
                                         "string",
                                         "unicode",
                                         "void",
                                         "ntypes",
                                         "notype",
                                         "char",
                                         "unknown"};
    return typecode < 24 ? type_names[typecode] : type_names[24];
  }

  /* Make sure input has correct numpy type.  This now just calls
     PyArray_EquivTypenums().
   */
  int type_match(int actual_type,
                 int desired_type)
  {
    return PyArray_EquivTypenums(actual_type, desired_type);
  }

#ifdef SWIGPY_USE_CAPSULE
  void free_cap(PyObject * cap)
  {
    void* array = (void*) PyCapsule_GetPointer(cap,SWIGPY_CAPSULE_NAME);
    if (array != NULL) free(array);
  }
#endif




  /* Given a PyObject pointer, cast it to a PyArrayObject pointer if
   * legal.  If not, set the python error string appropriately and
   * return NULL.
   */
  PyArrayObject* obj_to_array_no_conversion(PyObject* input,
                                            int        typecode)
  {
    PyArrayObject* ary = NULL;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input), typecode)))
    {
      ary = (PyArrayObject*) input;
    }
    else if is_array(input)
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = typecode_string(array_type(input));
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  Array of type '%s' given",
                   desired_type, actual_type);
      ary = NULL;
    }
    else
    {
      const char* desired_type = typecode_string(typecode);
      const char* actual_type  = pytype_string(input);
      PyErr_Format(PyExc_TypeError,
                   "Array of type '%s' required.  A '%s' was given",
                   desired_type,
                   actual_type);
      ary = NULL;
    }
    return ary;
  }

  /* Convert the given PyObject to a NumPy array with the given
   * typecode.  On success, return a valid PyArrayObject* with the
   * correct type.  On failure, the python error string will be set and
   * the routine returns NULL.
   */
  PyArrayObject* obj_to_array_allow_conversion(PyObject* input,
                                               int       typecode,
                                               int*      is_new_object)
  {
    PyArrayObject* ary = NULL;
    PyObject*      py_obj;
    if (is_array(input) && (typecode == NPY_NOTYPE ||
                            PyArray_EquivTypenums(array_type(input),typecode)))
    {
      ary = (PyArrayObject*) input;
      *is_new_object = 0;
    }
    else
    {
      py_obj = PyArray_FROMANY(input, typecode, 0, 0, NPY_ARRAY_DEFAULT);
      /* If NULL, PyArray_FromObject will have set python error value.*/
      ary = (PyArrayObject*) py_obj;
      *is_new_object = 1;
    }
    return ary;
  }

  /* Given a PyArrayObject, check to see if it is contiguous.  If so,
   * return the input pointer and flag it as not a new object.  If it is
   * not contiguous, create a new PyArrayObject using the original data,
   * flag it as a new object and return the pointer.
   */
  PyArrayObject* make_contiguous(PyArrayObject* ary,
                                 int*           is_new_object,
                                 int            min_dims,
                                 int            max_dims)
  {
    PyArrayObject* result;
    if (array_is_contiguous(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      result = (PyArrayObject*) PyArray_ContiguousFromObject((PyObject*)ary,
                                                              array_type(ary),
                                                              min_dims,
                                                              max_dims);
      *is_new_object = 1;
    }
    return result;
  }

  /* Given a PyArrayObject, check to see if it is Fortran-contiguous.
   * If so, return the input pointer, but do not flag it as not a new
   * object.  If it is not Fortran-contiguous, create a new
   * PyArrayObject using the original data, flag it as a new object
   * and return the pointer.
   */
  PyArrayObject* make_fortran(PyArrayObject* ary,
                              int*           is_new_object)
  {
    PyArrayObject* result;
    if (array_is_fortran(ary))
    {
      result = ary;
      *is_new_object = 0;
    }
    else
    {
      Py_INCREF(array_descr(ary));
      result = (PyArrayObject*) PyArray_FromArray(ary,
                                                  array_descr(ary),
#if NPY_API_VERSION < 0x00000007
                                                  NPY_FORTRANORDER);
#else
                                                  NPY_ARRAY_F_CONTIGUOUS);
#endif
      *is_new_object = 1;
    }
    return result;
  }

  /* Convert a given PyObject to a contiguous PyArrayObject of the
   * specified type.  If the input object is not a contiguous
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_contiguous_allow_conversion(PyObject* input,
                                                          int       typecode,
                                                          int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_contiguous(ary1, &is_new2, 0, 0);
      if ( is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }

  /* Convert a given PyObject to a Fortran-ordered PyArrayObject of the
   * specified type.  If the input object is not a Fortran-ordered
   * PyArrayObject, a new one will be created and the new object flag
   * will be set.
   */
  PyArrayObject* obj_to_array_fortran_allow_conversion(PyObject* input,
                                                       int       typecode,
                                                       int*      is_new_object)
  {
    int is_new1 = 0;
    int is_new2 = 0;
    PyArrayObject* ary2;
    PyArrayObject* ary1 = obj_to_array_allow_conversion(input,
                                                        typecode,
                                                        &is_new1);
    if (ary1)
    {
      ary2 = make_fortran(ary1, &is_new2);
      if (is_new1 && is_new2)
      {
        Py_DECREF(ary1);
      }
      ary1 = ary2;
    }
    *is_new_object = is_new1 || is_new2;
    return ary1;
  }


  /* Test whether a python object is contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!array_is_contiguous(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous.  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Test whether a python object is (C_ or F_) contiguous.  If array is
   * contiguous, return 1.  Otherwise, set the python error string and
   * return 0.
   */
  int require_c_or_f_contiguous(PyArrayObject* ary)
  {
    int contiguous = 1;
    if (!(array_is_contiguous(ary) || array_is_fortran(ary)))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must be contiguous (C_ or F_).  A non-contiguous array was given");
      contiguous = 0;
    }
    return contiguous;
  }

  /* Require that a numpy array is not byte-swapped.  If the array is
   * not byte-swapped, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_native(PyArrayObject* ary)
  {
    int native = 1;
    if (!array_is_native(ary))
    {
      PyErr_SetString(PyExc_TypeError,
                      "Array must have native byteorder.  "
                      "A byte-swapped array was given");
      native = 0;
    }
    return native;
  }

  /* Require the given PyArrayObject to have a specified number of
   * dimensions.  If the array has the specified number of dimensions,
   * return 1.  Otherwise, set the python error string and return 0.
   */
  int require_dimensions(PyArrayObject* ary,
                         int            exact_dimensions)
  {
    int success = 1;
    if (array_numdims(ary) != exact_dimensions)
    {
      PyErr_Format(PyExc_TypeError,
                   "Array must have %d dimensions.  Given array has %d dimensions",
                   exact_dimensions,
                   array_numdims(ary));
      success = 0;
    }
    return success;
  }

  /* Require the given PyArrayObject to have one of a list of specified
   * number of dimensions.  If the array has one of the specified number
   * of dimensions, return 1.  Otherwise, set the python error string
   * and return 0.
   */
  int require_dimensions_n(PyArrayObject* ary,
                           int*           exact_dimensions,
                           int            n)
  {
    int success = 0;
    int i;
    char dims_str[255] = "";
    char s[255];
    for (i = 0; i < n && !success; i++)
    {
      if (array_numdims(ary) == exact_dimensions[i])
      {
        success = 1;
      }
    }
    if (!success)
    {
      for (i = 0; i < n-1; i++)
      {
        sprintf(s, "%d, ", exact_dimensions[i]);
        strcat(dims_str,s);
      }
      sprintf(s, " or %d", exact_dimensions[n-1]);
      strcat(dims_str,s);
      PyErr_Format(PyExc_TypeError,
                   "Array must have %s dimensions.  Given array has %d dimensions",
                   dims_str,
                   array_numdims(ary));
    }
    return success;
  }

  /* Require the given PyArrayObject to have a specified shape.  If the
   * array has the specified shape, return 1.  Otherwise, set the python
   * error string and return 0.
   */
  int require_size(PyArrayObject* ary,
                   npy_intp*      size,
                   int            n)
  {
    int i;
    int success = 1;
    size_t len;
    char desired_dims[255] = "[";
    char s[255];
    char actual_dims[255] = "[";
    for(i=0; i < n;i++)
    {
      if (size[i] != -1 &&  size[i] != array_size(ary,i))
      {
        success = 0;
      }
    }
    if (!success)
    {
      for (i = 0; i < n; i++)
      {
        if (size[i] == -1)
        {
          sprintf(s, "*,");
        }
        else
        {
          sprintf(s, "%ld,", (long int)size[i]);
        }
        strcat(desired_dims,s);
      }
      len = strlen(desired_dims);
      desired_dims[len-1] = ']';
      for (i = 0; i < n; i++)
      {
        sprintf(s, "%ld,", (long int)array_size(ary,i));
        strcat(actual_dims,s);
      }
      len = strlen(actual_dims);
      actual_dims[len-1] = ']';
      PyErr_Format(PyExc_TypeError,
                   "Array must have shape of %s.  Given array has shape of %s",
                   desired_dims,
                   actual_dims);
    }
    return success;
  }

  /* Require the given PyArrayObject to to be Fortran ordered.  If the
   * the PyArrayObject is already Fortran ordered, do nothing.  Else,
   * set the Fortran ordering flag and recompute the strides.
   */
  int require_fortran(PyArrayObject* ary)
  {
    int success = 1;
    int nd = array_numdims(ary);
    int i;
    npy_intp * strides = array_strides(ary);
    if (array_is_fortran(ary)) return success;
    int n_non_one = 0;
    /* Set the Fortran ordered flag */
    const npy_intp *dims = array_dimensions(ary);
    for (i=0; i < nd; ++i)
      n_non_one += (dims[i] != 1) ? 1 : 0;
    if (n_non_one > 1)
      array_clearflags(ary,NPY_ARRAY_CARRAY);
    array_enableflags(ary,NPY_ARRAY_FARRAY);
    /* Recompute the strides */
    strides[0] = strides[nd-1];
    for (i=1; i < nd; ++i)
      strides[i] = strides[i-1] * array_size(ary,i-1);
    return success;
  }



#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_new_nxVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  nxVector *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (nxVector *)new nxVector();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_nxVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  nxVector *result = 0 ;
  
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_nxVector" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_nxVector" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_nxVector" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (nxVector *)new nxVector(arg1,arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_nxVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_nxVector", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_nxVector__SWIG_0(self, argc, argv);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_nxVector__SWIG_1(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_nxVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nxVector::nxVector()\n"
    "    nxVector::nxVector(double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_nxVector_FromSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double *arg2 ;
  nxVector tnxv1 ;
  double temp2[3] ;
  PyObject *swig_obj[1] ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    int i;
    
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      for (i = 0; i < 3; i++) 
      {
        PyObject *o = PySequence_GetItem(swig_obj[0],i);
        if (PyNumber_Check(o)) 
        {
          temp2[i] = PyFloat_AsDouble(o);
        } 
        else 
        {
          SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
          SWIG_fail;
        }
      }
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      for (i = 0; i < 3; i++) 
      {
        temp2[i] = d[i];
      }
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected a sequence");
      SWIG_fail;
    }
    
    arg2 = temp2;
  }
  {
    try {
      (arg1)->FromSequence((double const (*))arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_AsSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_AsSequence", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ((nxVector const *)arg1)->AsSequence();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_SetCoords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_SetCoords" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nxVector_SetCoords" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "nxVector_SetCoords" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->SetCoords(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_SetCoords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  NXVECTOR *arg2 = (NXVECTOR *) 0 ;
  nxVector tnxv1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2,SWIGTYPE_p_a_3__double, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nxVector_SetCoords" "', argument " "2"" of type '" "NXVECTOR const *""'"); 
  }
  arg2 = reinterpret_cast< NXVECTOR * >(argp2);
  {
    try {
      (arg1)->SetCoords((NXVECTOR const *)arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_SetCoords(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector_SetCoords", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_a_3__double, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_nxVector_SetCoords__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_nxVector_SetCoords__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'nxVector_SetCoords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nxVector::SetCoords(double,double,double)\n"
    "    nxVector::SetCoords(NXVECTOR const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_nxVector_FromLatLong__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_FromLatLong" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nxVector_FromLatLong" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[2], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "nxVector_FromLatLong" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      (arg1)->FromLatLong(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_FromLatLong__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  double arg3 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_FromLatLong" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nxVector_FromLatLong" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->FromLatLong(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_FromLatLong(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector_FromLatLong", 0, 3, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_nxVector_FromLatLong__SWIG_1(self, argc, argv);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_nxVector_FromLatLong__SWIG_0(self, argc, argv);
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'nxVector_FromLatLong'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nxVector::FromLatLong(double,double,double)\n"
    "    nxVector::FromLatLong(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_nxVector_IsZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  bool result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_IsZero", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (bool)((nxVector const *)arg1)->IsZero();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_IsValid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  bool result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_IsValid", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (bool)((nxVector const *)arg1)->IsValid();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_SetInvalid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_SetInvalid", 0, 0, 0)) SWIG_fail;
  {
    try {
      (arg1)->SetInvalid();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_X(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_X", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->X();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Y(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Y", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->Y();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Z(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Z", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->Z();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Data(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  NXVECTOR *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Data", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (NXVECTOR *) &(arg1)->Data();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_a_3__double, 0 |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_AngleTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (double)((nxVector const *)arg1)->AngleTo((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_UnitVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_UnitVector", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ((nxVector const *)arg1)->UnitVector();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_ComponentPerpendicularTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->ComponentPerpendicularTo((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_ComponentParallelTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->ComponentParallelTo((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_IndexOfMaxComponent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  int result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_IndexOfMaxComponent", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (int)(arg1)->IndexOfMaxComponent();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Longitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Longitude", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->Longitude();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Latitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Latitude", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->Latitude();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_EquatorialToGeographic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxTimeStamp *arg2 = 0 ;
  nxVector tnxv1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_nxTimeStamp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nxVector_EquatorialToGeographic" "', argument " "2"" of type '" "nxTimeStamp const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nxVector_EquatorialToGeographic" "', argument " "2"" of type '" "nxTimeStamp const &""'"); 
  }
  arg2 = reinterpret_cast< nxTimeStamp * >(argp2);
  {
    try {
      result = ((nxVector const *)arg1)->EquatorialToGeographic((nxTimeStamp const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_GeographicToEquatorial(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxTimeStamp *arg2 = 0 ;
  nxVector tnxv1 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res2 = SWIG_ConvertPtr(swig_obj[0], &argp2, SWIGTYPE_p_nxTimeStamp,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "nxVector_GeographicToEquatorial" "', argument " "2"" of type '" "nxTimeStamp const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "nxVector_GeographicToEquatorial" "', argument " "2"" of type '" "nxTimeStamp const &""'"); 
  }
  arg2 = reinterpret_cast< nxTimeStamp * >(argp2);
  {
    try {
      result = ((nxVector const *)arg1)->GeographicToEquatorial((nxTimeStamp const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_GeographicToGeomagneticDipole(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_GeographicToGeomagneticDipole", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ((nxVector const *)arg1)->GeographicToGeomagneticDipole();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_TransformToNewPole__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector *arg3 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  nxVector temp3 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      (arg1)->TransformToNewPole((nxVector const &)*arg2,(nxVector const &)*arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_TransformToNewPole__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  double arg3 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_TransformToNewPole" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[1], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "nxVector_TransformToNewPole" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      (arg1)->TransformToNewPole(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_TransformToNewPole(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector_TransformToNewPole", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_nxVector_TransformToNewPole__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_nxVector_TransformToNewPole__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'nxVector_TransformToNewPole'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nxVector::TransformToNewPole(nxVector const &,nxVector const &)\n"
    "    nxVector::TransformToNewPole(double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_nxVector_RotateAboutXaxis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_RotateAboutXaxis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->RotateAboutXaxis(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_RotateAboutZaxis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector_RotateAboutZaxis" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      (arg1)->RotateAboutZaxis(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Dot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (double)((nxVector const *)arg1)->Dot((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Magnitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector_Magnitude", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (double)((nxVector const *)arg1)->Magnitude();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector_Cross(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->Cross((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->operator +((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (nxVector *) &(arg1)->operator +=((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_OWN |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (nxVector *) &(arg1)->operator -=((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_OWN |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  nxVector *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (nxVector *) &(arg1)->operator *=((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_OWN |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector___imul__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (nxVector *) &(arg1)->operator *=(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_OWN |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___imul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector___imul__", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_nxVector___imul____SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_nxVector___imul____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'nxVector___imul__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    nxVector::operator *=(nxVector const &)\n"
    "    nxVector::operator *=(double const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_nxVector___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector___itruediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (nxVector *) &(arg1)->operator /=(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxVector, SWIG_POINTER_OWN |  0 );
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_nxVector___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->operator -((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "nxVector___neg__", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = ((nxVector const *)arg1)->operator -();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector___add__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((nxVector const *)arg1)->operator +(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector___add__", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_nxVector___add____SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_nxVector___add____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector___sub__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((nxVector const *)arg1)->operator -(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "nxVector___sub__", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_nxVector___sub____SWIG_0(self, argc, argv);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_nxVector___sub____SWIG_1(self, argc, argv);
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  double arg2 ;
  nxVector tnxv1 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  ecode2 = SWIG_AsVal_double(swig_obj[0], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "nxVector___truediv__" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = ((nxVector const *)arg1)->operator /(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___xor__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = ((nxVector const *)arg1)->operator ^((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_nxVector___and__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector tnxv1 ;
  nxVector temp2 ;
  PyObject *swig_obj[1] ;
  double result;
  
  {
    arg1 = &tnxv1;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  {
    if (PySequence_Check(swig_obj[0]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[0]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[0],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[0],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[0],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[0]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[0]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[0]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (double)((nxVector const *)arg1)->operator &((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_delete_nxVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  nxVector *arg1 = (nxVector *) 0 ;
  nxVector tnxv1 ;
  
  {
    arg1 = &tnxv1;
  }
  if (!SWIG_Python_UnpackTuple(args, "delete_nxVector", 0, 0, 0)) SWIG_fail;
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    npy_intp dims[1] = {
      3 
    };
    double* v1;
    PyObject* tresult1 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v1 = (double *)PyArray_DATA((PyArrayObject*)tresult1);
    v1[0] = (*arg1).X();
    v1[1] = (*arg1).Y();
    v1[2] = (*arg1).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult1);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *nxVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_nxVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *nxVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_latitude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT_latitude_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_latitude_set" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GEODETIC_INSTANT_latitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->latitude = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_latitude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_latitude_get" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  result = (double) ((arg1)->latitude);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_longitude_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT_longitude_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_longitude_set" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GEODETIC_INSTANT_longitude_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->longitude = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_longitude_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_longitude_get" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  result = (double) ((arg1)->longitude);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_heightm_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT_heightm_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_heightm_set" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GEODETIC_INSTANT_heightm_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->heightm = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_heightm_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_heightm_get" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  result = (double) ((arg1)->heightm);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_mjd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT_mjd_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_mjd_set" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "GEODETIC_INSTANT_mjd_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->mjd = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_mjd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_mjd_get" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  result = (double) ((arg1)->mjd);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GEODETIC_INSTANT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (GEODETIC_INSTANT *)new GEODETIC_INSTANT();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GEODETIC_INSTANT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GEODETIC_INSTANT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double val1 ;
  int ecode1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  GEODETIC_INSTANT *result = 0 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(swig_obj[0], &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_GEODETIC_INSTANT" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_GEODETIC_INSTANT" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_GEODETIC_INSTANT" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_GEODETIC_INSTANT" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (GEODETIC_INSTANT *)new GEODETIC_INSTANT(arg1,arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GEODETIC_INSTANT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_GEODETIC_INSTANT(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_GEODETIC_INSTANT", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_GEODETIC_INSTANT__SWIG_0(self, argc, argv);
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_double(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_double(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_new_GEODETIC_INSTANT__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_GEODETIC_INSTANT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    GEODETIC_INSTANT::GEODETIC_INSTANT()\n"
    "    GEODETIC_INSTANT::GEODETIC_INSTANT(double,double,double,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT___eq__", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT___eq__" "', argument " "1"" of type '" "GEODETIC_INSTANT const *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)((GEODETIC_INSTANT const *)arg1)->operator ==((GEODETIC_INSTANT const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  PyErr_Clear();
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_FromSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  double *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2[4] ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "GEODETIC_INSTANT_FromSequence", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_FromSequence" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  {
    int i;
    
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      for (i = 0; i < 4; i++) 
      {
        PyObject *o = PySequence_GetItem(swig_obj[1],i);
        if (PyNumber_Check(o)) 
        {
          temp2[i] = PyFloat_AsDouble(o);
        } 
        else 
        {
          SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
          SWIG_fail;
        }
      }
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      for (i = 0; i < 4; i++) 
      {
        temp2[i] = d[i];
      }
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected a sequence");
      SWIG_fail;
    }
    
    arg2 = temp2;
  }
  {
    try {
      (arg1)->FromSequence((double const (*))arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GEODETIC_INSTANT_AsSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  GEODETIC_INSTANT result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GEODETIC_INSTANT_AsSequence" "', argument " "1"" of type '" "GEODETIC_INSTANT const *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  {
    try {
      result = ((GEODETIC_INSTANT const *)arg1)->AsSequence();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      4 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).latitude;
    v[1] = (result).longitude;
    v[2] = (result).heightm;
    v[3] = (result).mjd;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GEODETIC_INSTANT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GEODETIC_INSTANT *arg1 = (GEODETIC_INSTANT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_GEODETIC_INSTANT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GEODETIC_INSTANT" "', argument " "1"" of type '" "GEODETIC_INSTANT *""'"); 
  }
  arg1 = reinterpret_cast< GEODETIC_INSTANT * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GEODETIC_INSTANT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_GEODETIC_INSTANT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *GEODETIC_INSTANT_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN int Swig_var_SKCLIMATOLOGY_AOA_DAYS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AOA_DAYS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AOA_DAYS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AOA_DAYS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOLDUST_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOLDUST_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOLDUST_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOLDUST_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOLH2SO4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOLH2SO4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOLH2SO4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOLH2SO4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOLICE_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOLICE_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOLICE_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOLICE_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOLWATER_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOLWATER_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOLWATER_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOLWATER_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ALBEDO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ALBEDO is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ALBEDO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ALBEDO), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_Ar_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_Ar_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_Ar_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_Ar_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BCPI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BCPI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BCPI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BCPI), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BCPO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BCPO is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BCPO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BCPO), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRCL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRCL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRCL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRCL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRNO3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRNO3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRNO3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRNO3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRO_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRO_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRO_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRO_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRX_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRX_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRX_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRX_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRX_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRX_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRX_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRX_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRY_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRY_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRY_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRY_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BRY_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BRY_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BRY_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BRY_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_BR_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_BR_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_BR_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_BR_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C2H2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C2H2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C2H2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C2H2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C2H4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C2H4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C2H4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C2H4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C2H6_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C2H6_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C2H6_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C2H6_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C3H6O_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C3H6O_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C3H6O_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C3H6O_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C3H6O_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C3H6O_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C3H6O_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C3H6O_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C5H8_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C5H8_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C5H8_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C5H8_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_C5H8_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_C5H8_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_C5H8_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_C5H8_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CCL4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CCL4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CCL4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CCL4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CCL4_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CCL4_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CCL4_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CCL4_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CF2CL2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CF2CL2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CF2CL2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CF2CL2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CF2CL2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CF2CL2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CF2CL2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CF2CL2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CF4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CF4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CF4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CF4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CFCL3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CFCL3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CFCL3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CFCL3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CFCL3_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CFCL3_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CFCL3_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CFCL3_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH2O_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH2O_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH2O_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH2O_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH2O_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH2O_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH2O_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH2O_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3BR_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3BR_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3BR_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3BR_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3BR_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3BR_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3BR_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3BR_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3CL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3CL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3CL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3CL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3CL_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3CL_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3CL_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3CL_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3CN_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3CN_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3CN_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3CN_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3I_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3I_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3I_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3I_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3I_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3I_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3I_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3I_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH3OH_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH3OH_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH3OH_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH3OH_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CH4_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CH4_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CH4_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CH4_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CL2O2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CL2O2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CL2O2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CL2O2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CL2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CL2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CL2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CL2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLNO3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLNO3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLNO3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLNO3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLONO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLONO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLONO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLONO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLOUD_FRACTION_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLOUD_FRACTION is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLOUD_FRACTION_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLOUD_FRACTION), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLY_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLY_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLY_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLY_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CLY_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CLY_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CLY_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CLY_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CO2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CO2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CO2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CO2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_COF2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_COF2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_COF2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_COF2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_CO_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_CO_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_CO_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_CO_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_DUST_0p7mu_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_DUST_0p7mu is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_DUST_0p7mu_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_DUST_0p7mu), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_DUST_1p4mu_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_DUST_1p4mu is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_DUST_1p4mu_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_DUST_1p4mu), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_DUST_2p4mu_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_DUST_2p4mu is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_DUST_2p4mu_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_DUST_2p4mu), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_DUST_4p5mu_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_DUST_4p5mu is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_DUST_4p5mu_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_DUST_4p5mu), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_EPV_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_EPV is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_EPV_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_EPV), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_GEOMETRIC_HEIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_GEOMETRIC_HEIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_GEOMETRIC_HEIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_GEOMETRIC_HEIGHT), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2CO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2CO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2CO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2CO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2O2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2O2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2O2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2O2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2O_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2O_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2O_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2O_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2O_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2O_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2O_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2O_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2S_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2S_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2S_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2S_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HBR_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HBR_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HBR_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HBR_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HCL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HCL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HCL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HCL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HCN_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HCN_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HCN_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HCN_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HCOOH_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HCOOH_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HCOOH_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HCOOH_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HF_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HF_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HF_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HF_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HI_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HI_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HI_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HI_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HNO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HNO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HNO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HNO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HNO2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HNO2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HNO2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HNO2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HNO3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HNO3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HNO3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HNO3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HNO3_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HNO3_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HNO3_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HNO3_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HNO4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HNO4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HNO4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HNO4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HOBR_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HOBR_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HOBR_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HOBR_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_HOCL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_HOCL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_HOCL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_HOCL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_H_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_H_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_H_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_H_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_He_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_He_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_He_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_He_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ICE_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ICE_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ICE_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ICE_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_JH2O_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_JH2O is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_JH2O_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_JH2O), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_MECL_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_MECL_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_MECL_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_MECL_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_MECL_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_MECL_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_MECL_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_MECL_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N2O5_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N2O5_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N2O5_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N2O5_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N2O_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N2O_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N2O_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N2O_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N2O_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N2O_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N2O_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N2O_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NH3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NH3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NH3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NH3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NH3_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NH3_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NH3_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NH3_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NITS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NITS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NITS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NITS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NO2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NO2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NO2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NO2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NO3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NO3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NO3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NO3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NOPLUS_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NOPLUS_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NOPLUS_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NOPLUS_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NOY_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NOY_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NOY_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NOY_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NOY_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NOY_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NOY_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NOY_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_NO_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_NO_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_NO_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_NO_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_N_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_N_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_N_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_N_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O2_O2_CM6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O2_O2_CM6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O2_O2_CM6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O2_O2_CM6), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O3_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O3_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O3_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O3_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_OCLO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_OCLO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_OCLO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_OCLO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_OCPI_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_OCPI is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_OCPI_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_OCPI), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_OCPO_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_OCPO is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_OCPO_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_OCPO), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_OCS_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_OCS_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_OCS_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_OCS_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_OH_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_OH_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_OH_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_OH_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_O_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_O_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_O_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_O_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_PAN_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_PAN_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_PAN_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_PAN_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_PAN_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_PAN_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_PAN_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_PAN_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_PH3_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_PH3_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_PH3_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_PH3_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_PRESSURE_PA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_PRESSURE_PA is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_PRESSURE_PA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_PRESSURE_PA), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_QI_MMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_QI_MMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_QI_MMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_QI_MMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_QL_MMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_QL_MMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_QL_MMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_QL_MMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_QV_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_QV is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_QV_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_QV), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_RH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_RH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_RH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_RH), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ROOH_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ROOH_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ROOH_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ROOH_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ROO_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ROO_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ROO_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ROO_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SALA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SALA is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SALA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SALA), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SALC_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SALC is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SALC_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SALC), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SF6_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SF6_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SF6_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SF6_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SO2_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SO2_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SO2_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SO2_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SO2_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SO2_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SO2_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SO2_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SO4_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SO4_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SO4_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SO4_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SO4_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SO4_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SO4_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SO4_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_SURFACE_PRESSURE_PA_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_SURFACE_PRESSURE_PA is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_SURFACE_PRESSURE_PA_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_SURFACE_PRESSURE_PA), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_TEMPERATURE_K_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_TEMPERATURE_K is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_TEMPERATURE_K_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_TEMPERATURE_K), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_UNDEFINED_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_UNDEFINED is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_UNDEFINED_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_UNDEFINED), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_XXX_CM3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_XXX_CM3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_XXX_CM3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_XXX_CM3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_XXX_VMR_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_XXX_VMR is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_XXX_VMR_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_XXX_VMR), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_0_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_0 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_0_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_0), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_1_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_1 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_1_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_1), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_2), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_4_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_4 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_4_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_4), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_5_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_5 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_5_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_5), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_6_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_6 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_6_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_6), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_7_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_7 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_7_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_7), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_8_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_8 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_8_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_8), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_9_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_9 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_9_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_9), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_O2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_O2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_O2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_O2), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_OH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_OH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_OH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_OH), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_PHOTOCHEMICAL_O3_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_PHOTOCHEMICAL_O3 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_PHOTOCHEMICAL_O3_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_PHOTOCHEMICAL_O3), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKEMISSION_THERMAL_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKEMISSION_THERMAL is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKEMISSION_THERMAL_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKEMISSION_THERMAL), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_MODE2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOL_CM3_MODE2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_MODE2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOL_CM3_MODE2), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_AEROSOL_MODEWIDTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_AEROSOL_MODEWIDTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_AEROSOL_MODEWIDTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_AEROSOL_MODEWIDTH), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_SKCLIMATOLOGY_ICE_MODEWIDTH_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable SKCLIMATOLOGY_ICE_MODEWIDTH is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_SKCLIMATOLOGY_ICE_MODEWIDTH_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&SKCLIMATOLOGY_ICE_MODEWIDTH), SWIGTYPE_p_GUID,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_AddGlobalClimatologyHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  CLIMATOLOGY_HANDLE *arg2 = 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "AddGlobalClimatologyHandle", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddGlobalClimatologyHandle" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_GUID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "AddGlobalClimatologyHandle" "', argument " "2"" of type '" "CLIMATOLOGY_HANDLE const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "AddGlobalClimatologyHandle" "', argument " "2"" of type '" "CLIMATOLOGY_HANDLE const &""'"); 
  }
  arg2 = reinterpret_cast< CLIMATOLOGY_HANDLE * >(argp2);
  {
    try {
      result = (bool)AddGlobalClimatologyHandle((char const *)arg1,(GUID const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindGlobalClimatologyHandle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  CLIMATOLOGY_HANDLE *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindGlobalClimatologyHandle" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  ecode2 = SWIG_AsVal_bool(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FindGlobalClimatologyHandle" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (CLIMATOLOGY_HANDLE *)FindGlobalClimatologyHandle((char const *)arg1,arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GUID, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindGlobalClimatologyHandle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  CLIMATOLOGY_HANDLE *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindGlobalClimatologyHandle" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (CLIMATOLOGY_HANDLE *)FindGlobalClimatologyHandle((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_GUID, 0 |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindGlobalClimatologyHandle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "FindGlobalClimatologyHandle", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_FindGlobalClimatologyHandle__SWIG_1(self, argc, argv);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FindGlobalClimatologyHandle__SWIG_0(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'FindGlobalClimatologyHandle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FindGlobalClimatologyHandle(char const *,bool)\n"
    "    FindGlobalClimatologyHandle(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FindGlobalClimatologyNameOfHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CLIMATOLOGY_HANDLE *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  char *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_GUID,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FindGlobalClimatologyNameOfHandle" "', argument " "1"" of type '" "CLIMATOLOGY_HANDLE &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FindGlobalClimatologyNameOfHandle" "', argument " "1"" of type '" "CLIMATOLOGY_HANDLE &""'"); 
  }
  arg1 = reinterpret_cast< CLIMATOLOGY_HANDLE * >(argp1);
  {
    try {
      result = (char *)FindGlobalClimatologyNameOfHandle(*arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_HasKey_InGlobalClimatologyHandle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HasKey_InGlobalClimatologyHandle" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (bool)HasKey_InGlobalClimatologyHandle((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_InternalGlobalClimatologyHandleTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< nxString,CLIMATOLOGY_HANDLE > *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "InternalGlobalClimatologyHandleTable", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (std::map< nxString,CLIMATOLOGY_HANDLE > *)InternalGlobalClimatologyHandleTable();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__mapT_nxString_GUID_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AddGeneratedGlobalClimatologyHandleIfNotExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AddGeneratedGlobalClimatologyHandleIfNotExists" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (bool)AddGeneratedGlobalClimatologyHandleIfNotExists((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SetParentHandleTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::map< nxString,CLIMATOLOGY_HANDLE > *arg1 = (std::map< nxString,CLIMATOLOGY_HANDLE > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_std__mapT_nxString_GUID_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SetParentHandleTable" "', argument " "1"" of type '" "std::map< nxString,CLIMATOLOGY_HANDLE > *""'"); 
  }
  arg1 = reinterpret_cast< std::map< nxString,CLIMATOLOGY_HANDLE > * >(argp1);
  {
    try {
      result = (bool)SetParentHandleTable(arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBasisDirection_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *arg1 = (ISKBasisDirection *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector *arg3 = 0 ;
  nxVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nxVector temp2 ;
  nxVector temp3 ;
  nxVector temp4 ;
  PyObject *swig_obj[4] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKBasisDirection_Assign", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBasisDirection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBasisDirection_Assign" "', argument " "1"" of type '" "ISKBasisDirection *""'"); 
  }
  arg1 = reinterpret_cast< ISKBasisDirection * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[3]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[3]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[3],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[3],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[3],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp4.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg4 = &temp4;
    }
    else if (PyArray_Check(swig_obj[3]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[3]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[3]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp4.SetCoords(d[0], d[1], d[2]);
      arg4 = &temp4;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      (arg1)->Assign((nxVector const &)*arg2,(nxVector const &)*arg3,(nxVector const &)*arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBasisDirection_Propagation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *arg1 = (ISKBasisDirection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBasisDirection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBasisDirection_Propagation" "', argument " "1"" of type '" "ISKBasisDirection const *""'"); 
  }
  arg1 = reinterpret_cast< ISKBasisDirection * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKBasisDirection const *)arg1)->Propagation();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBasisDirection_Theta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *arg1 = (ISKBasisDirection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBasisDirection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBasisDirection_Theta" "', argument " "1"" of type '" "ISKBasisDirection const *""'"); 
  }
  arg1 = reinterpret_cast< ISKBasisDirection * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKBasisDirection const *)arg1)->Theta();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBasisDirection_Phi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *arg1 = (ISKBasisDirection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBasisDirection, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBasisDirection_Phi" "', argument " "1"" of type '" "ISKBasisDirection const *""'"); 
  }
  arg1 = reinterpret_cast< ISKBasisDirection * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKBasisDirection const *)arg1)->Phi();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKBasisDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ISKBasisDirection", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ISKBasisDirection *)new ISKBasisDirection();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKBasisDirection, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKBasisDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBasisDirection *arg1 = (ISKBasisDirection *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBasisDirection, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKBasisDirection" "', argument " "1"" of type '" "ISKBasisDirection *""'"); 
  }
  arg1 = reinterpret_cast< ISKBasisDirection * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKBasisDirection_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKBasisDirection, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKBasisDirection_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_IQUV_I_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "IQUV_I_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_I_set" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IQUV_I_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->I = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_I_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_I_get" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  result = (double) ((arg1)->I);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_Q_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "IQUV_Q_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_Q_set" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IQUV_Q_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->Q = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_Q_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_Q_get" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  result = (double) ((arg1)->Q);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_U_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "IQUV_U_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_U_set" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IQUV_U_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->U = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_U_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_U_get" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  result = (double) ((arg1)->U);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_V_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "IQUV_V_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_V_set" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IQUV_V_set" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  if (arg1) (arg1)->V = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IQUV_V_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IQUV_V_get" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  result = (double) ((arg1)->V);
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IQUV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_IQUV", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (IQUV *)new IQUV();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IQUV, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IQUV(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IQUV *arg1 = (IQUV *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_IQUV, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IQUV" "', argument " "1"" of type '" "IQUV *""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IQUV_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IQUV, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *IQUV_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKStokesVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ISKStokesVector *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ISKStokesVector *)new ISKStokesVector();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKStokesVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKStokesVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  IQUV *arg1 = 0 ;
  ISKBasisDirection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  ISKStokesVector *result = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_IQUV,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKStokesVector" "', argument " "1"" of type '" "IQUV const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ISKStokesVector" "', argument " "1"" of type '" "IQUV const &""'"); 
  }
  arg1 = reinterpret_cast< IQUV * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ISKBasisDirection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_ISKStokesVector" "', argument " "2"" of type '" "ISKBasisDirection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ISKStokesVector" "', argument " "2"" of type '" "ISKBasisDirection const &""'"); 
  }
  arg2 = reinterpret_cast< ISKBasisDirection * >(argp2);
  {
    try {
      result = (ISKStokesVector *)new ISKStokesVector((IQUV const &)*arg1,(ISKBasisDirection const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKStokesVector, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKStokesVector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ISKStokesVector", 0, 2, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ISKStokesVector__SWIG_0(self, argc, argv);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_IQUV, SWIG_POINTER_NO_NULL | 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ISKBasisDirection, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_ISKStokesVector__SWIG_1(self, argc, argv);
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ISKStokesVector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ISKStokesVector::ISKStokesVector()\n"
    "    ISKStokesVector::ISKStokesVector(IQUV const &,ISKBasisDirection const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_Assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  IQUV *arg2 = 0 ;
  ISKBasisDirection *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKStokesVector_Assign", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_Assign" "', argument " "1"" of type '" "ISKStokesVector *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_IQUV,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKStokesVector_Assign" "', argument " "2"" of type '" "IQUV const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKStokesVector_Assign" "', argument " "2"" of type '" "IQUV const &""'"); 
  }
  arg2 = reinterpret_cast< IQUV * >(argp2);
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ISKBasisDirection,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ISKStokesVector_Assign" "', argument " "3"" of type '" "ISKBasisDirection const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKStokesVector_Assign" "', argument " "3"" of type '" "ISKBasisDirection const &""'"); 
  }
  arg3 = reinterpret_cast< ISKBasisDirection * >(argp3);
  {
    try {
      (arg1)->Assign((IQUV const &)*arg2,(ISKBasisDirection const &)*arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_Stokes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  IQUV *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_Stokes" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (IQUV *) &((ISKStokesVector const *)arg1)->Stokes();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      4 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->I;
    v[1] = (result)->Q;
    v[2] = (result)->U;
    v[3] = (result)->V;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_Basis(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKBasisDirection *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_Basis" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (ISKBasisDirection *) &((ISKStokesVector const *)arg1)->Basis();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKBasisDirection, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_to_new_basis__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  ISKBasisDirection *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_to_new_basis" "', argument " "1"" of type '" "ISKStokesVector *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ISKBasisDirection,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKStokesVector_to_new_basis" "', argument " "2"" of type '" "ISKBasisDirection const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKStokesVector_to_new_basis" "', argument " "2"" of type '" "ISKBasisDirection const &""'"); 
  }
  arg2 = reinterpret_cast< ISKBasisDirection * >(argp2);
  {
    try {
      (arg1)->to_new_basis((ISKBasisDirection const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_to_new_basis__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector *arg3 = 0 ;
  nxVector *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nxVector temp2 ;
  nxVector temp3 ;
  nxVector temp4 ;
  
  if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_to_new_basis" "', argument " "1"" of type '" "ISKStokesVector *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[3]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[3]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[3],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[3],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[3],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp4.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg4 = &temp4;
    }
    else if (PyArray_Check(swig_obj[3]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[3]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[3]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp4.SetCoords(d[0], d[1], d[2]);
      arg4 = &temp4;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      (arg1)->to_new_basis((nxVector const &)*arg2,(nxVector const &)*arg3,(nxVector const &)*arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_to_new_basis(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "ISKStokesVector_to_new_basis", 0, 4, argv))) SWIG_fail;
  --argc;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ISKStokesVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ISKBasisDirection, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_ISKStokesVector_to_new_basis__SWIG_0(self, argc, argv);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_ISKStokesVector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_nxVector, SWIG_POINTER_NO_NULL | 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_ISKStokesVector_to_new_basis__SWIG_1(self, argc, argv);
          }
        }
      }
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'ISKStokesVector_to_new_basis'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ISKStokesVector::to_new_basis(ISKBasisDirection const &)\n"
    "    ISKStokesVector::to_new_basis(nxVector const &,nxVector const &,nxVector const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_propagation_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_propagation_direction" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKStokesVector const *)arg1)->propagation_direction();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_theta_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_theta_direction" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKStokesVector const *)arg1)->theta_direction();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_phi_direction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_phi_direction" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (nxVector *) &((ISKStokesVector const *)arg1)->phi_direction();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result)->X();
    v[1] = (result)->Y();
    v[2] = (result)->Z();
    
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_I(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_I" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (double)((ISKStokesVector const *)arg1)->I();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_Q(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_Q" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (double)((ISKStokesVector const *)arg1)->Q();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_U(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_U" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (double)((ISKStokesVector const *)arg1)->U();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVector_V(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVector_V" "', argument " "1"" of type '" "ISKStokesVector const *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      result = (double)((ISKStokesVector const *)arg1)->V();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKStokesVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVector *arg1 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVector, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKStokesVector" "', argument " "1"" of type '" "ISKStokesVector *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVector * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKStokesVector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKStokesVector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKStokesVector_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_SKTRAN_IFSetRegistryDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SKTRAN_IFSetRegistryDirectory" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (bool)SKTRAN_IFSetRegistryDirectory((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SKTRAN_IFCreateRegistryEntriesForDLL(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "SKTRAN_IFCreateRegistryEntriesForDLL", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SKTRAN_IFCreateRegistryEntriesForDLL" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SKTRAN_IFCreateRegistryEntriesForDLL" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (bool)SKTRAN_IFCreateRegistryEntriesForDLL((char const *)arg1,(char const *)arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKModuleBase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKModuleBase *arg1 = (ISKModuleBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKModuleBase, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKModuleBase" "', argument " "1"" of type '" "ISKModuleBase *""'"); 
  }
  arg1 = reinterpret_cast< ISKModuleBase * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKModuleBase_RawObjectUnknown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKModuleBase *arg1 = (ISKModuleBase *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxUnknown *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKModuleBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKModuleBase_RawObjectUnknown" "', argument " "1"" of type '" "ISKModuleBase *""'"); 
  }
  arg1 = reinterpret_cast< ISKModuleBase * >(argp1);
  {
    try {
      result = (nxUnknown *)(arg1)->RawObjectUnknown();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxUnknown, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKModuleBase_SetProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKModuleBase *arg1 = (ISKModuleBase *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = (void *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *objectptr3 ;
  void *arrayptr3 ;
  double scalarvalue3 ;
  PyArrayObject *newarray3 ;
  int isnewarray3 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKModuleBase_SetProperty", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKModuleBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKModuleBase_SetProperty" "', argument " "1"" of type '" "ISKModuleBase *""'"); 
  }
  arg1 = reinterpret_cast< ISKModuleBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKModuleBase_SetProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    isnewarray3   = 0;
    newarray3 = nullptr;
    if (PyUnicode_Check(swig_obj[2]))																				// See if we have a string coming in
    {
      arg3 = (void *)(intptr_t)PyUnicode_AsUTF8(swig_obj[2]);
      arg4 = -3;
    }
    else if (PySequence_Check(swig_obj[2]) || PyArray_Check(swig_obj[2]))													// See if this is a Python sequence or numpy array
    {
      // If it is then
      newarray3 =  obj_to_array_contiguous_allow_conversion(swig_obj[2], NPY_DOUBLE, &isnewarray3);					// Make a new contiguous array object for Python
      arrayptr3 = 	PyArray_DATA( newarray3);																	// Get a pointer to the start of the absorption array
      arg3       =  arrayptr3;
      arg4       =  (int)PyArray_Size( (PyObject*)newarray3);
    }
    else if ( PyNumber_Check( swig_obj[2]))																			// Is this a scalar number
    {
      scalarvalue3 = PyFloat_AsDouble(swig_obj[2]);
      arg3 = &scalarvalue3;
      arg4 = -1;
    }
    
    else if ( SWIG_IsOK( SWIG_ConvertPtr(swig_obj[2], &objectptr3, SWIGTYPE_p_ISKModuleBase, 0 |  0 ) ) )				// IS this an instance of ISKModuleBase or a derived class
    {
      arg3 = objectptr3;
      arg4 = -2;
    }
    else
    {
      arg3   = nullptr;
      arg4   = -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar, array or SasktranIF object derived from ISKModuleBase"); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SetProperty((char const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (isnewarray3 && newarray3)
    {
      Py_DECREF(newarray3); 
    }
  }
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  {
    if (isnewarray3 && newarray3)
    {
      Py_DECREF(newarray3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKModuleBase_GetProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKModuleBase *arg1 = (ISKModuleBase *) 0 ;
  char *arg2 = (char *) 0 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double *propptr3 ;
  int numpts3 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  {
    arg3 = (double**)&propptr3;
    arg4 = &numpts3;
  }
  if (!SWIG_Python_UnpackTuple(args, "ISKModuleBase_GetProperty", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKModuleBase, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKModuleBase_GetProperty" "', argument " "1"" of type '" "ISKModuleBase *""'"); 
  }
  arg1 = reinterpret_cast< ISKModuleBase * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKModuleBase_GetProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (bool)(arg1)->GetProperty((char const *)arg2,(double const **)arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    PyObject*				radarray;									// Object to hold the numpy object copied form the radiance
    double*					outptr;										// Pointer to the data int the numpy object
    const double*			dataptr = *(arg3);
    int			            npts    = *(arg4);
    npy_intp				dims[1] = {
      npts 
    };						// The dimensions of the numpy object
    
    if ( dataptr == NULL)
    {
      radarray = Py_None;
      Py_INCREF(radarray);
    }
    else
    {
      if (npts == 0)															// IF we are returning a scalar value
      {
        radarray = PyFloat_FromDouble(*dataptr);							// Create the scalar value numpy 2-D array
        if (!radarray) SWIG_fail;											// see if it failed
      }
      else
      {
        radarray = PyArray_SimpleNew(1, dims, NPY_DOUBLE);					// Create the numpy array
        if (!radarray) SWIG_fail;											// see if it failed
        outptr = (double *)PyArray_DATA((PyArrayObject*)radarray);			// Get a pointer to the start of the array
        for (int i = 0; i < npts;  i++)
        {
          outptr[i] = dataptr[i];
        }
      }
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,radarray);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *ISKModuleBase_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKModuleBase, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ISKClimatology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKClimatology *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKClimatology" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKClimatology *)new ISKClimatology((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKClimatology, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKClimatology(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKClimatology" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_Stub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKClimatology_Stub *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_Stub" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    try {
      result = (ISKClimatology_Stub *)(arg1)->Stub();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKClimatology_Stub, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_Create_New_ClimatologyName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKClimatology_Create_New_ClimatologyName", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_Create_New_ClimatologyName" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKClimatology_Create_New_ClimatologyName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (bool)(arg1)->Create_New_ClimatologyName((char const *)arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_IsValidObject" "', argument " "1"" of type '" "ISKClimatology const *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    try {
      result = (bool)((ISKClimatology const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_UpdateCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKClimatology_UpdateCache", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_UpdateCache" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->UpdateCache((GEODETIC_INSTANT const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_GetParameter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  char *arg2 = (char *) 0 ;
  GEODETIC_INSTANT *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp3 ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject *swig_obj[3] ;
  bool result;
  
  arg4 = &temp4;
  if (!SWIG_Python_UnpackTuple(args, "ISKClimatology_GetParameter", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_GetParameter" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    void*  		objectptr;
    int	   	result;
    
    if (PyBytes_Check(swig_obj[1]))
    {
      arg2 = (char*)(intptr_t)PyBytes_AsString(swig_obj[1]);
      
    }
    else if (PyUnicode_Check(swig_obj[1]))
    {
      arg2   = (char*)(intptr_t)PyUnicode_AsUTF8(swig_obj[1]);
    }
    else
    {
      static bool firsttime = true;
      if (firsttime)
      {
        nxLog::Record(NXLOG_WARNING,"Deprecated feature. We are dropping support for passing GUID handles through the sasktran interface\n."
          "Please replace the GUID with a corresponding string \n"
          "e.g. replace skif.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 with 'SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3'");
        firsttime = false;
      }
      result = SWIG_ConvertPtr(swig_obj[1], &objectptr, SWIGTYPE_p_GUID, 0 |  0 );
      if (!SWIG_IsOK(result))
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError, " error converting argument to CLIMATOLOGY_HANDLE const &"); 
        SWIG_fail;
      }
      arg2 = (char*)(intptr_t)FindGlobalClimatologyNameOfHandle( (*(CLIMATOLOGY_HANDLE*)(objectptr)) );
    }
  }
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[2],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp3.latitude = PyFloat_AsDouble(o1);
        temp3.longitude = PyFloat_AsDouble(o2);
        temp3.heightm = PyFloat_AsDouble(o3);
        temp3.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.latitude = d[0];
      temp3.longitude = d[1];
      temp3.heightm = d[2];
      temp3.mjd = d[4];
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->GetParameter((char const *)arg2,(GEODETIC_INSTANT const &)*arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_GetHeightProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  char *arg2 = (char *) 0 ;
  GEODETIC_INSTANT *arg3 = 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp3 ;
  double scalarwavenumber4 ;
  double scalarrad4 ;
  PyArrayObject *objectwavenumber4 ;
  PyArrayObject *objectrad4 ;
  int isnewarray4 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKClimatology_GetHeightProfile", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_GetHeightProfile" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    void*  		objectptr;
    int	   	result;
    
    if (PyBytes_Check(swig_obj[1]))
    {
      arg2 = (char*)(intptr_t)PyBytes_AsString(swig_obj[1]);
      
    }
    else if (PyUnicode_Check(swig_obj[1]))
    {
      arg2   = (char*)(intptr_t)PyUnicode_AsUTF8(swig_obj[1]);
    }
    else
    {
      static bool firsttime = true;
      if (firsttime)
      {
        nxLog::Record(NXLOG_WARNING,"Deprecated feature. We are dropping support for passing GUID handles through the sasktran interface\n."
          "Please replace the GUID with a corresponding string \n"
          "e.g. replace skif.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 with 'SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3'");
        firsttime = false;
      }
      result = SWIG_ConvertPtr(swig_obj[1], &objectptr, SWIGTYPE_p_GUID, 0 |  0 );
      if (!SWIG_IsOK(result))
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError, " error converting argument to CLIMATOLOGY_HANDLE const &"); 
        SWIG_fail;
      }
      arg2 = (char*)(intptr_t)FindGlobalClimatologyNameOfHandle( (*(CLIMATOLOGY_HANDLE*)(objectptr)) );
    }
  }
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[2],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp3.latitude = PyFloat_AsDouble(o1);
        temp3.longitude = PyFloat_AsDouble(o2);
        temp3.heightm = PyFloat_AsDouble(o3);
        temp3.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.latitude = d[0];
      temp3.longitude = d[1];
      temp3.heightm = d[2];
      temp3.mjd = d[4];
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    isnewarray4   = 0;
    if (PySequence_Check(swig_obj[3]) || PyArray_Check(swig_obj[3]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber4 =  obj_to_array_contiguous_allow_conversion(swig_obj[3], NPY_DOUBLE, &isnewarray4);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber4);
      dims[0]          = numpoints;
      objectrad4        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad4)) SWIG_fail;		// see if it failed
      
      arg4 = (double *)PyArray_DATA( objectwavenumber4);																	// Get a pointer to the start of the absorption array
      arg5 = (double *)PyArray_DATA( objectrad4);
      arg6 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[3]))																				// Is this a scalar number
    {
      scalarwavenumber4 = PyFloat_AsDouble(swig_obj[3]);
      arg4 = &scalarwavenumber4;
      arg5 = &scalarrad4;
      arg6 = -1;
    }
    else
    {
      arg4 = nullptr;
      arg5 = nullptr;
      arg6 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->GetHeightProfile((char const *)arg2,(GEODETIC_INSTANT const &)*arg3,(double const *)arg4,arg5,arg6);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg6;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad4);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad4));
      
    }
  }
  {
    if (isnewarray4 && objectwavenumber4)
    {
      Py_DECREF(objectwavenumber4); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray4 && objectwavenumber4)
    {
      Py_DECREF(objectwavenumber4); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKClimatology_SetPropertyUserDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKClimatology *arg1 = (ISKClimatology *) 0 ;
  char *arg2 = (char *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKClimatology_SetPropertyUserDefined", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKClimatology, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKClimatology_SetPropertyUserDefined" "', argument " "1"" of type '" "ISKClimatology *""'"); 
  }
  arg1 = reinterpret_cast< ISKClimatology * >(argp1);
  {
    void*  		objectptr;
    int	   	result;
    
    if (PyBytes_Check(swig_obj[1]))
    {
      arg2 = (char*)(intptr_t)PyBytes_AsString(swig_obj[1]);
      
    }
    else if (PyUnicode_Check(swig_obj[1]))
    {
      arg2   = (char*)(intptr_t)PyUnicode_AsUTF8(swig_obj[1]);
    }
    else
    {
      static bool firsttime = true;
      if (firsttime)
      {
        nxLog::Record(NXLOG_WARNING,"Deprecated feature. We are dropping support for passing GUID handles through the sasktran interface\n."
          "Please replace the GUID with a corresponding string \n"
          "e.g. replace skif.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 with 'SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3'");
        firsttime = false;
      }
      result = SWIG_ConvertPtr(swig_obj[1], &objectptr, SWIGTYPE_p_GUID, 0 |  0 );
      if (!SWIG_IsOK(result))
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError, " error converting argument to CLIMATOLOGY_HANDLE const &"); 
        SWIG_fail;
      }
      arg2 = (char*)(intptr_t)FindGlobalClimatologyNameOfHandle( (*(CLIMATOLOGY_HANDLE*)(objectptr)) );
    }
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    try {
      result = (bool)(arg1)->SetPropertyUserDefined((char const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *ISKClimatology_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKClimatology, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKClimatology_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKOpticalProperty__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *result = 0 ;
  
  if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
  {
    try {
      result = (ISKOpticalProperty *)new ISKOpticalProperty();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKOpticalProperty, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKOpticalProperty__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  ISKOpticalProperty *result = 0 ;
  
  if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKOpticalProperty" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKOpticalProperty *)new ISKOpticalProperty((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKOpticalProperty, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKOpticalProperty(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  
  if (!(argc = SWIG_Python_UnpackTuple(args, "new_ISKOpticalProperty", 0, 1, argv))) SWIG_fail;
  --argc;
  if (argc == 0) {
    return _wrap_new_ISKOpticalProperty__SWIG_0(self, argc, argv);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ISKOpticalProperty__SWIG_1(self, argc, argv);
    }
  }
  
fail:
  SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_ISKOpticalProperty'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ISKOpticalProperty::ISKOpticalProperty()\n"
    "    ISKOpticalProperty::ISKOpticalProperty(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ISKOpticalProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKOpticalProperty" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_Stub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKOpticalProperty_Stub *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_Stub" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    try {
      result = (ISKOpticalProperty_Stub *)(arg1)->Stub();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKOpticalProperty_Stub, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_IsValidObject" "', argument " "1"" of type '" "ISKOpticalProperty const *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    try {
      result = (bool)((ISKOpticalProperty const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_SetAtmosphericState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  ISKClimatology *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_SetAtmosphericState", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_SetAtmosphericState" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ISKClimatology,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKOpticalProperty_SetAtmosphericState" "', argument " "2"" of type '" "ISKClimatology &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKOpticalProperty_SetAtmosphericState" "', argument " "2"" of type '" "ISKClimatology &""'"); 
  }
  arg2 = reinterpret_cast< ISKClimatology * >(argp2);
  {
    try {
      result = (bool)(arg1)->SetAtmosphericState(*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_SetLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_SetLocation", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_SetLocation" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SetLocation((GEODETIC_INSTANT const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_InternalClimatology_UpdateCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_InternalClimatology_UpdateCache", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_InternalClimatology_UpdateCache" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->InternalClimatology_UpdateCache((GEODETIC_INSTANT const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_CalculateCrossSections(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarabsxs2 ;
  double scalarextxs2 ;
  double scalarscatxs2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectabsxs2 ;
  PyArrayObject *objectextxs2 ;
  PyArrayObject *objectscatxs2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_CalculateCrossSections", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_CalculateCrossSections" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectabsxs2      = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      objectextxs2      = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the extinction numpy array
      objectscatxs2     = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the scattering numpy array
      if ((!objectabsxs2) || !(objectextxs2) || !(objectscatxs2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectabsxs2);
      arg4 = (double *)PyArray_DATA( objectextxs2);
      arg5 = (double *)PyArray_DATA( objectscatxs2);
      arg6 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarabsxs2;
      arg4 = &scalarextxs2;
      arg5 = &scalarscatxs2;
      arg6 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 = nullptr;
      arg5 = nullptr;
      arg6 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->CalculateCrossSections((double const *)arg2,arg3,arg4,arg5,arg6);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg6;
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectabsxs2);
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectextxs2);
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectscatxs2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarabsxs2));
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarextxs2));
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarscatxs2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_CalculatePhaseMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  double arg2 ;
  double arg3 ;
  double *arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  PyObject *array4 = NULL ;
  PyObject *swig_obj[3] ;
  bool result;
  
  {
    npy_intp dims[1] = {
      16 
    };
    array4 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    if (!array4) SWIG_fail;
    arg4 = (double *) array_data(array4);
  }
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_CalculatePhaseMatrix", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_CalculatePhaseMatrix" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKOpticalProperty_CalculatePhaseMatrix" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ISKOpticalProperty_CalculatePhaseMatrix" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  {
    try {
      result = (bool)(arg1)->CalculatePhaseMatrix(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    resultobj = SWIG_Python_AppendOutput(resultobj,(PyObject*)array4);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_AddUserDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  double arg2 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyArrayObject *array3 = NULL ;
  int is_new_object3 = 0 ;
  PyArrayObject *array5 = NULL ;
  int is_new_object5 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_AddUserDefined", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_AddUserDefined" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKOpticalProperty_AddUserDefined" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    npy_intp size[1] = {
      -1 
    };
    array3 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_DOUBLE,
      &is_new_object3);
    if (!array3 || !require_dimensions(array3, 1) ||
      !require_size(array3, size, 1)) SWIG_fail;
    arg3 = (double*) array_data(array3);
    arg4 = (int) array_size(array3,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array5 = obj_to_array_contiguous_allow_conversion(swig_obj[3],
      NPY_DOUBLE,
      &is_new_object5);
    if (!array5 || !require_dimensions(array5, 1) ||
      !require_size(array5, size, 1)) SWIG_fail;
    arg5 = (double*) array_data(array5);
    arg6 = (int) array_size(array5,0);
  }
  {
    try {
      result = (bool)(arg1)->AddUserDefined(arg2,arg3,arg4,arg5,arg6);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object3 && array3)
    {
      Py_DECREF(array3); 
    }
  }
  {
    if (is_new_object5 && array5)
    {
      Py_DECREF(array5); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKOpticalProperty_AddUserDefinedPressure(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKOpticalProperty *arg1 = (ISKOpticalProperty *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  double *arg4 = (double *) 0 ;
  int arg5 ;
  double *arg6 = (double *) 0 ;
  int arg7 ;
  double *arg8 = (double *) 0 ;
  int arg9 ;
  double arg10 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyArrayObject *array4 = NULL ;
  int is_new_object4 = 0 ;
  PyArrayObject *array6 = NULL ;
  int is_new_object6 = 0 ;
  PyArrayObject *array8 = NULL ;
  int is_new_object8 = 0 ;
  double val10 ;
  int ecode10 = 0 ;
  PyObject *swig_obj[6] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKOpticalProperty_AddUserDefinedPressure", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKOpticalProperty, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKOpticalProperty_AddUserDefinedPressure" "', argument " "1"" of type '" "ISKOpticalProperty *""'"); 
  }
  arg1 = reinterpret_cast< ISKOpticalProperty * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array4 = obj_to_array_contiguous_allow_conversion(swig_obj[2],
      NPY_DOUBLE,
      &is_new_object4);
    if (!array4 || !require_dimensions(array4, 1) ||
      !require_size(array4, size, 1)) SWIG_fail;
    arg4 = (double*) array_data(array4);
    arg5 = (int) array_size(array4,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array6 = obj_to_array_contiguous_allow_conversion(swig_obj[3],
      NPY_DOUBLE,
      &is_new_object6);
    if (!array6 || !require_dimensions(array6, 1) ||
      !require_size(array6, size, 1)) SWIG_fail;
    arg6 = (double*) array_data(array6);
    arg7 = (int) array_size(array6,0);
  }
  {
    npy_intp size[1] = {
      -1 
    };
    array8 = obj_to_array_contiguous_allow_conversion(swig_obj[4],
      NPY_DOUBLE,
      &is_new_object8);
    if (!array8 || !require_dimensions(array8, 1) ||
      !require_size(array8, size, 1)) SWIG_fail;
    arg8 = (double*) array_data(array8);
    arg9 = (int) array_size(array8,0);
  }
  ecode10 = SWIG_AsVal_double(swig_obj[5], &val10);
  if (!SWIG_IsOK(ecode10)) {
    SWIG_exception_fail(SWIG_ArgError(ecode10), "in method '" "ISKOpticalProperty_AddUserDefinedPressure" "', argument " "10"" of type '" "double""'");
  } 
  arg10 = static_cast< double >(val10);
  {
    try {
      result = (bool)(arg1)->AddUserDefinedPressure(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  {
    if (is_new_object4 && array4)
    {
      Py_DECREF(array4); 
    }
  }
  {
    if (is_new_object6 && array6)
    {
      Py_DECREF(array6); 
    }
  }
  {
    if (is_new_object8 && array8)
    {
      Py_DECREF(array8); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *ISKOpticalProperty_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKOpticalProperty, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKOpticalProperty_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKEmission *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKEmission" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKEmission *)new ISKEmission((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKEmission, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKEmission" "', argument " "1"" of type '" "ISKEmission *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEmission_Stub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKEmission_Stub *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEmission_Stub" "', argument " "1"" of type '" "ISKEmission *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    try {
      result = (ISKEmission_Stub *)(arg1)->Stub();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKEmission_Stub, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEmission_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEmission_IsValidObject" "', argument " "1"" of type '" "ISKEmission const *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    try {
      result = (bool)((ISKEmission const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEmission_UpdateLocation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEmission_UpdateLocation", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEmission_UpdateLocation" "', argument " "1"" of type '" "ISKEmission *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ISKEmission_UpdateLocation" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)(arg1)->UpdateLocation((GEODETIC_INSTANT const &)*arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEmission_UpdateCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  GEODETIC_INSTANT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GEODETIC_INSTANT temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEmission_UpdateCache", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEmission_UpdateCache" "', argument " "1"" of type '" "ISKEmission *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[1],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp2.latitude = PyFloat_AsDouble(o1);
        temp2.longitude = PyFloat_AsDouble(o2);
        temp2.heightm = PyFloat_AsDouble(o3);
        temp2.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.latitude = d[0];
      temp2.longitude = d[1];
      temp2.heightm = d[2];
      temp2.mjd = d[4];
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->UpdateCache((GEODETIC_INSTANT const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEmission_IsotropicEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEmission *arg1 = (ISKEmission *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarrad2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectrad2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEmission_IsotropicEmission", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEmission, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEmission_IsotropicEmission" "', argument " "1"" of type '" "ISKEmission *""'"); 
  }
  arg1 = reinterpret_cast< ISKEmission * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectrad2        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectrad2);
      arg4 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarrad2;
      arg4 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->IsotropicEmission((double const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg4;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *ISKEmission_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKEmission, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKEmission_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKBrdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKBrdf *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKBrdf" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKBrdf *)new ISKBrdf((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKBrdf, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKBrdf(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBrdf *arg1 = (ISKBrdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBrdf, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKBrdf" "', argument " "1"" of type '" "ISKBrdf *""'"); 
  }
  arg1 = reinterpret_cast< ISKBrdf * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBrdf_Stub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBrdf *arg1 = (ISKBrdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKBrdf_Stub *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBrdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBrdf_Stub" "', argument " "1"" of type '" "ISKBrdf *""'"); 
  }
  arg1 = reinterpret_cast< ISKBrdf * >(argp1);
  {
    try {
      result = (ISKBrdf_Stub *)(arg1)->Stub();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKBrdf_Stub, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBrdf_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBrdf *arg1 = (ISKBrdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBrdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBrdf_IsValidObject" "', argument " "1"" of type '" "ISKBrdf const *""'"); 
  }
  arg1 = reinterpret_cast< ISKBrdf * >(argp1);
  {
    try {
      result = (bool)((ISKBrdf const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKBrdf_BRDF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKBrdf *arg1 = (ISKBrdf *) 0 ;
  double arg2 ;
  GEODETIC_INSTANT *arg3 = 0 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double *arg7 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  GEODETIC_INSTANT temp3 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  double val6 ;
  int ecode6 = 0 ;
  double temp7 ;
  int res7 = SWIG_TMPOBJ ;
  PyObject *swig_obj[6] ;
  bool result;
  
  arg7 = &temp7;
  if (!SWIG_Python_UnpackTuple(args, "ISKBrdf_BRDF", 6, 6, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKBrdf, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKBrdf_BRDF" "', argument " "1"" of type '" "ISKBrdf *""'"); 
  }
  arg1 = reinterpret_cast< ISKBrdf * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKBrdf_BRDF" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 4)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 4 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      PyObject *o4 = PySequence_GetItem(swig_obj[2],3);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3) && PyNumber_Check(o4);
      if( ok )
      {
        temp3.latitude = PyFloat_AsDouble(o1);
        temp3.longitude = PyFloat_AsDouble(o2);
        temp3.heightm = PyFloat_AsDouble(o3);
        temp3.mjd = PyFloat_AsDouble(o4);
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
        return NULL;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 4) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.latitude = d[0];
      temp3.longitude = d[1];
      temp3.heightm = d[2];
      temp3.mjd = d[4];
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ISKBrdf_BRDF" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ISKBrdf_BRDF" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  ecode6 = SWIG_AsVal_double(swig_obj[5], &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "ISKBrdf_BRDF" "', argument " "6"" of type '" "double""'");
  } 
  arg6 = static_cast< double >(val6);
  {
    try {
      result = (bool)(arg1)->BRDF(arg2,(GEODETIC_INSTANT const &)*arg3,arg4,arg5,arg6,arg7);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (SWIG_IsTmpObj(res7)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg7)));
  } else {
    int new_flags = SWIG_IsNewObj(res7) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg7), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKBrdf_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKBrdf, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKBrdf_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKSolarSpectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKSolarSpectrum *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKSolarSpectrum" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKSolarSpectrum *)new ISKSolarSpectrum((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKSolarSpectrum, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKSolarSpectrum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKSolarSpectrum" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_IsValidObject" "', argument " "1"" of type '" "ISKSolarSpectrum const *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    try {
      result = (bool)((ISKSolarSpectrum const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_Irradiance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarrad2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectrad2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_Irradiance", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_Irradiance" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectrad2        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectrad2);
      arg4 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarrad2;
      arg4 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->Irradiance((double const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg4;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_IrradianceAt1AU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarrad2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectrad2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_IrradianceAt1AU", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_IrradianceAt1AU" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectrad2        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectrad2);
      arg4 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarrad2;
      arg4 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->IrradianceAt1AU((double const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg4;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_SetSolarDistanceFromMjd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_SetSolarDistanceFromMjd", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_SetSolarDistanceFromMjd" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKSolarSpectrum_SetSolarDistanceFromMjd" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->SetSolarDistanceFromMjd(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_SetSolarDistanceFromAU(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_SetSolarDistanceFromAU", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_SetSolarDistanceFromAU" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKSolarSpectrum_SetSolarDistanceFromAU" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->SetSolarDistanceFromAU(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_MinValidWavelength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_MinValidWavelength" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    try {
      result = (bool)(arg1)->MinValidWavelength(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_MaxValidWavelength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  bool result;
  
  arg2 = &temp2;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_MaxValidWavelength" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    try {
      result = (bool)(arg1)->MaxValidWavelength(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_NanometerResolutionFWHM(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarrad2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectrad2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_NanometerResolutionFWHM", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_NanometerResolutionFWHM" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectrad2        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectrad2);
      arg4 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarrad2;
      arg4 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->NanometerResolutionFWHM((double const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg4;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKSolarSpectrum_SampleSpacing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKSolarSpectrum *arg1 = (ISKSolarSpectrum *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double scalarwavenumber2 ;
  double scalarrad2 ;
  PyArrayObject *objectwavenumber2 ;
  PyArrayObject *objectrad2 ;
  int isnewarray2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKSolarSpectrum_SampleSpacing", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKSolarSpectrum, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKSolarSpectrum_SampleSpacing" "', argument " "1"" of type '" "ISKSolarSpectrum *""'"); 
  }
  arg1 = reinterpret_cast< ISKSolarSpectrum * >(argp1);
  {
    isnewarray2   = 0;
    if (PySequence_Check(swig_obj[1]) || PyArray_Check(swig_obj[1]))												// See if this is a Python sequence or numpy array
    {
      int numpoints;																											// If it is then
      npy_intp dims[1];
      
      objectwavenumber2 =  obj_to_array_contiguous_allow_conversion(swig_obj[1], NPY_DOUBLE, &isnewarray2);				// Make a new contiguous array object for Python
      numpoints        =  (int)PyArray_Size( (PyObject*)objectwavenumber2);
      dims[0]          = numpoints;
      objectrad2        = (PyArrayObject*)PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy array
      if ((!objectrad2)) SWIG_fail;		// see if it failed
      
      arg2 = (double *)PyArray_DATA( objectwavenumber2);																	// Get a pointer to the start of the absorption array
      arg3 = (double *)PyArray_DATA( objectrad2);
      arg4 =  numpoints;
    }
    else if ( PyNumber_Check( swig_obj[1]))																				// Is this a scalar number
    {
      scalarwavenumber2 = PyFloat_AsDouble(swig_obj[1]);
      arg2 = &scalarwavenumber2;
      arg3 = &scalarrad2;
      arg4 = -1;
    }
    else
    {
      arg2 = nullptr;
      arg3 = nullptr;
      arg4 =  -9999;
      SWIG_Python_SetErrorMsg(PyExc_ValueError, "Expected a scalar or array "); 
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SampleSpacing((double const *)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    int n = arg4;
    
    if (n >= 0)
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, (PyObject*)objectrad2);
    }
    else
    {
      resultobj = SWIG_Python_AppendOutput(resultobj, PyFloat_FromDouble(scalarrad2));
      
    }
  }
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return resultobj;
fail:
  {
    if (isnewarray2 && objectwavenumber2)
    {
      Py_DECREF(objectwavenumber2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *ISKSolarSpectrum_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKSolarSpectrum, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKSolarSpectrum_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_ISKStokesVectorIF_m_stokes_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVectorIF *arg1 = (ISKStokesVectorIF *) 0 ;
  ISKStokesVector *arg2 = (ISKStokesVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKStokesVectorIF_m_stokes_set", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVectorIF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVectorIF_m_stokes_set" "', argument " "1"" of type '" "ISKStokesVectorIF *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVectorIF * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKStokesVectorIF_m_stokes_set" "', argument " "2"" of type '" "ISKStokesVector *""'"); 
  }
  arg2 = reinterpret_cast< ISKStokesVector * >(argp2);
  if (arg1) (arg1)->m_stokes = *arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVectorIF_m_stokes_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVectorIF *arg1 = (ISKStokesVectorIF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKStokesVector *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVectorIF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVectorIF_m_stokes_get" "', argument " "1"" of type '" "ISKStokesVectorIF *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVectorIF * >(argp1);
  result = (ISKStokesVector *)& ((arg1)->m_stokes);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKStokesVector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKStokesVectorIF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVectorIF *arg1 = (ISKStokesVectorIF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVectorIF, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKStokesVectorIF" "', argument " "1"" of type '" "ISKStokesVectorIF *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVectorIF * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKStokesVectorIF_RawObjectUnknown(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVectorIF *arg1 = (ISKStokesVectorIF *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxUnknown *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKStokesVectorIF, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKStokesVectorIF_RawObjectUnknown" "', argument " "1"" of type '" "ISKStokesVectorIF *""'"); 
  }
  arg1 = reinterpret_cast< ISKStokesVectorIF * >(argp1);
  {
    try {
      result = (nxUnknown *)(arg1)->RawObjectUnknown();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_nxUnknown, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ISKStokesVectorIF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKStokesVectorIF *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ISKStokesVectorIF", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ISKStokesVectorIF *)new ISKStokesVectorIF();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKStokesVectorIF, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKStokesVectorIF_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKStokesVectorIF, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKStokesVectorIF_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKEngine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKEngine *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKEngine" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKEngine *)new ISKEngine((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKEngine, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKEngine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKEngine" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_Stub(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKEngine_Stub *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_Stub" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (ISKEngine_Stub *)(arg1)->Stub();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKEngine_Stub, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_IsValidObject" "', argument " "1"" of type '" "ISKEngine const *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (bool)((ISKEngine const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_AddLineOfSight(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  double arg2 ;
  nxVector *arg3 = 0 ;
  nxVector *arg4 = 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector temp3 ;
  nxVector temp4 ;
  int temp5 ;
  int res5 = SWIG_TMPOBJ ;
  PyObject *swig_obj[4] ;
  bool result;
  
  arg5 = &temp5;
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_AddLineOfSight", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_AddLineOfSight" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKEngine_AddLineOfSight" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[3]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[3]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[3],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[3],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[3],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp4.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg4 = &temp4;
    }
    else if (PyArray_Check(swig_obj[3]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[3]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[3]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp4.SetCoords(d[0], d[1], d[2]);
      arg4 = &temp4;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->AddLineOfSight(arg2,(nxVector const &)*arg3,(nxVector const &)*arg4,arg5);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  if (SWIG_IsTmpObj(res5)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_int((*arg5)));
  } else {
    int new_flags = SWIG_IsNewObj(res5) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg5), SWIGTYPE_p_int, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_AddSpecies(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  ISKClimatology *arg3 = 0 ;
  ISKOpticalProperty *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_AddSpecies", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_AddSpecies" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    void*  		objectptr;
    int	   	result;
    
    if (PyBytes_Check(swig_obj[1]))
    {
      arg2 = (char*)(intptr_t)PyBytes_AsString(swig_obj[1]);
      
    }
    else if (PyUnicode_Check(swig_obj[1]))
    {
      arg2   = (char*)(intptr_t)PyUnicode_AsUTF8(swig_obj[1]);
    }
    else
    {
      static bool firsttime = true;
      if (firsttime)
      {
        nxLog::Record(NXLOG_WARNING,"Deprecated feature. We are dropping support for passing GUID handles through the sasktran interface\n."
          "Please replace the GUID with a corresponding string \n"
          "e.g. replace skif.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 with 'SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3'");
        firsttime = false;
      }
      result = SWIG_ConvertPtr(swig_obj[1], &objectptr, SWIGTYPE_p_GUID, 0 |  0 );
      if (!SWIG_IsOK(result))
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError, " error converting argument to CLIMATOLOGY_HANDLE const &"); 
        SWIG_fail;
      }
      arg2 = (char*)(intptr_t)FindGlobalClimatologyNameOfHandle( (*(CLIMATOLOGY_HANDLE*)(objectptr)) );
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ISKClimatology,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ISKEngine_AddSpecies" "', argument " "3"" of type '" "ISKClimatology &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKEngine_AddSpecies" "', argument " "3"" of type '" "ISKClimatology &""'"); 
  }
  arg3 = reinterpret_cast< ISKClimatology * >(argp3);
  res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_ISKOpticalProperty,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "ISKEngine_AddSpecies" "', argument " "4"" of type '" "ISKOpticalProperty &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKEngine_AddSpecies" "', argument " "4"" of type '" "ISKOpticalProperty &""'"); 
  }
  arg4 = reinterpret_cast< ISKOpticalProperty * >(argp4);
  {
    try {
      result = (bool)(arg1)->AddSpecies((char const *)arg2,*arg3,*arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_AddEmission(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  ISKEmission *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_AddEmission", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_AddEmission" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    void*  		objectptr;
    int	   	result;
    
    if (PyBytes_Check(swig_obj[1]))
    {
      arg2 = (char*)(intptr_t)PyBytes_AsString(swig_obj[1]);
      
    }
    else if (PyUnicode_Check(swig_obj[1]))
    {
      arg2   = (char*)(intptr_t)PyUnicode_AsUTF8(swig_obj[1]);
    }
    else
    {
      static bool firsttime = true;
      if (firsttime)
      {
        nxLog::Record(NXLOG_WARNING,"Deprecated feature. We are dropping support for passing GUID handles through the sasktran interface\n."
          "Please replace the GUID with a corresponding string \n"
          "e.g. replace skif.SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3 with 'SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3'");
        firsttime = false;
      }
      result = SWIG_ConvertPtr(swig_obj[1], &objectptr, SWIGTYPE_p_GUID, 0 |  0 );
      if (!SWIG_IsOK(result))
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError, " error converting argument to CLIMATOLOGY_HANDLE const &"); 
        SWIG_fail;
      }
      arg2 = (char*)(intptr_t)FindGlobalClimatologyNameOfHandle( (*(CLIMATOLOGY_HANDLE*)(objectptr)) );
    }
  }
  res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_ISKEmission,  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ISKEngine_AddEmission" "', argument " "3"" of type '" "ISKEmission &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKEngine_AddEmission" "', argument " "3"" of type '" "ISKEmission &""'"); 
  }
  arg3 = reinterpret_cast< ISKEmission * >(argp3);
  {
    try {
      result = (bool)(arg1)->AddEmission((char const *)arg2,*arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_SetAtmosphericState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  ISKClimatology *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_SetAtmosphericState", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_SetAtmosphericState" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_ISKClimatology,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKEngine_SetAtmosphericState" "', argument " "2"" of type '" "ISKClimatology &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "ISKEngine_SetAtmosphericState" "', argument " "2"" of type '" "ISKClimatology &""'"); 
  }
  arg2 = reinterpret_cast< ISKClimatology * >(argp2);
  {
    try {
      result = (bool)(arg1)->SetAtmosphericState(*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_SetAlbedo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_SetAlbedo", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_SetAlbedo" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKEngine_SetAlbedo" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    try {
      result = (bool)(arg1)->SetAlbedo(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_SetBRDF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  ISKBrdf *arg2 = (ISKBrdf *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_SetBRDF", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_SetBRDF" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  res2 = SWIG_ConvertPtr(swig_obj[1], &argp2,SWIGTYPE_p_ISKBrdf, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKEngine_SetBRDF" "', argument " "2"" of type '" "ISKBrdf *""'"); 
  }
  arg2 = reinterpret_cast< ISKBrdf * >(argp2);
  {
    try {
      result = (bool)(arg1)->SetBRDF(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_SetPolarizationMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_SetPolarizationMode", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_SetPolarizationMode" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKEngine_SetPolarizationMode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)(arg1)->SetPolarizationMode(arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_SetWavelengths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  double *arg2 = (double *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyArrayObject *array2 = NULL ;
  int is_new_object2 = 0 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_SetWavelengths", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_SetWavelengths" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    npy_intp size[1] = {
      -1 
    };
    array2 = obj_to_array_contiguous_allow_conversion(swig_obj[1],
      NPY_DOUBLE,
      &is_new_object2);
    if (!array2 || !require_dimensions(array2, 1) ||
      !require_size(array2, size, 1)) SWIG_fail;
    arg2 = (double*) array_data(array2);
    arg3 = (int) array_size(array2,0);
  }
  {
    try {
      result = (bool)(arg1)->SetWavelengths((double const *)arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return resultobj;
fail:
  {
    if (is_new_object2 && array2)
    {
      Py_DECREF(array2); 
    }
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_InitializeModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_InitializeModel" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (bool)(arg1)->InitializeModel();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_CalculateRadiance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *data_temp2 ;
  int numwave_temp2 ;
  int numlos_temp2 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    arg2 = &data_temp2;					// Let radiance point to local variable, data_temp2
    arg3 = &numwave_temp2;				// Let numwavelengths point to local variable
    arg4 = &numlos_temp2;				// Let numlinesofsight point to local variable
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_CalculateRadiance" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (bool)(arg1)->CalculateRadiance((double const **)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    PyObject*				radarray;									// Object to hold the numpy object copied form the radiance
    double*					outptr;										// Pointer to the data int the numpy object
    const double*			dataptr = *(arg2);
    int			            nw      = *(arg3);
    int			            nlos    = *(arg4);
    npy_intp				dims[2] = {
      nw, nlos 
    };						// The dimensions of the numpy object
    int						numelem = nw*nlos;
    
    if (numelem <= 0)
    {
      radarray = Py_None;
      Py_INCREF(radarray);
    }
    else
    {
      radarray = PyArray_SimpleNew(2, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      if (!radarray) SWIG_fail;										// see if it failed
      outptr = (double *)PyArray_DATA((PyArrayObject*)radarray);		// Get a pointer to the start of the array
      for (int wavidx = 0; wavidx < nw; wavidx++)						// c++ radiance array has lines of sight as the leading dimension
      {
        // but numpy array has wavelength as the leading dimension
        for (int losidx = 0; losidx < nlos; losidx++)
        {
          outptr[wavidx + losidx *nw] = dataptr[wavidx + losidx *nw];
        }
      }
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,radarray);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_CalculateStokesVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  ISKStokesVector **arg2 = (ISKStokesVector **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  ISKStokesVector *data_temp2 ;
  int numwave_temp2 ;
  int numlos_temp2 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    arg2 = &data_temp2;				// Let radiance point to local variable, data_temp2
    arg3 = &numwave_temp2;				// Let numwavelengths point to local variable
    arg4 = &numlos_temp2;				// Let numlinesofsight point to local variable
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_CalculateStokesVector" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (bool)(arg1)->CalculateStokesVector((ISKStokesVector const **)arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    PyObject*				radarray;									// Object to hold the numpy object copied form the radiance
    PyObject**				outptr;										// Pointer to the data int the numpy object
    PyObject*				oldobject;									// Pointer to the data int the numpy object
    PyObject*				obj;										// Pointer to the data int the numpy object
    const ISKStokesVector*	dataptr = *(arg2);
    int			            nw      = *(arg3);
    int			            nlos    = *(arg4);
    npy_intp				dims[2] = {
      nw, nlos 
    };						// The dimensions of the numpy object
    int						numelem = nw*nlos;
    
    if (numelem <= 0)
    {
      radarray = Py_None;
      Py_INCREF(radarray);
    }
    else
    {
      radarray = PyArray_SimpleNew(2, dims, NPY_OBJECT);					// Create the numpy 2-D array
      if (!radarray) SWIG_fail;											// see if it failed
      outptr = (PyObject **)PyArray_DATA((PyArrayObject*)radarray);		// Get a pointer to the start of the array
      for (int wavidx = 0; wavidx < nw; wavidx++)
      {
        for (int losidx = 0; losidx < nlos; losidx++)
        {
          const ISKStokesVector&	iquv = dataptr[wavidx + losidx*nw];
          obj = SWIG_NewPointerObj( new ISKStokesVector(iquv), SWIGTYPE_p_ISKStokesVector, SWIG_POINTER_OWN |  0 );
          oldobject = outptr[wavidx + losidx*nw];
          outptr[wavidx + losidx*nw] = obj;
          Py_XDECREF(oldobject);
        }
      }
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,radarray);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_GetWeightingFunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *data_temp2 ;
  int dim1_temp2 ;
  int dim2_temp2 ;
  int dim3_temp2 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  {
    arg2 = &data_temp2;				// Let wf point to local variable, data_temp2
    arg3 = &dim1_temp2;				// Let numwavel point to local variable, dim1_temp2
    arg4 = &dim2_temp2;				// Let numlinesofsight point to local variable, dim2_temp2
    arg5 = &dim3_temp2;				// Let numwf point to local variable, dim3_temp2
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_GetWeightingFunctions" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  {
    try {
      result = (bool)(arg1)->GetWeightingFunctions((double const **)arg2,arg3,arg4,arg5);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    PyObject*	wfarray;
    double*		outptr;
    npy_intp	dims[3] = {
      *(arg3), *(arg4), *(arg5) 
    };
    int			numelem = (*arg3)*(*arg4)*(*arg5);
    
    wfarray = PyArray_SimpleNew(3, dims, NPY_DOUBLE);
    if (!wfarray) SWIG_fail;
    outptr = (double *)PyArray_DATA((PyArrayObject*)wfarray);
    for (int i = 0; i < numelem; i++) outptr[i] = (*arg2)[i];
    resultobj = SWIG_Python_AppendOutput(resultobj, wfarray);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKEngine_GetProperty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKEngine *arg1 = (ISKEngine *) 0 ;
  char *arg2 = (char *) 0 ;
  double **arg3 = (double **) 0 ;
  int *arg4 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  double *propptr3 ;
  int numpts3 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  {
    arg3 = (double**)&propptr3;
    arg4 = &numpts3;
  }
  if (!SWIG_Python_UnpackTuple(args, "ISKEngine_GetProperty", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKEngine, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKEngine_GetProperty" "', argument " "1"" of type '" "ISKEngine *""'"); 
  }
  arg1 = reinterpret_cast< ISKEngine * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(swig_obj[1], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ISKEngine_GetProperty" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    try {
      result = (bool)(arg1)->GetProperty((char const *)arg2,(double const **)arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    PyObject*				radarray;									// Object to hold the numpy object copied form the radiance
    double*					outptr;										// Pointer to the data int the numpy object
    const double*			dataptr = *(arg3);
    int			            npts    = *(arg4);
    npy_intp				dims[1] = {
      npts 
    };						// The dimensions of the numpy object
    
    if ( dataptr == NULL)
    {
      radarray = Py_None;
      Py_INCREF(radarray);
    }
    else
    {
      if (npts == 0)															// IF we are returning a scalar value
      {
        radarray = PyFloat_FromDouble(*dataptr);							// Create the scalar value numpy 2-D array
        if (!radarray) SWIG_fail;											// see if it failed
      }
      else
      {
        radarray = PyArray_SimpleNew(1, dims, NPY_DOUBLE);					// Create the numpy array
        if (!radarray) SWIG_fail;											// see if it failed
        outptr = (double *)PyArray_DATA((PyArrayObject*)radarray);			// Get a pointer to the start of the array
        for (int i = 0; i < npts;  i++)
        {
          outptr[i] = dataptr[i];
        }
      }
    }
    resultobj = SWIG_Python_AppendOutput(resultobj,radarray);
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *ISKEngine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKEngine, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKEngine_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKGeodetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *result = 0 ;
  
  if (!SWIG_Python_UnpackTuple(args, "new_ISKGeodetic", 0, 0, 0)) SWIG_fail;
  {
    try {
      result = (ISKGeodetic *)new ISKGeodetic();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKGeodetic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKGeodetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKGeodetic" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_IsValidObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  bool result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_IsValidObject" "', argument " "1"" of type '" "ISKGeodetic const *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (bool)((ISKGeodetic const *)arg1)->IsValidObject();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_SetLocationLatLonAlt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKGeodetic_SetLocationLatLonAlt", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_SetLocationLatLonAlt" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKGeodetic_SetLocationLatLonAlt" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ISKGeodetic_SetLocationLatLonAlt" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ISKGeodetic_SetLocationLatLonAlt" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  {
    try {
      result = (bool)(arg1)->SetLocationLatLonAlt(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_SetLocationXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  nxVector *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nxVector temp2 ;
  PyObject *swig_obj[2] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKGeodetic_SetLocationXYZ", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_SetLocationXYZ" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SetLocationXYZ((nxVector const &)*arg2);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_SetLocationFromTangentPoint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  nxVector *arg2 = 0 ;
  nxVector *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  nxVector temp2 ;
  nxVector temp3 ;
  PyObject *swig_obj[3] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKGeodetic_SetLocationFromTangentPoint", 3, 3, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_SetLocationFromTangentPoint" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    if (PySequence_Check(swig_obj[1]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[1]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[1],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[1],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[1],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp2.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg2 = &temp2;
    }
    else if (PyArray_Check(swig_obj[1]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[1]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[1]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp2.SetCoords(d[0], d[1], d[2]);
      arg2 = &temp2;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SetLocationFromTangentPoint((nxVector const &)*arg2,(nxVector const &)*arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_SetLocationFromTangentAltitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  double arg2 ;
  nxVector *arg3 = 0 ;
  nxVector *arg4 = 0 ;
  nxVector *arg5 = (nxVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector temp3 ;
  nxVector temp4 ;
  nxVector tnxv5 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  {
    arg5 = &tnxv5;
  }
  if (!SWIG_Python_UnpackTuple(args, "ISKGeodetic_SetLocationFromTangentAltitude", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_SetLocationFromTangentAltitude" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKGeodetic_SetLocationFromTangentAltitude" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[3]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[3]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[3],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[3],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[3],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp4.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg4 = &temp4;
    }
    else if (PyArray_Check(swig_obj[3]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[3]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[3]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp4.SetCoords(d[0], d[1], d[2]);
      arg4 = &temp4;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->SetLocationFromTangentAltitude(arg2,(nxVector const &)*arg3,(nxVector const &)*arg4,arg5);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v5;
    PyObject* tresult5 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v5 = (double *)PyArray_DATA((PyArrayObject*)tresult5);
    v5[0] = (*arg5).X();
    v5[1] = (*arg5).Y();
    v5[2] = (*arg5).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult5);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLocalWest(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLocalWest" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (arg1)->GetLocalWest();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLocalSouth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLocalSouth" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (arg1)->GetLocalSouth();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLocalUp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLocalUp" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (arg1)->GetLocalUp();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLocationXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLocationXYZ" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (arg1)->GetLocationXYZ();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLongitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLongitude" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (double)(arg1)->GetLongitude();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetLatitude(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetLatitude" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (double)(arg1)->GetLatitude();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetAlt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetAlt" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (double)(arg1)->GetAlt();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetAltitudeIntercepts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  double arg2 ;
  nxVector *arg3 = 0 ;
  nxVector *arg4 = 0 ;
  nxVector *arg5 = (nxVector *) 0 ;
  nxVector *arg6 = (nxVector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  nxVector temp3 ;
  nxVector temp4 ;
  nxVector tnxv5 ;
  nxVector tnxv6 ;
  PyObject *swig_obj[4] ;
  bool result;
  
  {
    arg5 = &tnxv5;
  }
  {
    arg6 = &tnxv6;
  }
  if (!SWIG_Python_UnpackTuple(args, "ISKGeodetic_GetAltitudeIntercepts", 4, 4, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetAltitudeIntercepts" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKGeodetic_GetAltitudeIntercepts" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    if (PySequence_Check(swig_obj[2]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[2]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[2],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[2],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[2],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp3.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg3 = &temp3;
    }
    else if (PyArray_Check(swig_obj[2]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[2]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[2]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp3.SetCoords(d[0], d[1], d[2]);
      arg3 = &temp3;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    if (PySequence_Check(swig_obj[3]))																// See if this is a Python sequence
    {
      // If it is then
      if (PySequence_Length(swig_obj[3]) != 3)												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements");
        SWIG_fail;
      }
      bool ok = true;
      PyObject *o1 = PySequence_GetItem(swig_obj[3],0);
      PyObject *o2 = PySequence_GetItem(swig_obj[3],1);
      PyObject *o3 = PySequence_GetItem(swig_obj[3],2);
      ok = ok && PyNumber_Check(o1) && PyNumber_Check(o2) && PyNumber_Check(o3);
      if( ok )
      {
        temp4.SetCoords(PyFloat_AsDouble(o1), PyFloat_AsDouble(o2), PyFloat_AsDouble(o3));
      }
      else 
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Sequence elements must be numbers");      
        SWIG_fail;
      }
      arg4 = &temp4;
    }
    else if (PyArray_Check(swig_obj[3]))
    {
      PyArrayObject*	obj = (PyArrayObject* )(swig_obj[3]);
      double*			d;
      
      if ( (PyArray_Size(swig_obj[3]) != 3) || (PyArray_TYPE(obj) != NPY_DOUBLE))												// Make sure its the correct size
      {
        SWIG_Python_SetErrorMsg(PyExc_ValueError,"Size mismatch. Expected 3 elements of doubles");
        SWIG_fail;
      }
      d = (double*) PyArray_DATA(obj);
      temp4.SetCoords(d[0], d[1], d[2]);
      arg4 = &temp4;
    }
    else
    {
      SWIG_Python_SetErrorMsg(PyExc_ValueError,"Expected Input as a list, numpy array");
      SWIG_fail;
    }
  }
  {
    try {
      result = (bool)(arg1)->GetAltitudeIntercepts(arg2,(nxVector const &)*arg3,(nxVector const &)*arg4,arg5,arg6);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v5;
    PyObject* tresult5 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v5 = (double *)PyArray_DATA((PyArrayObject*)tresult5);
    v5[0] = (*arg5).X();
    v5[1] = (*arg5).Y();
    v5[2] = (*arg5).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult5);
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double* v6;
    PyObject* tresult6 = PyArray_SimpleNew(1, dims, NPY_DOUBLE);
    v6 = (double *)PyArray_DATA((PyArrayObject*)tresult6);
    v6[0] = (*arg6).X();
    v6[1] = (*arg6).Y();
    v6[2] = (*arg6).Z();
    resultobj = SWIG_Python_AppendOutput(resultobj, tresult6);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetOsculatingSpheroidCenter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  nxVector result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetOsculatingSpheroidCenter" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (arg1)->GetOsculatingSpheroidCenter();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    npy_intp dims[1] = {
      3 
    };
    double*	 v;
    
    resultobj = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the absorption numpy 2-D array
    v = (double *)PyArray_DATA((PyArrayObject*)resultobj);			// Get a pointer to the start of the absorption array
    v[0] = (result).X();
    v[1] = (result).Y();
    v[2] = (result).Z();
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKGeodetic_GetOsculatingSpheroidRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKGeodetic *arg1 = (ISKGeodetic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKGeodetic, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKGeodetic_GetOsculatingSpheroidRadius" "', argument " "1"" of type '" "ISKGeodetic *""'"); 
  }
  arg1 = reinterpret_cast< ISKGeodetic * >(argp1);
  {
    try {
      result = (double)(arg1)->GetOsculatingSpheroidRadius();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKGeodetic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKGeodetic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKGeodetic_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

SWIGINTERN PyObject *_wrap_new_ISKMie(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject *swig_obj[1] ;
  ISKMie *result = 0 ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_AsCharPtrAndSize(swig_obj[0], &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ISKMie" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    try {
      result = (ISKMie *)new ISKMie((char const *)arg1);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ISKMie, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ISKMie(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ISKMie" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      delete arg1;
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Calculate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  double val3 ;
  int ecode3 = 0 ;
  double val4 ;
  int ecode4 = 0 ;
  double val5 ;
  int ecode5 = 0 ;
  PyObject *swig_obj[5] ;
  bool result;
  
  if (!SWIG_Python_UnpackTuple(args, "ISKMie_Calculate", 5, 5, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Calculate" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  ecode2 = SWIG_AsVal_double(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKMie_Calculate" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_double(swig_obj[2], &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ISKMie_Calculate" "', argument " "3"" of type '" "double""'");
  } 
  arg3 = static_cast< double >(val3);
  ecode4 = SWIG_AsVal_double(swig_obj[3], &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "ISKMie_Calculate" "', argument " "4"" of type '" "double""'");
  } 
  arg4 = static_cast< double >(val4);
  ecode5 = SWIG_AsVal_double(swig_obj[4], &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "ISKMie_Calculate" "', argument " "5"" of type '" "double""'");
  } 
  arg5 = static_cast< double >(val5);
  {
    try {
      result = (bool)(arg1)->Calculate(arg2,arg3,arg4,arg5);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  {
    if (!result)
    {
      PyErr_SetString(g_sasktranifError, "Sasktran Interface Function returned NOT OKAY status");
      return NULL;
    }
    resultobj = PyBool_FromLong( (result) ? 1 : 0);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Qext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Qext" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Qext();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Qsca(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Qsca" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Qsca();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Qabs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Qabs" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Qabs();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Cext(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Cext" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Cext();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Csca(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Csca" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Csca();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Cabs(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Cabs" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Cabs();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_S1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  std::complex< double > **arg2 = (std::complex< double > **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > *data_temp2 ;
  int nump2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &data_temp2;
    arg3 = &nump2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_S1" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      (arg1)->S1(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject*				out_real_array;
    PyObject*				out_imag_array;
    double*					out_real_ptr;
    double*                 out_imag_ptr;
    std::complex<double>*	dataptr = *(arg2);
    int			            np      = *(arg3);
    npy_intp				dims[1] = {
      np 
    };						// The dimensions of the numpy object
    
    if (np <= 0)
    {
      out_real_array = Py_None;
      out_imag_array = Py_None;
      Py_INCREF(out_real_array);
      Py_INCREF(out_imag_array);
    }
    else
    {
      out_real_array = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      out_imag_array = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      if (!out_real_array) SWIG_fail;										// see if it failed
      if (!out_imag_array) SWIG_fail;										// see if it failed
      
      out_real_ptr = (double *)PyArray_DATA((PyArrayObject*)out_real_array);		// Get a pointer to the start of the array
      out_imag_ptr = (double *)PyArray_DATA((PyArrayObject*)out_imag_array);		// Get a pointer to the start of the array
      
      for (int idx = 0; idx < np; idx++)
      {
        out_real_ptr[idx] = dataptr[idx].real();
        out_imag_ptr[idx] = dataptr[idx].imag();
      }
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj,out_real_array);
    resultobj = SWIG_Python_AppendOutput(resultobj,out_imag_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_S2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  std::complex< double > **arg2 = (std::complex< double > **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::complex< double > *data_temp2 ;
  int nump2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &data_temp2;
    arg3 = &nump2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_S2" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      (arg1)->S2(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject*				out_real_array;
    PyObject*				out_imag_array;
    double*					out_real_ptr;
    double*                 out_imag_ptr;
    std::complex<double>*	dataptr = *(arg2);
    int			            np      = *(arg3);
    npy_intp				dims[1] = {
      np 
    };						// The dimensions of the numpy object
    
    if (np <= 0)
    {
      out_real_array = Py_None;
      out_imag_array = Py_None;
      Py_INCREF(out_real_array);
      Py_INCREF(out_imag_array);
    }
    else
    {
      out_real_array = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      out_imag_array = PyArray_SimpleNew(1, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      if (!out_real_array) SWIG_fail;										// see if it failed
      if (!out_imag_array) SWIG_fail;										// see if it failed
      
      out_real_ptr = (double *)PyArray_DATA((PyArrayObject*)out_real_array);		// Get a pointer to the start of the array
      out_imag_ptr = (double *)PyArray_DATA((PyArrayObject*)out_imag_array);		// Get a pointer to the start of the array
      
      for (int idx = 0; idx < np; idx++)
      {
        out_real_ptr[idx] = dataptr[idx].real();
        out_imag_ptr[idx] = dataptr[idx].imag();
      }
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj,out_real_array);
    resultobj = SWIG_Python_AppendOutput(resultobj,out_imag_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_PMom(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  double **arg2 = (double **) 0 ;
  int *arg3 = (int *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double *data_temp2 ;
  int nump2 ;
  PyObject *swig_obj[1] ;
  
  {
    arg2 = &data_temp2;
    arg3 = &nump2;
  }
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_PMom" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      (arg1)->PMom(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  {
    PyObject*				out_array;
    double*					out_ptr;
    double*	                dataptr = *(arg2);
    int			            np      = *(arg3);
    npy_intp				dims[2] = {
      4, np 
    };						// The dimensions of the numpy object
    
    if (np <= 0)
    {
      out_array = Py_None;
      Py_INCREF(out_array);
    }
    else
    {
      out_array = PyArray_SimpleNew(2, dims, NPY_DOUBLE);				// Create the numpy 2-D array
      if (!out_array) SWIG_fail;										// see if it failed
      
      out_ptr = (double *)PyArray_DATA((PyArrayObject*)out_array);		// Get a pointer to the start of the array
      
      for (int idx = 0; idx < np * 4; idx++)
      {
        out_ptr[idx] = dataptr[idx];
      }
    }
    
    resultobj = SWIG_Python_AppendOutput(resultobj,out_array);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Sforward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Sforward" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      (arg1)->Sforward(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_SBackward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  double *arg2 = (double *) 0 ;
  double *arg3 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double temp2 ;
  int res2 = SWIG_TMPOBJ ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  PyObject *swig_obj[1] ;
  
  arg2 = &temp2;
  arg3 = &temp3;
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_SBackward" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      (arg1)->SBackward(arg2,arg3);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res2)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg2)));
  } else {
    int new_flags = SWIG_IsNewObj(res2) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg2), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_TForward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!SWIG_Python_UnpackTuple(args, "ISKMie_TForward", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_TForward" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKMie_TForward" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->TForward(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_TBackward(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  double temp3 ;
  int res3 = SWIG_TMPOBJ ;
  double temp4 ;
  int res4 = SWIG_TMPOBJ ;
  PyObject *swig_obj[2] ;
  
  arg3 = &temp3;
  arg4 = &temp4;
  if (!SWIG_Python_UnpackTuple(args, "ISKMie_TBackward", 2, 2, swig_obj)) SWIG_fail;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_TBackward" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ISKMie_TBackward" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->TBackward(arg2,arg3,arg4);
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsTmpObj(res3)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg3)));
  } else {
    int new_flags = SWIG_IsNewObj(res3) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg3), SWIGTYPE_p_double, new_flags));
  }
  if (SWIG_IsTmpObj(res4)) {
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_From_double((*arg4)));
  } else {
    int new_flags = SWIG_IsNewObj(res4) ? (SWIG_POINTER_OWN |  0 ) :  0 ;
    resultobj = SWIG_Python_AppendOutput(resultobj, SWIG_NewPointerObj((void*)(arg4), SWIGTYPE_p_double, new_flags));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ISKMie_Spike(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ISKMie *arg1 = (ISKMie *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject *swig_obj[1] ;
  double result;
  
  if (!args) SWIG_fail;
  swig_obj[0] = args;
  res1 = SWIG_ConvertPtr(swig_obj[0], &argp1,SWIGTYPE_p_ISKMie, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ISKMie_Spike" "', argument " "1"" of type '" "ISKMie *""'"); 
  }
  arg1 = reinterpret_cast< ISKMie * >(argp1);
  {
    try {
      result = (double)(arg1)->Spike();
    }
    catch (const std::exception &exc)
    {
      PyErr_SetString( PyExc_RuntimeError, exc.what() );		// catch anything thrown within try block that derives from std::exception
    }
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ISKMie_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ISKMie, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *ISKMie_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  return SWIG_Python_InitShadowInstance(args);
}

static PyMethodDef SwigMethods[] = {
	 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { "new_nxVector", _wrap_new_nxVector, METH_VARARGS, NULL},
	 { "nxVector_FromSequence", _wrap_nxVector_FromSequence, METH_O, NULL},
	 { "nxVector_AsSequence", _wrap_nxVector_AsSequence, METH_NOARGS, NULL},
	 { "nxVector_SetCoords", _wrap_nxVector_SetCoords, METH_VARARGS, NULL},
	 { "nxVector_FromLatLong", _wrap_nxVector_FromLatLong, METH_VARARGS, NULL},
	 { "nxVector_IsZero", _wrap_nxVector_IsZero, METH_NOARGS, NULL},
	 { "nxVector_IsValid", _wrap_nxVector_IsValid, METH_NOARGS, NULL},
	 { "nxVector_SetInvalid", _wrap_nxVector_SetInvalid, METH_NOARGS, NULL},
	 { "nxVector_X", _wrap_nxVector_X, METH_NOARGS, NULL},
	 { "nxVector_Y", _wrap_nxVector_Y, METH_NOARGS, NULL},
	 { "nxVector_Z", _wrap_nxVector_Z, METH_NOARGS, NULL},
	 { "nxVector_Data", _wrap_nxVector_Data, METH_NOARGS, NULL},
	 { "nxVector_AngleTo", _wrap_nxVector_AngleTo, METH_O, NULL},
	 { "nxVector_UnitVector", _wrap_nxVector_UnitVector, METH_NOARGS, NULL},
	 { "nxVector_ComponentPerpendicularTo", _wrap_nxVector_ComponentPerpendicularTo, METH_O, NULL},
	 { "nxVector_ComponentParallelTo", _wrap_nxVector_ComponentParallelTo, METH_O, NULL},
	 { "nxVector_IndexOfMaxComponent", _wrap_nxVector_IndexOfMaxComponent, METH_NOARGS, NULL},
	 { "nxVector_Longitude", _wrap_nxVector_Longitude, METH_NOARGS, NULL},
	 { "nxVector_Latitude", _wrap_nxVector_Latitude, METH_NOARGS, NULL},
	 { "nxVector_EquatorialToGeographic", _wrap_nxVector_EquatorialToGeographic, METH_O, NULL},
	 { "nxVector_GeographicToEquatorial", _wrap_nxVector_GeographicToEquatorial, METH_O, NULL},
	 { "nxVector_GeographicToGeomagneticDipole", _wrap_nxVector_GeographicToGeomagneticDipole, METH_NOARGS, NULL},
	 { "nxVector_TransformToNewPole", _wrap_nxVector_TransformToNewPole, METH_VARARGS, NULL},
	 { "nxVector_RotateAboutXaxis", _wrap_nxVector_RotateAboutXaxis, METH_O, NULL},
	 { "nxVector_RotateAboutZaxis", _wrap_nxVector_RotateAboutZaxis, METH_O, NULL},
	 { "nxVector_Dot", _wrap_nxVector_Dot, METH_O, NULL},
	 { "nxVector_Magnitude", _wrap_nxVector_Magnitude, METH_NOARGS, NULL},
	 { "nxVector_Cross", _wrap_nxVector_Cross, METH_O, NULL},
	 { "nxVector___iadd__", _wrap_nxVector___iadd__, METH_O, NULL},
	 { "nxVector___isub__", _wrap_nxVector___isub__, METH_O, NULL},
	 { "nxVector___imul__", _wrap_nxVector___imul__, METH_VARARGS, NULL},
	 { "nxVector___itruediv__", _wrap_nxVector___itruediv__, METH_O, NULL},
	 { "nxVector___neg__", _wrap_nxVector___neg__, METH_NOARGS, NULL},
	 { "nxVector___add__", _wrap_nxVector___add__, METH_VARARGS, NULL},
	 { "nxVector___sub__", _wrap_nxVector___sub__, METH_VARARGS, NULL},
	 { "nxVector___truediv__", _wrap_nxVector___truediv__, METH_O, NULL},
	 { "nxVector___xor__", _wrap_nxVector___xor__, METH_O, NULL},
	 { "nxVector___and__", _wrap_nxVector___and__, METH_O, NULL},
	 { "delete_nxVector", _wrap_delete_nxVector, METH_NOARGS, NULL},
	 { "nxVector_swigregister", nxVector_swigregister, METH_O, NULL},
	 { "nxVector_swiginit", nxVector_swiginit, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_latitude_set", _wrap_GEODETIC_INSTANT_latitude_set, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_latitude_get", _wrap_GEODETIC_INSTANT_latitude_get, METH_O, NULL},
	 { "GEODETIC_INSTANT_longitude_set", _wrap_GEODETIC_INSTANT_longitude_set, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_longitude_get", _wrap_GEODETIC_INSTANT_longitude_get, METH_O, NULL},
	 { "GEODETIC_INSTANT_heightm_set", _wrap_GEODETIC_INSTANT_heightm_set, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_heightm_get", _wrap_GEODETIC_INSTANT_heightm_get, METH_O, NULL},
	 { "GEODETIC_INSTANT_mjd_set", _wrap_GEODETIC_INSTANT_mjd_set, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_mjd_get", _wrap_GEODETIC_INSTANT_mjd_get, METH_O, NULL},
	 { "new_GEODETIC_INSTANT", _wrap_new_GEODETIC_INSTANT, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT___eq__", _wrap_GEODETIC_INSTANT___eq__, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_FromSequence", _wrap_GEODETIC_INSTANT_FromSequence, METH_VARARGS, NULL},
	 { "GEODETIC_INSTANT_AsSequence", _wrap_GEODETIC_INSTANT_AsSequence, METH_O, NULL},
	 { "delete_GEODETIC_INSTANT", _wrap_delete_GEODETIC_INSTANT, METH_O, NULL},
	 { "GEODETIC_INSTANT_swigregister", GEODETIC_INSTANT_swigregister, METH_O, NULL},
	 { "GEODETIC_INSTANT_swiginit", GEODETIC_INSTANT_swiginit, METH_VARARGS, NULL},
	 { "AddGlobalClimatologyHandle", _wrap_AddGlobalClimatologyHandle, METH_VARARGS, NULL},
	 { "FindGlobalClimatologyHandle", _wrap_FindGlobalClimatologyHandle, METH_VARARGS, NULL},
	 { "FindGlobalClimatologyNameOfHandle", _wrap_FindGlobalClimatologyNameOfHandle, METH_O, NULL},
	 { "HasKey_InGlobalClimatologyHandle", _wrap_HasKey_InGlobalClimatologyHandle, METH_O, NULL},
	 { "InternalGlobalClimatologyHandleTable", _wrap_InternalGlobalClimatologyHandleTable, METH_NOARGS, NULL},
	 { "AddGeneratedGlobalClimatologyHandleIfNotExists", _wrap_AddGeneratedGlobalClimatologyHandleIfNotExists, METH_O, NULL},
	 { "SetParentHandleTable", _wrap_SetParentHandleTable, METH_O, NULL},
	 { "ISKBasisDirection_Assign", _wrap_ISKBasisDirection_Assign, METH_VARARGS, NULL},
	 { "ISKBasisDirection_Propagation", _wrap_ISKBasisDirection_Propagation, METH_O, NULL},
	 { "ISKBasisDirection_Theta", _wrap_ISKBasisDirection_Theta, METH_O, NULL},
	 { "ISKBasisDirection_Phi", _wrap_ISKBasisDirection_Phi, METH_O, NULL},
	 { "new_ISKBasisDirection", _wrap_new_ISKBasisDirection, METH_NOARGS, NULL},
	 { "delete_ISKBasisDirection", _wrap_delete_ISKBasisDirection, METH_O, NULL},
	 { "ISKBasisDirection_swigregister", ISKBasisDirection_swigregister, METH_O, NULL},
	 { "ISKBasisDirection_swiginit", ISKBasisDirection_swiginit, METH_VARARGS, NULL},
	 { "IQUV_I_set", _wrap_IQUV_I_set, METH_VARARGS, NULL},
	 { "IQUV_I_get", _wrap_IQUV_I_get, METH_O, NULL},
	 { "IQUV_Q_set", _wrap_IQUV_Q_set, METH_VARARGS, NULL},
	 { "IQUV_Q_get", _wrap_IQUV_Q_get, METH_O, NULL},
	 { "IQUV_U_set", _wrap_IQUV_U_set, METH_VARARGS, NULL},
	 { "IQUV_U_get", _wrap_IQUV_U_get, METH_O, NULL},
	 { "IQUV_V_set", _wrap_IQUV_V_set, METH_VARARGS, NULL},
	 { "IQUV_V_get", _wrap_IQUV_V_get, METH_O, NULL},
	 { "new_IQUV", _wrap_new_IQUV, METH_NOARGS, NULL},
	 { "delete_IQUV", _wrap_delete_IQUV, METH_O, NULL},
	 { "IQUV_swigregister", IQUV_swigregister, METH_O, NULL},
	 { "IQUV_swiginit", IQUV_swiginit, METH_VARARGS, NULL},
	 { "new_ISKStokesVector", _wrap_new_ISKStokesVector, METH_VARARGS, NULL},
	 { "ISKStokesVector_Assign", _wrap_ISKStokesVector_Assign, METH_VARARGS, NULL},
	 { "ISKStokesVector_Stokes", _wrap_ISKStokesVector_Stokes, METH_O, NULL},
	 { "ISKStokesVector_Basis", _wrap_ISKStokesVector_Basis, METH_O, NULL},
	 { "ISKStokesVector_to_new_basis", _wrap_ISKStokesVector_to_new_basis, METH_VARARGS, NULL},
	 { "ISKStokesVector_propagation_direction", _wrap_ISKStokesVector_propagation_direction, METH_O, NULL},
	 { "ISKStokesVector_theta_direction", _wrap_ISKStokesVector_theta_direction, METH_O, NULL},
	 { "ISKStokesVector_phi_direction", _wrap_ISKStokesVector_phi_direction, METH_O, NULL},
	 { "ISKStokesVector_I", _wrap_ISKStokesVector_I, METH_O, NULL},
	 { "ISKStokesVector_Q", _wrap_ISKStokesVector_Q, METH_O, NULL},
	 { "ISKStokesVector_U", _wrap_ISKStokesVector_U, METH_O, NULL},
	 { "ISKStokesVector_V", _wrap_ISKStokesVector_V, METH_O, NULL},
	 { "delete_ISKStokesVector", _wrap_delete_ISKStokesVector, METH_O, NULL},
	 { "ISKStokesVector_swigregister", ISKStokesVector_swigregister, METH_O, NULL},
	 { "ISKStokesVector_swiginit", ISKStokesVector_swiginit, METH_VARARGS, NULL},
	 { "SKTRAN_IFSetRegistryDirectory", _wrap_SKTRAN_IFSetRegistryDirectory, METH_O, NULL},
	 { "SKTRAN_IFCreateRegistryEntriesForDLL", _wrap_SKTRAN_IFCreateRegistryEntriesForDLL, METH_VARARGS, NULL},
	 { "delete_ISKModuleBase", _wrap_delete_ISKModuleBase, METH_O, NULL},
	 { "ISKModuleBase_RawObjectUnknown", _wrap_ISKModuleBase_RawObjectUnknown, METH_O, NULL},
	 { "ISKModuleBase_SetProperty", _wrap_ISKModuleBase_SetProperty, METH_VARARGS, NULL},
	 { "ISKModuleBase_GetProperty", _wrap_ISKModuleBase_GetProperty, METH_VARARGS, NULL},
	 { "ISKModuleBase_swigregister", ISKModuleBase_swigregister, METH_O, NULL},
	 { "new_ISKClimatology", _wrap_new_ISKClimatology, METH_O, NULL},
	 { "delete_ISKClimatology", _wrap_delete_ISKClimatology, METH_O, NULL},
	 { "ISKClimatology_Stub", _wrap_ISKClimatology_Stub, METH_O, NULL},
	 { "ISKClimatology_Create_New_ClimatologyName", _wrap_ISKClimatology_Create_New_ClimatologyName, METH_VARARGS, NULL},
	 { "ISKClimatology_IsValidObject", _wrap_ISKClimatology_IsValidObject, METH_O, NULL},
	 { "ISKClimatology_UpdateCache", _wrap_ISKClimatology_UpdateCache, METH_VARARGS, NULL},
	 { "ISKClimatology_GetParameter", _wrap_ISKClimatology_GetParameter, METH_VARARGS, NULL},
	 { "ISKClimatology_GetHeightProfile", _wrap_ISKClimatology_GetHeightProfile, METH_VARARGS, NULL},
	 { "ISKClimatology_SetPropertyUserDefined", _wrap_ISKClimatology_SetPropertyUserDefined, METH_VARARGS, NULL},
	 { "ISKClimatology_swigregister", ISKClimatology_swigregister, METH_O, NULL},
	 { "ISKClimatology_swiginit", ISKClimatology_swiginit, METH_VARARGS, NULL},
	 { "new_ISKOpticalProperty", _wrap_new_ISKOpticalProperty, METH_VARARGS, NULL},
	 { "delete_ISKOpticalProperty", _wrap_delete_ISKOpticalProperty, METH_O, NULL},
	 { "ISKOpticalProperty_Stub", _wrap_ISKOpticalProperty_Stub, METH_O, NULL},
	 { "ISKOpticalProperty_IsValidObject", _wrap_ISKOpticalProperty_IsValidObject, METH_O, NULL},
	 { "ISKOpticalProperty_SetAtmosphericState", _wrap_ISKOpticalProperty_SetAtmosphericState, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_SetLocation", _wrap_ISKOpticalProperty_SetLocation, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_InternalClimatology_UpdateCache", _wrap_ISKOpticalProperty_InternalClimatology_UpdateCache, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_CalculateCrossSections", _wrap_ISKOpticalProperty_CalculateCrossSections, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_CalculatePhaseMatrix", _wrap_ISKOpticalProperty_CalculatePhaseMatrix, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_AddUserDefined", _wrap_ISKOpticalProperty_AddUserDefined, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_AddUserDefinedPressure", _wrap_ISKOpticalProperty_AddUserDefinedPressure, METH_VARARGS, NULL},
	 { "ISKOpticalProperty_swigregister", ISKOpticalProperty_swigregister, METH_O, NULL},
	 { "ISKOpticalProperty_swiginit", ISKOpticalProperty_swiginit, METH_VARARGS, NULL},
	 { "new_ISKEmission", _wrap_new_ISKEmission, METH_O, NULL},
	 { "delete_ISKEmission", _wrap_delete_ISKEmission, METH_O, NULL},
	 { "ISKEmission_Stub", _wrap_ISKEmission_Stub, METH_O, NULL},
	 { "ISKEmission_IsValidObject", _wrap_ISKEmission_IsValidObject, METH_O, NULL},
	 { "ISKEmission_UpdateLocation", _wrap_ISKEmission_UpdateLocation, METH_VARARGS, NULL},
	 { "ISKEmission_UpdateCache", _wrap_ISKEmission_UpdateCache, METH_VARARGS, NULL},
	 { "ISKEmission_IsotropicEmission", _wrap_ISKEmission_IsotropicEmission, METH_VARARGS, NULL},
	 { "ISKEmission_swigregister", ISKEmission_swigregister, METH_O, NULL},
	 { "ISKEmission_swiginit", ISKEmission_swiginit, METH_VARARGS, NULL},
	 { "new_ISKBrdf", _wrap_new_ISKBrdf, METH_O, NULL},
	 { "delete_ISKBrdf", _wrap_delete_ISKBrdf, METH_O, NULL},
	 { "ISKBrdf_Stub", _wrap_ISKBrdf_Stub, METH_O, NULL},
	 { "ISKBrdf_IsValidObject", _wrap_ISKBrdf_IsValidObject, METH_O, NULL},
	 { "ISKBrdf_BRDF", _wrap_ISKBrdf_BRDF, METH_VARARGS, NULL},
	 { "ISKBrdf_swigregister", ISKBrdf_swigregister, METH_O, NULL},
	 { "ISKBrdf_swiginit", ISKBrdf_swiginit, METH_VARARGS, NULL},
	 { "new_ISKSolarSpectrum", _wrap_new_ISKSolarSpectrum, METH_O, NULL},
	 { "delete_ISKSolarSpectrum", _wrap_delete_ISKSolarSpectrum, METH_O, NULL},
	 { "ISKSolarSpectrum_IsValidObject", _wrap_ISKSolarSpectrum_IsValidObject, METH_O, NULL},
	 { "ISKSolarSpectrum_Irradiance", _wrap_ISKSolarSpectrum_Irradiance, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_IrradianceAt1AU", _wrap_ISKSolarSpectrum_IrradianceAt1AU, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_SetSolarDistanceFromMjd", _wrap_ISKSolarSpectrum_SetSolarDistanceFromMjd, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_SetSolarDistanceFromAU", _wrap_ISKSolarSpectrum_SetSolarDistanceFromAU, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_MinValidWavelength", _wrap_ISKSolarSpectrum_MinValidWavelength, METH_O, NULL},
	 { "ISKSolarSpectrum_MaxValidWavelength", _wrap_ISKSolarSpectrum_MaxValidWavelength, METH_O, NULL},
	 { "ISKSolarSpectrum_NanometerResolutionFWHM", _wrap_ISKSolarSpectrum_NanometerResolutionFWHM, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_SampleSpacing", _wrap_ISKSolarSpectrum_SampleSpacing, METH_VARARGS, NULL},
	 { "ISKSolarSpectrum_swigregister", ISKSolarSpectrum_swigregister, METH_O, NULL},
	 { "ISKSolarSpectrum_swiginit", ISKSolarSpectrum_swiginit, METH_VARARGS, NULL},
	 { "ISKStokesVectorIF_m_stokes_set", _wrap_ISKStokesVectorIF_m_stokes_set, METH_VARARGS, NULL},
	 { "ISKStokesVectorIF_m_stokes_get", _wrap_ISKStokesVectorIF_m_stokes_get, METH_O, NULL},
	 { "delete_ISKStokesVectorIF", _wrap_delete_ISKStokesVectorIF, METH_O, NULL},
	 { "ISKStokesVectorIF_RawObjectUnknown", _wrap_ISKStokesVectorIF_RawObjectUnknown, METH_O, NULL},
	 { "new_ISKStokesVectorIF", _wrap_new_ISKStokesVectorIF, METH_NOARGS, NULL},
	 { "ISKStokesVectorIF_swigregister", ISKStokesVectorIF_swigregister, METH_O, NULL},
	 { "ISKStokesVectorIF_swiginit", ISKStokesVectorIF_swiginit, METH_VARARGS, NULL},
	 { "new_ISKEngine", _wrap_new_ISKEngine, METH_O, NULL},
	 { "delete_ISKEngine", _wrap_delete_ISKEngine, METH_O, NULL},
	 { "ISKEngine_Stub", _wrap_ISKEngine_Stub, METH_O, NULL},
	 { "ISKEngine_IsValidObject", _wrap_ISKEngine_IsValidObject, METH_O, NULL},
	 { "ISKEngine_AddLineOfSight", _wrap_ISKEngine_AddLineOfSight, METH_VARARGS, NULL},
	 { "ISKEngine_AddSpecies", _wrap_ISKEngine_AddSpecies, METH_VARARGS, NULL},
	 { "ISKEngine_AddEmission", _wrap_ISKEngine_AddEmission, METH_VARARGS, NULL},
	 { "ISKEngine_SetAtmosphericState", _wrap_ISKEngine_SetAtmosphericState, METH_VARARGS, NULL},
	 { "ISKEngine_SetAlbedo", _wrap_ISKEngine_SetAlbedo, METH_VARARGS, NULL},
	 { "ISKEngine_SetBRDF", _wrap_ISKEngine_SetBRDF, METH_VARARGS, NULL},
	 { "ISKEngine_SetPolarizationMode", _wrap_ISKEngine_SetPolarizationMode, METH_VARARGS, NULL},
	 { "ISKEngine_SetWavelengths", _wrap_ISKEngine_SetWavelengths, METH_VARARGS, NULL},
	 { "ISKEngine_InitializeModel", _wrap_ISKEngine_InitializeModel, METH_O, NULL},
	 { "ISKEngine_CalculateRadiance", _wrap_ISKEngine_CalculateRadiance, METH_O, NULL},
	 { "ISKEngine_CalculateStokesVector", _wrap_ISKEngine_CalculateStokesVector, METH_O, NULL},
	 { "ISKEngine_GetWeightingFunctions", _wrap_ISKEngine_GetWeightingFunctions, METH_O, NULL},
	 { "ISKEngine_GetProperty", _wrap_ISKEngine_GetProperty, METH_VARARGS, NULL},
	 { "ISKEngine_swigregister", ISKEngine_swigregister, METH_O, NULL},
	 { "ISKEngine_swiginit", ISKEngine_swiginit, METH_VARARGS, NULL},
	 { "new_ISKGeodetic", _wrap_new_ISKGeodetic, METH_NOARGS, NULL},
	 { "delete_ISKGeodetic", _wrap_delete_ISKGeodetic, METH_O, NULL},
	 { "ISKGeodetic_IsValidObject", _wrap_ISKGeodetic_IsValidObject, METH_O, NULL},
	 { "ISKGeodetic_SetLocationLatLonAlt", _wrap_ISKGeodetic_SetLocationLatLonAlt, METH_VARARGS, NULL},
	 { "ISKGeodetic_SetLocationXYZ", _wrap_ISKGeodetic_SetLocationXYZ, METH_VARARGS, NULL},
	 { "ISKGeodetic_SetLocationFromTangentPoint", _wrap_ISKGeodetic_SetLocationFromTangentPoint, METH_VARARGS, NULL},
	 { "ISKGeodetic_SetLocationFromTangentAltitude", _wrap_ISKGeodetic_SetLocationFromTangentAltitude, METH_VARARGS, NULL},
	 { "ISKGeodetic_GetLocalWest", _wrap_ISKGeodetic_GetLocalWest, METH_O, NULL},
	 { "ISKGeodetic_GetLocalSouth", _wrap_ISKGeodetic_GetLocalSouth, METH_O, NULL},
	 { "ISKGeodetic_GetLocalUp", _wrap_ISKGeodetic_GetLocalUp, METH_O, NULL},
	 { "ISKGeodetic_GetLocationXYZ", _wrap_ISKGeodetic_GetLocationXYZ, METH_O, NULL},
	 { "ISKGeodetic_GetLongitude", _wrap_ISKGeodetic_GetLongitude, METH_O, NULL},
	 { "ISKGeodetic_GetLatitude", _wrap_ISKGeodetic_GetLatitude, METH_O, NULL},
	 { "ISKGeodetic_GetAlt", _wrap_ISKGeodetic_GetAlt, METH_O, NULL},
	 { "ISKGeodetic_GetAltitudeIntercepts", _wrap_ISKGeodetic_GetAltitudeIntercepts, METH_VARARGS, NULL},
	 { "ISKGeodetic_GetOsculatingSpheroidCenter", _wrap_ISKGeodetic_GetOsculatingSpheroidCenter, METH_O, NULL},
	 { "ISKGeodetic_GetOsculatingSpheroidRadius", _wrap_ISKGeodetic_GetOsculatingSpheroidRadius, METH_O, NULL},
	 { "ISKGeodetic_swigregister", ISKGeodetic_swigregister, METH_O, NULL},
	 { "ISKGeodetic_swiginit", ISKGeodetic_swiginit, METH_VARARGS, NULL},
	 { "new_ISKMie", _wrap_new_ISKMie, METH_O, NULL},
	 { "delete_ISKMie", _wrap_delete_ISKMie, METH_O, NULL},
	 { "ISKMie_Calculate", _wrap_ISKMie_Calculate, METH_VARARGS, NULL},
	 { "ISKMie_Qext", _wrap_ISKMie_Qext, METH_O, NULL},
	 { "ISKMie_Qsca", _wrap_ISKMie_Qsca, METH_O, NULL},
	 { "ISKMie_Qabs", _wrap_ISKMie_Qabs, METH_O, NULL},
	 { "ISKMie_Cext", _wrap_ISKMie_Cext, METH_O, NULL},
	 { "ISKMie_Csca", _wrap_ISKMie_Csca, METH_O, NULL},
	 { "ISKMie_Cabs", _wrap_ISKMie_Cabs, METH_O, NULL},
	 { "ISKMie_S1", _wrap_ISKMie_S1, METH_O, NULL},
	 { "ISKMie_S2", _wrap_ISKMie_S2, METH_O, NULL},
	 { "ISKMie_PMom", _wrap_ISKMie_PMom, METH_O, NULL},
	 { "ISKMie_Sforward", _wrap_ISKMie_Sforward, METH_O, NULL},
	 { "ISKMie_SBackward", _wrap_ISKMie_SBackward, METH_O, NULL},
	 { "ISKMie_TForward", _wrap_ISKMie_TForward, METH_VARARGS, NULL},
	 { "ISKMie_TBackward", _wrap_ISKMie_TBackward, METH_VARARGS, NULL},
	 { "ISKMie_Spike", _wrap_ISKMie_Spike, METH_O, NULL},
	 { "ISKMie_swigregister", ISKMie_swigregister, METH_O, NULL},
	 { "ISKMie_swiginit", ISKMie_swiginit, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};

static PyMethodDef SwigMethods_proxydocs[] = {
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ISKOpticalPropertyTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKOpticalProperty *) x));
}
static void *_p_ISKBrdfTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKBrdf *) x));
}
static void *_p_ISKGeodeticTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKGeodetic *) x));
}
static void *_p_ISKMieTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKMie *) x));
}
static void *_p_ISKStokesVectorIFTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKStokesVectorIF *) x));
}
static void *_p_ISKClimatologyTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKClimatology *) x));
}
static void *_p_ISKEngineTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKEngine *) x));
}
static void *_p_ISKSolarSpectrumTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKSolarSpectrum *) x));
}
static void *_p_ISKEmissionTo_p_ISKModuleBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((ISKModuleBase *)  ((ISKEmission *) x));
}
static swig_type_info _swigt__p_GEODETIC_INSTANT = {"_p_GEODETIC_INSTANT", "GEODETIC_INSTANT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GUID = {"_p_GUID", "GUID *|CLIMATOLOGY_HANDLE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IQUV = {"_p_IQUV", "IQUV *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKBasisDirection = {"_p_ISKBasisDirection", "ISKBasisDirection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKBrdf = {"_p_ISKBrdf", "ISKBrdf *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKBrdf_Stub = {"_p_ISKBrdf_Stub", "ISKBrdf_Stub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKClimatology = {"_p_ISKClimatology", "ISKClimatology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKClimatology_Stub = {"_p_ISKClimatology_Stub", "ISKClimatology_Stub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKEmission = {"_p_ISKEmission", "ISKEmission *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKEmission_Stub = {"_p_ISKEmission_Stub", "ISKEmission_Stub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKEngine = {"_p_ISKEngine", "ISKEngine *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKEngine_Stub = {"_p_ISKEngine_Stub", "ISKEngine_Stub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKGeodetic = {"_p_ISKGeodetic", "ISKGeodetic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKMie = {"_p_ISKMie", "ISKMie *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKModuleBase = {"_p_ISKModuleBase", "ISKModuleBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKOpticalProperty = {"_p_ISKOpticalProperty", "ISKOpticalProperty *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKOpticalProperty_Stub = {"_p_ISKOpticalProperty_Stub", "ISKOpticalProperty_Stub *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKSolarSpectrum = {"_p_ISKSolarSpectrum", "ISKSolarSpectrum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKStokesVector = {"_p_ISKStokesVector", "ISKStokesVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ISKStokesVectorIF = {"_p_ISKStokesVectorIF", "ISKStokesVectorIF *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_3__double = {"_p_a_3__double", "NXVECTOR *|double (*)[3]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nxTimeStamp = {"_p_nxTimeStamp", "nxTimeStamp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nxUnknown = {"_p_nxUnknown", "nxUnknown *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_nxVector = {"_p_nxVector", "nxVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_ISKStokesVector = {"_p_p_ISKStokesVector", "ISKStokesVector **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_double = {"_p_p_double", "double **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_std__complexT_double_t = {"_p_p_std__complexT_double_t", "std::complex< double > **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_nxString_GUID_t = {"_p_std__mapT_nxString_GUID_t", "std::map< nxString,GUID > *|std::map< nxString,CLIMATOLOGY_HANDLE > *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GEODETIC_INSTANT,
  &_swigt__p_GUID,
  &_swigt__p_IQUV,
  &_swigt__p_ISKBasisDirection,
  &_swigt__p_ISKBrdf,
  &_swigt__p_ISKBrdf_Stub,
  &_swigt__p_ISKClimatology,
  &_swigt__p_ISKClimatology_Stub,
  &_swigt__p_ISKEmission,
  &_swigt__p_ISKEmission_Stub,
  &_swigt__p_ISKEngine,
  &_swigt__p_ISKEngine_Stub,
  &_swigt__p_ISKGeodetic,
  &_swigt__p_ISKMie,
  &_swigt__p_ISKModuleBase,
  &_swigt__p_ISKOpticalProperty,
  &_swigt__p_ISKOpticalProperty_Stub,
  &_swigt__p_ISKSolarSpectrum,
  &_swigt__p_ISKStokesVector,
  &_swigt__p_ISKStokesVectorIF,
  &_swigt__p_a_3__double,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_nxTimeStamp,
  &_swigt__p_nxUnknown,
  &_swigt__p_nxVector,
  &_swigt__p_p_ISKStokesVector,
  &_swigt__p_p_double,
  &_swigt__p_p_std__complexT_double_t,
  &_swigt__p_std__mapT_nxString_GUID_t,
};

static swig_cast_info _swigc__p_GEODETIC_INSTANT[] = {  {&_swigt__p_GEODETIC_INSTANT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GUID[] = {  {&_swigt__p_GUID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IQUV[] = {  {&_swigt__p_IQUV, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKBasisDirection[] = {  {&_swigt__p_ISKBasisDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKBrdf[] = {  {&_swigt__p_ISKBrdf, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKBrdf_Stub[] = {  {&_swigt__p_ISKBrdf_Stub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKClimatology[] = {  {&_swigt__p_ISKClimatology, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKClimatology_Stub[] = {  {&_swigt__p_ISKClimatology_Stub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKEmission[] = {  {&_swigt__p_ISKEmission, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKEmission_Stub[] = {  {&_swigt__p_ISKEmission_Stub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKEngine[] = {  {&_swigt__p_ISKEngine, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKEngine_Stub[] = {  {&_swigt__p_ISKEngine_Stub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKGeodetic[] = {  {&_swigt__p_ISKGeodetic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKMie[] = {  {&_swigt__p_ISKMie, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKModuleBase[] = {  {&_swigt__p_ISKOpticalProperty, _p_ISKOpticalPropertyTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKBrdf, _p_ISKBrdfTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKGeodetic, _p_ISKGeodeticTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKMie, _p_ISKMieTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKStokesVectorIF, _p_ISKStokesVectorIFTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKModuleBase, 0, 0, 0},  {&_swigt__p_ISKClimatology, _p_ISKClimatologyTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKEngine, _p_ISKEngineTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKSolarSpectrum, _p_ISKSolarSpectrumTo_p_ISKModuleBase, 0, 0},  {&_swigt__p_ISKEmission, _p_ISKEmissionTo_p_ISKModuleBase, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKOpticalProperty[] = {  {&_swigt__p_ISKOpticalProperty, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKOpticalProperty_Stub[] = {  {&_swigt__p_ISKOpticalProperty_Stub, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKSolarSpectrum[] = {  {&_swigt__p_ISKSolarSpectrum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKStokesVector[] = {  {&_swigt__p_ISKStokesVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ISKStokesVectorIF[] = {  {&_swigt__p_ISKStokesVectorIF, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__double[] = {  {&_swigt__p_a_3__double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nxTimeStamp[] = {  {&_swigt__p_nxTimeStamp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nxUnknown[] = {  {&_swigt__p_nxUnknown, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_nxVector[] = {  {&_swigt__p_nxVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_ISKStokesVector[] = {  {&_swigt__p_p_ISKStokesVector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_double[] = {  {&_swigt__p_p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_std__complexT_double_t[] = {  {&_swigt__p_p_std__complexT_double_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_nxString_GUID_t[] = {  {&_swigt__p_std__mapT_nxString_GUID_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GEODETIC_INSTANT,
  _swigc__p_GUID,
  _swigc__p_IQUV,
  _swigc__p_ISKBasisDirection,
  _swigc__p_ISKBrdf,
  _swigc__p_ISKBrdf_Stub,
  _swigc__p_ISKClimatology,
  _swigc__p_ISKClimatology_Stub,
  _swigc__p_ISKEmission,
  _swigc__p_ISKEmission_Stub,
  _swigc__p_ISKEngine,
  _swigc__p_ISKEngine_Stub,
  _swigc__p_ISKGeodetic,
  _swigc__p_ISKMie,
  _swigc__p_ISKModuleBase,
  _swigc__p_ISKOpticalProperty,
  _swigc__p_ISKOpticalProperty_Stub,
  _swigc__p_ISKSolarSpectrum,
  _swigc__p_ISKStokesVector,
  _swigc__p_ISKStokesVectorIF,
  _swigc__p_a_3__double,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_nxTimeStamp,
  _swigc__p_nxUnknown,
  _swigc__p_nxVector,
  _swigc__p_p_ISKStokesVector,
  _swigc__p_p_double,
  _swigc__p_p_std__complexT_double_t,
  _swigc__p_std__mapT_nxString_GUID_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        "swigvarlink",                      /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        0,                                  /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
        0,                                  /* tp_del */
        0,                                  /* tp_version_tag */
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#if PY_VERSION_HEX >= 0x03080000
        0,                                  /* tp_vectorcall */
#endif
#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
        0,                                  /* tp_print */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
        0,                                  /* tp_prev */
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        memcpy(gv->name, name, size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *globals = 0;
    if (!globals) {
      globals = SWIG_newvarlink();
    }
    return globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              memcpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              memcpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
  /* -----------------------------------------------------------------------------
   * Method creation and docstring support functions
   * ----------------------------------------------------------------------------- */
  
  /* -----------------------------------------------------------------------------
   * Function to find the method definition with the correct docstring for the
   * proxy module as opposed to the low-level API
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
    /* Find the function in the modified method table */
    size_t offset = 0;
    int found = 0;
    while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
      if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
        found = 1;
        break;
      }
      offset++;
    }
    /* Use the copy with the modified docstring if available */
    return found ? &SwigMethods_proxydocs[offset] : NULL;
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyInstanceMethod_New() used in Python 3
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
#if PY_VERSION_HEX >= 0x03000000
    return PyInstanceMethod_New(func);
#else
    return PyMethod_New(func, NULL, NULL);
#endif
  }
  
  /* -----------------------------------------------------------------------------
   * Wrapper of PyStaticMethod_New()
   * It is exported to the generated module, used for -fastproxy
   * ----------------------------------------------------------------------------- */
  
  SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
    if (PyCFunction_Check(func)) {
      PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
      PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
      if (ml)
      func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
    }
    return PyStaticMethod_New(func);
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md, *globals;
  
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
    PyModuleDef_HEAD_INIT,
    SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    SwigPyObject_own,
    SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  (void)globals;
  
  /* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
  SWIG_This();
  SWIG_Python_TypeCache();
  SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
  SwigPyObject_type();
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule(SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  
  import_array();
  g_sasktranifError = PyErr_NewException("sasktranif.functionfail", NULL, NULL);
  Py_INCREF(g_sasktranifError);
  PyModule_AddObject(m, "functionfail", g_sasktranifError);
  
  SWIG_Python_SetConstant(d, "NXBASE_NXVECTOR_H",SWIG_From_int(static_cast< int >(1)));
  globals = SWIG_globals();
  if (!globals) {
    PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
    return NULL;
#else
    return;
#endif
  }
  PyDict_SetItemString(md, "cvar", globals);
  Py_DECREF(globals);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AOA_DAYS", Swig_var_SKCLIMATOLOGY_AOA_DAYS_get, Swig_var_SKCLIMATOLOGY_AOA_DAYS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOLDUST_CM3", Swig_var_SKCLIMATOLOGY_AEROSOLDUST_CM3_get, Swig_var_SKCLIMATOLOGY_AEROSOLDUST_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOLH2SO4_CM3", Swig_var_SKCLIMATOLOGY_AEROSOLH2SO4_CM3_get, Swig_var_SKCLIMATOLOGY_AEROSOLH2SO4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOLICE_CM3", Swig_var_SKCLIMATOLOGY_AEROSOLICE_CM3_get, Swig_var_SKCLIMATOLOGY_AEROSOLICE_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3", Swig_var_SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3_get, Swig_var_SKCLIMATOLOGY_AEROSOLSURFACEAREA_UM2PerCM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOLWATER_CM3", Swig_var_SKCLIMATOLOGY_AEROSOLWATER_CM3_get, Swig_var_SKCLIMATOLOGY_AEROSOLWATER_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOL_CM3", Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_get, Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM", Swig_var_SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM_get, Swig_var_SKCLIMATOLOGY_AEROSOL_EXTINCTIONPERKM_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3", Swig_var_SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3_get, Swig_var_SKCLIMATOLOGY_AIRNUMBERDENSITY_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ALBEDO", Swig_var_SKCLIMATOLOGY_ALBEDO_get, Swig_var_SKCLIMATOLOGY_ALBEDO_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_Ar_CM3", Swig_var_SKCLIMATOLOGY_Ar_CM3_get, Swig_var_SKCLIMATOLOGY_Ar_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BCPI", Swig_var_SKCLIMATOLOGY_BCPI_get, Swig_var_SKCLIMATOLOGY_BCPI_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BCPO", Swig_var_SKCLIMATOLOGY_BCPO_get, Swig_var_SKCLIMATOLOGY_BCPO_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRCL_CM3", Swig_var_SKCLIMATOLOGY_BRCL_CM3_get, Swig_var_SKCLIMATOLOGY_BRCL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRNO3_CM3", Swig_var_SKCLIMATOLOGY_BRNO3_CM3_get, Swig_var_SKCLIMATOLOGY_BRNO3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRO_CM3", Swig_var_SKCLIMATOLOGY_BRO_CM3_get, Swig_var_SKCLIMATOLOGY_BRO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRO_VMR", Swig_var_SKCLIMATOLOGY_BRO_VMR_get, Swig_var_SKCLIMATOLOGY_BRO_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRX_CM3", Swig_var_SKCLIMATOLOGY_BRX_CM3_get, Swig_var_SKCLIMATOLOGY_BRX_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRX_VMR", Swig_var_SKCLIMATOLOGY_BRX_VMR_get, Swig_var_SKCLIMATOLOGY_BRX_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRY_CM3", Swig_var_SKCLIMATOLOGY_BRY_CM3_get, Swig_var_SKCLIMATOLOGY_BRY_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BRY_VMR", Swig_var_SKCLIMATOLOGY_BRY_VMR_get, Swig_var_SKCLIMATOLOGY_BRY_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_BR_CM3", Swig_var_SKCLIMATOLOGY_BR_CM3_get, Swig_var_SKCLIMATOLOGY_BR_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C2H2_CM3", Swig_var_SKCLIMATOLOGY_C2H2_CM3_get, Swig_var_SKCLIMATOLOGY_C2H2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C2H4_CM3", Swig_var_SKCLIMATOLOGY_C2H4_CM3_get, Swig_var_SKCLIMATOLOGY_C2H4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C2H6_CM3", Swig_var_SKCLIMATOLOGY_C2H6_CM3_get, Swig_var_SKCLIMATOLOGY_C2H6_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C3H6O_CM3", Swig_var_SKCLIMATOLOGY_C3H6O_CM3_get, Swig_var_SKCLIMATOLOGY_C3H6O_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C3H6O_VMR", Swig_var_SKCLIMATOLOGY_C3H6O_VMR_get, Swig_var_SKCLIMATOLOGY_C3H6O_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C5H8_CM3", Swig_var_SKCLIMATOLOGY_C5H8_CM3_get, Swig_var_SKCLIMATOLOGY_C5H8_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_C5H8_VMR", Swig_var_SKCLIMATOLOGY_C5H8_VMR_get, Swig_var_SKCLIMATOLOGY_C5H8_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CCL4_CM3", Swig_var_SKCLIMATOLOGY_CCL4_CM3_get, Swig_var_SKCLIMATOLOGY_CCL4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CCL4_VMR", Swig_var_SKCLIMATOLOGY_CCL4_VMR_get, Swig_var_SKCLIMATOLOGY_CCL4_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CF2CL2_CM3", Swig_var_SKCLIMATOLOGY_CF2CL2_CM3_get, Swig_var_SKCLIMATOLOGY_CF2CL2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CF2CL2_VMR", Swig_var_SKCLIMATOLOGY_CF2CL2_VMR_get, Swig_var_SKCLIMATOLOGY_CF2CL2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CF4_CM3", Swig_var_SKCLIMATOLOGY_CF4_CM3_get, Swig_var_SKCLIMATOLOGY_CF4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CFCL3_CM3", Swig_var_SKCLIMATOLOGY_CFCL3_CM3_get, Swig_var_SKCLIMATOLOGY_CFCL3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CFCL3_VMR", Swig_var_SKCLIMATOLOGY_CFCL3_VMR_get, Swig_var_SKCLIMATOLOGY_CFCL3_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH2O_CM3", Swig_var_SKCLIMATOLOGY_CH2O_CM3_get, Swig_var_SKCLIMATOLOGY_CH2O_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH2O_VMR", Swig_var_SKCLIMATOLOGY_CH2O_VMR_get, Swig_var_SKCLIMATOLOGY_CH2O_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3BR_CM3", Swig_var_SKCLIMATOLOGY_CH3BR_CM3_get, Swig_var_SKCLIMATOLOGY_CH3BR_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3BR_VMR", Swig_var_SKCLIMATOLOGY_CH3BR_VMR_get, Swig_var_SKCLIMATOLOGY_CH3BR_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3CL_CM3", Swig_var_SKCLIMATOLOGY_CH3CL_CM3_get, Swig_var_SKCLIMATOLOGY_CH3CL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3CL_VMR", Swig_var_SKCLIMATOLOGY_CH3CL_VMR_get, Swig_var_SKCLIMATOLOGY_CH3CL_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3CN_CM3", Swig_var_SKCLIMATOLOGY_CH3CN_CM3_get, Swig_var_SKCLIMATOLOGY_CH3CN_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3I_CM3", Swig_var_SKCLIMATOLOGY_CH3I_CM3_get, Swig_var_SKCLIMATOLOGY_CH3I_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3I_VMR", Swig_var_SKCLIMATOLOGY_CH3I_VMR_get, Swig_var_SKCLIMATOLOGY_CH3I_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH3OH_CM3", Swig_var_SKCLIMATOLOGY_CH3OH_CM3_get, Swig_var_SKCLIMATOLOGY_CH3OH_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH4_CM3", Swig_var_SKCLIMATOLOGY_CH4_CM3_get, Swig_var_SKCLIMATOLOGY_CH4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CH4_VMR", Swig_var_SKCLIMATOLOGY_CH4_VMR_get, Swig_var_SKCLIMATOLOGY_CH4_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CL2O2_CM3", Swig_var_SKCLIMATOLOGY_CL2O2_CM3_get, Swig_var_SKCLIMATOLOGY_CL2O2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CL2_CM3", Swig_var_SKCLIMATOLOGY_CL2_CM3_get, Swig_var_SKCLIMATOLOGY_CL2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLNO3_CM3", Swig_var_SKCLIMATOLOGY_CLNO3_CM3_get, Swig_var_SKCLIMATOLOGY_CLNO3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLONO2_CM3", Swig_var_SKCLIMATOLOGY_CLONO2_CM3_get, Swig_var_SKCLIMATOLOGY_CLONO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLOUD_FRACTION", Swig_var_SKCLIMATOLOGY_CLOUD_FRACTION_get, Swig_var_SKCLIMATOLOGY_CLOUD_FRACTION_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLO_CM3", Swig_var_SKCLIMATOLOGY_CLO_CM3_get, Swig_var_SKCLIMATOLOGY_CLO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLY_CM3", Swig_var_SKCLIMATOLOGY_CLY_CM3_get, Swig_var_SKCLIMATOLOGY_CLY_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CLY_VMR", Swig_var_SKCLIMATOLOGY_CLY_VMR_get, Swig_var_SKCLIMATOLOGY_CLY_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CL_CM3", Swig_var_SKCLIMATOLOGY_CL_CM3_get, Swig_var_SKCLIMATOLOGY_CL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CO2_CM3", Swig_var_SKCLIMATOLOGY_CO2_CM3_get, Swig_var_SKCLIMATOLOGY_CO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CO2_VMR", Swig_var_SKCLIMATOLOGY_CO2_VMR_get, Swig_var_SKCLIMATOLOGY_CO2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_COF2_CM3", Swig_var_SKCLIMATOLOGY_COF2_CM3_get, Swig_var_SKCLIMATOLOGY_COF2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CO_CM3", Swig_var_SKCLIMATOLOGY_CO_CM3_get, Swig_var_SKCLIMATOLOGY_CO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_CO_VMR", Swig_var_SKCLIMATOLOGY_CO_VMR_get, Swig_var_SKCLIMATOLOGY_CO_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_DUST_0p7mu", Swig_var_SKCLIMATOLOGY_DUST_0p7mu_get, Swig_var_SKCLIMATOLOGY_DUST_0p7mu_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_DUST_1p4mu", Swig_var_SKCLIMATOLOGY_DUST_1p4mu_get, Swig_var_SKCLIMATOLOGY_DUST_1p4mu_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_DUST_2p4mu", Swig_var_SKCLIMATOLOGY_DUST_2p4mu_get, Swig_var_SKCLIMATOLOGY_DUST_2p4mu_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_DUST_4p5mu", Swig_var_SKCLIMATOLOGY_DUST_4p5mu_get, Swig_var_SKCLIMATOLOGY_DUST_4p5mu_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS", Swig_var_SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS_get, Swig_var_SKCLIMATOLOGY_EFFECTIVESIZE_MICRONS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_EPV", Swig_var_SKCLIMATOLOGY_EPV_get, Swig_var_SKCLIMATOLOGY_EPV_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_GEOMETRIC_HEIGHT", Swig_var_SKCLIMATOLOGY_GEOMETRIC_HEIGHT_get, Swig_var_SKCLIMATOLOGY_GEOMETRIC_HEIGHT_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT", Swig_var_SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT_get, Swig_var_SKCLIMATOLOGY_GEOPOTENTIAL_HEIGHT_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2CO_CM3", Swig_var_SKCLIMATOLOGY_H2CO_CM3_get, Swig_var_SKCLIMATOLOGY_H2CO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2O2_CM3", Swig_var_SKCLIMATOLOGY_H2O2_CM3_get, Swig_var_SKCLIMATOLOGY_H2O2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2O_CM3", Swig_var_SKCLIMATOLOGY_H2O_CM3_get, Swig_var_SKCLIMATOLOGY_H2O_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2O_VMR", Swig_var_SKCLIMATOLOGY_H2O_VMR_get, Swig_var_SKCLIMATOLOGY_H2O_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2S_CM3", Swig_var_SKCLIMATOLOGY_H2S_CM3_get, Swig_var_SKCLIMATOLOGY_H2S_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2_CM3", Swig_var_SKCLIMATOLOGY_H2_CM3_get, Swig_var_SKCLIMATOLOGY_H2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H2_VMR", Swig_var_SKCLIMATOLOGY_H2_VMR_get, Swig_var_SKCLIMATOLOGY_H2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HBR_CM3", Swig_var_SKCLIMATOLOGY_HBR_CM3_get, Swig_var_SKCLIMATOLOGY_HBR_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HCL_CM3", Swig_var_SKCLIMATOLOGY_HCL_CM3_get, Swig_var_SKCLIMATOLOGY_HCL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HCN_CM3", Swig_var_SKCLIMATOLOGY_HCN_CM3_get, Swig_var_SKCLIMATOLOGY_HCN_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HCOOH_CM3", Swig_var_SKCLIMATOLOGY_HCOOH_CM3_get, Swig_var_SKCLIMATOLOGY_HCOOH_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HF_CM3", Swig_var_SKCLIMATOLOGY_HF_CM3_get, Swig_var_SKCLIMATOLOGY_HF_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HI_CM3", Swig_var_SKCLIMATOLOGY_HI_CM3_get, Swig_var_SKCLIMATOLOGY_HI_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HNO2_CM3", Swig_var_SKCLIMATOLOGY_HNO2_CM3_get, Swig_var_SKCLIMATOLOGY_HNO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HNO2_VMR", Swig_var_SKCLIMATOLOGY_HNO2_VMR_get, Swig_var_SKCLIMATOLOGY_HNO2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HNO3_CM3", Swig_var_SKCLIMATOLOGY_HNO3_CM3_get, Swig_var_SKCLIMATOLOGY_HNO3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HNO3_VMR", Swig_var_SKCLIMATOLOGY_HNO3_VMR_get, Swig_var_SKCLIMATOLOGY_HNO3_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HNO4_CM3", Swig_var_SKCLIMATOLOGY_HNO4_CM3_get, Swig_var_SKCLIMATOLOGY_HNO4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HO2_CM3", Swig_var_SKCLIMATOLOGY_HO2_CM3_get, Swig_var_SKCLIMATOLOGY_HO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HOBR_CM3", Swig_var_SKCLIMATOLOGY_HOBR_CM3_get, Swig_var_SKCLIMATOLOGY_HOBR_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_HOCL_CM3", Swig_var_SKCLIMATOLOGY_HOCL_CM3_get, Swig_var_SKCLIMATOLOGY_HOCL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_H_CM3", Swig_var_SKCLIMATOLOGY_H_CM3_get, Swig_var_SKCLIMATOLOGY_H_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_He_CM3", Swig_var_SKCLIMATOLOGY_He_CM3_get, Swig_var_SKCLIMATOLOGY_He_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ICE_CM3", Swig_var_SKCLIMATOLOGY_ICE_CM3_get, Swig_var_SKCLIMATOLOGY_ICE_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_JH2O", Swig_var_SKCLIMATOLOGY_JH2O_get, Swig_var_SKCLIMATOLOGY_JH2O_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS", Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS_get, Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODERADIUS_MICRONS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH", Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH_get, Swig_var_SKCLIMATOLOGY_LOGNORMAL_MODEWIDTH_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_MECL_CM3", Swig_var_SKCLIMATOLOGY_MECL_CM3_get, Swig_var_SKCLIMATOLOGY_MECL_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_MECL_VMR", Swig_var_SKCLIMATOLOGY_MECL_VMR_get, Swig_var_SKCLIMATOLOGY_MECL_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N2O5_CM3", Swig_var_SKCLIMATOLOGY_N2O5_CM3_get, Swig_var_SKCLIMATOLOGY_N2O5_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N2O_CM3", Swig_var_SKCLIMATOLOGY_N2O_CM3_get, Swig_var_SKCLIMATOLOGY_N2O_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N2O_VMR", Swig_var_SKCLIMATOLOGY_N2O_VMR_get, Swig_var_SKCLIMATOLOGY_N2O_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N2_CM3", Swig_var_SKCLIMATOLOGY_N2_CM3_get, Swig_var_SKCLIMATOLOGY_N2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N2_VMR", Swig_var_SKCLIMATOLOGY_N2_VMR_get, Swig_var_SKCLIMATOLOGY_N2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NH3_CM3", Swig_var_SKCLIMATOLOGY_NH3_CM3_get, Swig_var_SKCLIMATOLOGY_NH3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NH3_VMR", Swig_var_SKCLIMATOLOGY_NH3_VMR_get, Swig_var_SKCLIMATOLOGY_NH3_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NITS", Swig_var_SKCLIMATOLOGY_NITS_get, Swig_var_SKCLIMATOLOGY_NITS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NO2_CM3", Swig_var_SKCLIMATOLOGY_NO2_CM3_get, Swig_var_SKCLIMATOLOGY_NO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NO2_VMR", Swig_var_SKCLIMATOLOGY_NO2_VMR_get, Swig_var_SKCLIMATOLOGY_NO2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NO3_CM3", Swig_var_SKCLIMATOLOGY_NO3_CM3_get, Swig_var_SKCLIMATOLOGY_NO3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NOPLUS_CM3", Swig_var_SKCLIMATOLOGY_NOPLUS_CM3_get, Swig_var_SKCLIMATOLOGY_NOPLUS_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NOY_CM3", Swig_var_SKCLIMATOLOGY_NOY_CM3_get, Swig_var_SKCLIMATOLOGY_NOY_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NOY_VMR", Swig_var_SKCLIMATOLOGY_NOY_VMR_get, Swig_var_SKCLIMATOLOGY_NOY_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NO_CM3", Swig_var_SKCLIMATOLOGY_NO_CM3_get, Swig_var_SKCLIMATOLOGY_NO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_NO_VMR", Swig_var_SKCLIMATOLOGY_NO_VMR_get, Swig_var_SKCLIMATOLOGY_NO_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_N_CM3", Swig_var_SKCLIMATOLOGY_N_CM3_get, Swig_var_SKCLIMATOLOGY_N_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O2_CM3", Swig_var_SKCLIMATOLOGY_O2_CM3_get, Swig_var_SKCLIMATOLOGY_O2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O2_O2_CM6", Swig_var_SKCLIMATOLOGY_O2_O2_CM6_get, Swig_var_SKCLIMATOLOGY_O2_O2_CM6_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O2_VMR", Swig_var_SKCLIMATOLOGY_O2_VMR_get, Swig_var_SKCLIMATOLOGY_O2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O3_CM3", Swig_var_SKCLIMATOLOGY_O3_CM3_get, Swig_var_SKCLIMATOLOGY_O3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O3_VMR", Swig_var_SKCLIMATOLOGY_O3_VMR_get, Swig_var_SKCLIMATOLOGY_O3_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_OCLO_CM3", Swig_var_SKCLIMATOLOGY_OCLO_CM3_get, Swig_var_SKCLIMATOLOGY_OCLO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_OCPI", Swig_var_SKCLIMATOLOGY_OCPI_get, Swig_var_SKCLIMATOLOGY_OCPI_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_OCPO", Swig_var_SKCLIMATOLOGY_OCPO_get, Swig_var_SKCLIMATOLOGY_OCPO_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_OCS_CM3", Swig_var_SKCLIMATOLOGY_OCS_CM3_get, Swig_var_SKCLIMATOLOGY_OCS_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_OH_CM3", Swig_var_SKCLIMATOLOGY_OH_CM3_get, Swig_var_SKCLIMATOLOGY_OH_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_O_CM3", Swig_var_SKCLIMATOLOGY_O_CM3_get, Swig_var_SKCLIMATOLOGY_O_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_PAN_CM3", Swig_var_SKCLIMATOLOGY_PAN_CM3_get, Swig_var_SKCLIMATOLOGY_PAN_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_PAN_VMR", Swig_var_SKCLIMATOLOGY_PAN_VMR_get, Swig_var_SKCLIMATOLOGY_PAN_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_PH3_CM3", Swig_var_SKCLIMATOLOGY_PH3_CM3_get, Swig_var_SKCLIMATOLOGY_PH3_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K", Swig_var_SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K_get, Swig_var_SKCLIMATOLOGY_POTENTIAL_TEMPERATURE_K_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_PRESSURE_PA", Swig_var_SKCLIMATOLOGY_PRESSURE_PA_get, Swig_var_SKCLIMATOLOGY_PRESSURE_PA_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_QI_MMR", Swig_var_SKCLIMATOLOGY_QI_MMR_get, Swig_var_SKCLIMATOLOGY_QI_MMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_QL_MMR", Swig_var_SKCLIMATOLOGY_QL_MMR_get, Swig_var_SKCLIMATOLOGY_QL_MMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_QV", Swig_var_SKCLIMATOLOGY_QV_get, Swig_var_SKCLIMATOLOGY_QV_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_RH", Swig_var_SKCLIMATOLOGY_RH_get, Swig_var_SKCLIMATOLOGY_RH_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ROOH_CM3", Swig_var_SKCLIMATOLOGY_ROOH_CM3_get, Swig_var_SKCLIMATOLOGY_ROOH_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ROO_CM3", Swig_var_SKCLIMATOLOGY_ROO_CM3_get, Swig_var_SKCLIMATOLOGY_ROO_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SALA", Swig_var_SKCLIMATOLOGY_SALA_get, Swig_var_SKCLIMATOLOGY_SALA_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SALC", Swig_var_SKCLIMATOLOGY_SALC_get, Swig_var_SKCLIMATOLOGY_SALC_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SF6_CM3", Swig_var_SKCLIMATOLOGY_SF6_CM3_get, Swig_var_SKCLIMATOLOGY_SF6_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SO2_CM3", Swig_var_SKCLIMATOLOGY_SO2_CM3_get, Swig_var_SKCLIMATOLOGY_SO2_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SO2_VMR", Swig_var_SKCLIMATOLOGY_SO2_VMR_get, Swig_var_SKCLIMATOLOGY_SO2_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SO4_CM3", Swig_var_SKCLIMATOLOGY_SO4_CM3_get, Swig_var_SKCLIMATOLOGY_SO4_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SO4_VMR", Swig_var_SKCLIMATOLOGY_SO4_VMR_get, Swig_var_SKCLIMATOLOGY_SO4_VMR_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT", Swig_var_SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT_get, Swig_var_SKCLIMATOLOGY_SURFACE_GEOMETRIC_HEIGHT_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT", Swig_var_SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT_get, Swig_var_SKCLIMATOLOGY_SURFACE_GEOPOTENTIAL_HEIGHT_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_SURFACE_PRESSURE_PA", Swig_var_SKCLIMATOLOGY_SURFACE_PRESSURE_PA_get, Swig_var_SKCLIMATOLOGY_SURFACE_PRESSURE_PA_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_TEMPERATURE_K", Swig_var_SKCLIMATOLOGY_TEMPERATURE_K_get, Swig_var_SKCLIMATOLOGY_TEMPERATURE_K_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_UNDEFINED", Swig_var_SKCLIMATOLOGY_UNDEFINED_get, Swig_var_SKCLIMATOLOGY_UNDEFINED_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_XXX_CM3", Swig_var_SKCLIMATOLOGY_XXX_CM3_get, Swig_var_SKCLIMATOLOGY_XXX_CM3_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_XXX_VMR", Swig_var_SKCLIMATOLOGY_XXX_VMR_get, Swig_var_SKCLIMATOLOGY_XXX_VMR_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_0", Swig_var_SKEMISSION_PHOTOCHEMICAL_0_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_0_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_1", Swig_var_SKEMISSION_PHOTOCHEMICAL_1_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_1_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_2", Swig_var_SKEMISSION_PHOTOCHEMICAL_2_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_2_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_3", Swig_var_SKEMISSION_PHOTOCHEMICAL_3_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_3_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_4", Swig_var_SKEMISSION_PHOTOCHEMICAL_4_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_4_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_5", Swig_var_SKEMISSION_PHOTOCHEMICAL_5_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_5_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_6", Swig_var_SKEMISSION_PHOTOCHEMICAL_6_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_6_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_7", Swig_var_SKEMISSION_PHOTOCHEMICAL_7_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_7_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_8", Swig_var_SKEMISSION_PHOTOCHEMICAL_8_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_8_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_9", Swig_var_SKEMISSION_PHOTOCHEMICAL_9_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_9_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_O2", Swig_var_SKEMISSION_PHOTOCHEMICAL_O2_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_O2_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_OH", Swig_var_SKEMISSION_PHOTOCHEMICAL_OH_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_OH_set);
  SWIG_addvarlink(globals, "SKEMISSION_PHOTOCHEMICAL_O3", Swig_var_SKEMISSION_PHOTOCHEMICAL_O3_get, Swig_var_SKEMISSION_PHOTOCHEMICAL_O3_set);
  SWIG_addvarlink(globals, "SKEMISSION_THERMAL", Swig_var_SKEMISSION_THERMAL_get, Swig_var_SKEMISSION_THERMAL_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOL_CM3_MODE2", Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_MODE2_get, Swig_var_SKCLIMATOLOGY_AEROSOL_CM3_MODE2_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS", Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS_get, Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVERADIUS_MICRONS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON", Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON_get, Swig_var_SKCLIMATOLOGY_GAMMA_EFFECTIVEVARIANCE_PERMICRON_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS", Swig_var_SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS_get, Swig_var_SKCLIMATOLOGY_AEROSOL_MODERADIUS_MICRONS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_AEROSOL_MODEWIDTH", Swig_var_SKCLIMATOLOGY_AEROSOL_MODEWIDTH_get, Swig_var_SKCLIMATOLOGY_AEROSOL_MODEWIDTH_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS", Swig_var_SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS_get, Swig_var_SKCLIMATOLOGY_ICE_MODERADIUS_MICRONS_set);
  SWIG_addvarlink(globals, "SKCLIMATOLOGY_ICE_MODEWIDTH", Swig_var_SKCLIMATOLOGY_ICE_MODEWIDTH_get, Swig_var_SKCLIMATOLOGY_ICE_MODEWIDTH_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

