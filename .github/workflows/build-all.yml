name: 'Build, Test, and Upload Wheels/Docs'

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize, labeled]
  release:
    types:
      - published

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-cpp-wheels-manylinux2014:
    runs-on: ubuntu-latest
    container: ghcr.io/usask-arg/sasktran-manylinux2014-build-container:main
    env:
        BUILDPYTHONENV: "cp310-cp310;cp311-cp311;cp312-cp312;cp313-cp313"
        IN_MANYLINUX_CONTAINER: "TRUE"
        CMAKE_INSTALL_PREFIX: "/opt/sasktran/"
        ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - run: git config --global --add safe.directory /__w/sasktran/sasktran
      - run: cmake -S . -B build  -DPythonEnvironments="$BUILDPYTHONENV" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$CMAKE_INSTALL_PREFIX -DCMAKE_PREFIX_PATH=/usr/local/include/openblas
      - run: cmake --build build --config Release --target install -j 2
      - run: cd wheelhouse
      - run: find . -name "*.whl" -type f -exec auditwheel show '{}' \;
      - run: find . -name "*.whl" -type f -exec auditwheel repair '{}' \; -exec rm '{}' \;
      - run: cd ..
      - run: ls wheelhouse/

      - name: Save wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux
          path: wheelhouse

  test-wheels-linux:
    needs: build-cpp-wheels-manylinux2014
    runs-on: ubuntu-latest
    container: continuumio/anaconda3
    strategy:
      matrix:
        py_version: [py310, py311, py312, py313]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download wheel artifacts 
        uses: actions/download-artifact@v3
        with:
          name: wheels-linux
          path: wheelhouse

      - name: Test wheel
        run: bash buildscripts/test_sasktran_linux ${{ matrix.py_version }}
  
  test-linux-wheel-system-python:
    needs: build-cpp-wheels-manylinux2014
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Display system info
        run: |
          cat /proc/cpuinfo | grep flags | tail -1

      - uses: actions/setup-python@v4
        name: Install Python
        with:
          python-version: "3.11"

      - name: Download wheel artifacts 
        uses: actions/download-artifact@v3
        with:
          name: wheels-linux
          path: wheelhouse

      - name: Install SASKTRAN and optional dependencies
        run: |
          python -m pip install -r pysasktran/requirements.txt
          python -m pip install sasktran --no-index -f wheelhouse/
          python -m pip install pytest xarray scipy zenodo_get netcdf4
      
      - name: Import SASKTRAN
        run: |
          python -c "import sasktran"

      - name: Run SASKTRAN tests
        run: |
          pytest --pyargs sasktran

  build-docs:
    needs: build-cpp-wheels-manylinux2014
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write      # to deploy to Pages

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Conda build environment 
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: doc_env
          environment-file: pysasktran/docs/environment.yml
          auto-activate-base: false

      - name: Download wheel artifacts 
        uses: actions/download-artifact@v3
        with:
          name: wheels-linux
          path: wheelhouse

      - name: Build Sphinx Docs
        shell: bash -el {0}
        run: |
          cd pysasktran
          pip install sasktran --no-index -f ../wheelhouse/
          mkdir -p ~/.config/sasktran/ && cp ci/config.yml ~/.config/sasktran/
          python dummy_install.py
          cd docs
          make html
          cd ..
          cd ..

      - name: Save doc pages
        uses: actions/upload-artifact@v3
        with:
          name: docs
          path: pysasktran/docs/build/html
      
  upload-docs-to-pages:
    needs: build-docs
    runs-on: ubuntu-latest

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      contents: write      # to deploy to Pages

    steps:
      - name: Download doc artifacts
        uses: actions/download-artifact@v3
        with:
          name: docs
          path: docs

      - name: Deploy dev docs
        uses: peaceiris/actions-gh-pages@v3
        if: (github.event_name == 'push') && (github.ref == 'refs/heads/main')
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs
          destination_dir: dev

      - name: Deploy release docs
        uses: peaceiris/actions-gh-pages@v3
        if: github.event_name == 'release'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs

  build-cpp-wheels-mac:
    runs-on: macos-12
    env:
        BUILDPYTHONENV: "current"
    
    strategy:
      matrix:
        py_version: [py310, py311, py312, py313]
        
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Conda build environment 
        uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: build_${{ matrix.py_version }}
          environment-file: buildscripts/mac-ci-envs/build-${{ matrix.py_version }}.yml
          auto-activate-base: false

      - name: Display conda environment
        shell: bash -el {0}
        run: | 
          conda list

      - name: configure cmake project
        shell: bash -el {0}
        run: | 
          cmake -S . -B build ${CMAKE_ARGS} -DPythonEnvironments="$BUILDPYTHONENV" -DCMAKE_BUILD_TYPE=Release -DFORCE_BOOST_STATIC=OFF
      - name: build cpp
        shell: bash -el {0}
        run: cmake --build build --config Release --target install -j 3

      - name: delocate wheels
        shell: bash -el {0}
        run: | 
          cd wheelhouse
          ls
          find . -name "*x86_64.whl" -type f -exec delocate-listdeps --all '{}' \;
          find . -name "*x86_64.whl" -type f -exec delocate-wheel -v '{}' \;
          cd ..


      - name: Save wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-mac-${{ matrix.py_version }}
          path: wheelhouse

  build-cpp-wheels-windows:
    runs-on: windows-latest
    env:
        BUILDPYTHONENV: "py310;py311;py312;py313"
        VCPKG_DEFAULT_TRIPLET: x64-windows-static-md
        CMAKE_INSTALL_PREFIX: c:/local/sasktran

    steps:
      - name: Download Boost
        run: |
          curl -L -o boost.exe https://boostorg.jfrog.io/artifactory/main/release/1.82.0/binaries/boost_1_82_0-msvc-14.3-64.exe

      - name: Install Boost
        run: |
          ./boost.exe /sp- /verysilent /suppressmsgboxes /norestart /dir="c:/local/boost_1_82_0" | more

      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""

      - name: Create Conda py310 Build Environment
        run: conda create -n py310 -c conda-forge python=3.10 numpy=2.0.0

      - name: Create Conda py311 Build Environment
        run: conda create -n py311 -c conda-forge python=3.11 numpy=2.0.0
      
      - name: Create conda py312 Build Environment
        run: conda create -n py312 -c conda-forge python=3.12 numpy=2.0.0
      
      - name: Create conda py313 Build Environment
        run: conda create -n py313 -c conda-forge -c conda-forge/label/python_rc python=3.13 numpy=2.0.0

      - name: Install netCDF
        run: vcpkg install netcdf-c

      - name: Install catch2
        run: vcpkg install catch2

      - name: Install yaml-cpp
        run: vcpkg install yaml-cpp

      - name: Create Eigen3 directory
        run: mkdir "c:\local\eigen"

      - name: Download Eigen
        run: |
          $url = "https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.gz"
          $output = "c:\local\eigen-3.4.0.tar.gz"
          Invoke-WebRequest -Uri $url -OutFile $output
        shell: powershell

      - name: Extract Eigen
        run: |
          7z.exe x "c:\local\eigen-3.4.0.tar.gz" -so | 7z.exe x -aoa -si -ttar -o"c:\local\eigen"
        shell: cmd

      - name: Install Eigen
        run: |
          cd c:/local/eigen/eigen-3.4.0
          dir
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=x64-windows-static-md -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake && cmake --build build --target install

      - name: Create openblas directory
        run: mkdir "c:\local\openblas"

      - name: Download OpenBLAS
        run: |
          $url = "https://github.com/xianyi/OpenBLAS/releases/download/v0.3.18/OpenBLAS-0.3.18-x64.zip"
          $output = "c:\local\OpenBLAS-0.3.18-x64.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
        shell: powershell

      - name: Extract OpenBLAS
        run: |
          $zipfile = "c:\local\OpenBLAS-0.3.18-x64.zip"
          $folder = "c:\local\openblas"
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $folder)
        shell: powershell

      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - run: cmake -S . -B build  -DPythonEnvironments="py310;py311;py312" -DCMAKE_BUILD_TYPE=Release -DVCPKG_TARGET_TRIPLET=x64-windows-static-md  -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_PREFIX_PATH="c:/local/openblas/;C:/Program Files (x86)/Eigen3/"
        env:
          BOOST_ROOT: C:/local/boost_1_82_0
          BOOST_LIBRARYDIR: C:/local/boost_1_82_0/lib64-msvc-14.3/
      - run: cmake --build build --config Release --target install -j 2
        env:
          SKTRAN_BLAS_BUNDLE: c:/local/openblas/bin/libopenblas.dll

      - name: Save wheel artifacts
        uses: actions/upload-artifact@v3
        with:
          name: wheels-windows
          path: wheelhouse
  
  test-wheels-windows:
    needs: build-cpp-wheels-windows 
    runs-on: windows-latest
    strategy:
      matrix:
        py_version: [py310, py311, py312, py313]

    steps:
      - uses: conda-incubator/setup-miniconda@v2
        with:
          auto-activate-base: true
          activate-environment: ""
      
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download wheel artifacts 
        uses: actions/download-artifact@v3
        with:
          name: wheels-windows
          path: wheelhouse
      
      - name: Test wheel
        run: ./buildscripts/test_sasktran_win.bat ${{ matrix.py_version }}

  test-wheels-mac:
    needs: build-cpp-wheels-mac 
    runs-on: macos-latest
    continue-on-error: true
    strategy:
      matrix:
        py_version: [py310, py311, py312, py313]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: ${{ matrix.py_version }}
          environment-file: pysasktran/ci/${{ matrix.py_version }}.yml
          auto-activate-base: false
          miniconda-version: "latest"

      - name: Download wheel artifacts 
        uses: actions/download-artifact@v3
        with:
          name: wheels-mac-${{ matrix.py_version }}
          path: wheelhouse
      
      - name: Test wheel
        shell: bash -el {0}
        run: |
          ls wheelhouse
          pip install -r pysasktran/requirements.txt
          pip install sasktran --no-index -f wheelhouse/
          cd pysasktran
          mkdir -p ~/.config/sasktran/ && cp ci/config.yml ~/.config/sasktran/
          python dummy_install.py > /dev/null 2>&1
          py.test sasktran
  
  pycodestyle_check:
    runs-on: ubuntu-latest
    container: continuumio/anaconda3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: pycodestyle checks
        run: |
          cd pysasktran
          pip install pycodestyle
          pycodestyle sasktran

  upload-to-pypi:
    needs: [test-wheels-linux, test-wheels-windows, test-linux-wheel-system-python, build-cpp-wheels-mac, build-docs]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/sasktran
    permissions:
      id-token: write

    steps:
      - name: Download linux wheel artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels-linux
          path: dist

      - name: Download windows wheel artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels-windows
          path: dist

      - name: Download mac wheel py310
        uses: actions/download-artifact@v3
        with:
          name: wheels-mac-py310
          path: dist

      - name: Download mac wheel py311
        uses: actions/download-artifact@v3
        with:
          name: wheels-mac-py311
          path: dist
      
      - name: Download mac wheel py312
        uses: actions/download-artifact@v3
        with:
          name: wheels-mac-py312
          path: dist

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.7
        with:
          verbose: true
