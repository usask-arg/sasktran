import unittest
import numpy as np
import sasktran as sk


class TestEngineOCC(unittest.TestCase):

    @unittest.skip
    def test_occ_engine(self):

        co2profile = np.array([00000.000, 9.5620350469e+15, 01000.000, 8.5604676285e+15, 02000.000, 7.7062120091e+15, 03000.000, 6.9531991470e+15, 04000.000, 6.2702731320e+15, 05000.000, 5.6375862919e+15,
                               06000.000, 5.0651291274e+15, 07000.000, 4.4975838604e+15, 08000.000, 3.9468136861e+15, 09000.000, 3.4348048814e+15, 10000.000, 2.9871067830e+15, 11000.000, 2.5656416175e+15,
                               12000.000, 2.1874053365e+15, 13000.000, 1.8533816021e+15, 14000.000, 1.6023327829e+15, 15000.000, 1.3568375796e+15, 16000.000, 1.1279532788e+15, 17000.000, 9.7672446573e+14,
                               18000.000, 8.4173283897e+14, 19000.000, 7.1576699275e+14, 20000.000, 6.2070908062e+14, 21000.000, 5.2364297410e+14, 22000.000, 4.3181248841e+14, 23000.000, 3.7860567983e+14,
                               24000.000, 3.2428122678e+14, 25000.000, 2.7110791383e+14, 26000.000, 2.3526785090e+14, 27000.000, 2.0344493146e+14, 28000.000, 1.7304110039e+14, 29000.000, 1.4714113133e+14,
                               30000.000, 1.2544180466e+14, 31000.000, 1.0738346125e+14, 32000.000, 9.2442937053e+13, 33000.000, 8.0342242281e+13, 34000.000, 6.9455591820e+13, 35000.000, 5.9095214441e+13,
                               36000.000, 5.0374561563e+13, 37000.000, 4.3515754800e+13, 38000.000, 3.7794009046e+13, 39000.000, 3.2874895083e+13, 40000.000, 2.8685628465e+13, 41000.000, 2.4978923024e+13,
                               42000.000, 2.1682117851e+13, 43000.000, 1.8864809592e+13, 44000.000, 1.6431826141e+13, 45000.000, 1.4348899126e+13, 46000.000, 1.2595260698e+13, 47000.000, 1.1093125765e+13,
                               48000.000, 9.8376261311e+12, 49000.000, 8.8026864921e+12, 50000.000, 7.8993464447e+12, 51000.000, 7.0038829664e+12, 52000.000, 6.0771348455e+12, 53000.000, 5.2887296427e+12,
                               54000.000, 4.6787494256e+12, 55000.000, 4.1667051367e+12, 56000.000, 3.6751620506e+12, 57000.000, 3.1811011797e+12, 58000.000, 2.7604364326e+12, 59000.000, 2.4249492298e+12,
                               60000.000, 2.1420175118e+12, 61000.000, 1.8772791073e+12, 62000.000, 1.6195294613e+12, 63000.000, 1.3994285676e+12, 64000.000, 1.2229247260e+12, 65000.000, 1.0734951007e+12,
                               66000.000, 9.3270881894e+11, 67000.000, 7.9345730980e+11, 68000.000, 6.7795327304e+11, 69000.000, 5.9174431127e+11, 70000.000, 5.2173619614e+11, 71000.000, 4.5523334147e+11,
                               72000.000, 3.8840635314e+11, 73000.000, 3.3304529951e+11, 74000.000, 2.9045416707e+11, 75000.000, 2.5517516779e+11, 76000.000, 2.2127024526e+11, 77000.000, 1.8582366434e+11,
                               78000.000, 1.5596546276e+11, 79000.000, 1.3362547386e+11, 80000.000, 1.1541990113e+11, 81000.000, 9.8756976417e+10, 82000.000, 8.2629944315e+10, 83000.000, 6.8563739750e+10,
                               84000.000, 5.6814363571e+10, 85000.000, 4.6797966799e+10, 86000.000, 3.8795906044e+10, 87000.000, 3.2908654369e+10, 88000.000, 2.7811184596e+10, 89000.000, 2.2974282383e+10,
                               90000.000, 1.8716304570e+10, 91000.000, 1.5254396937e+10, 92000.000, 1.2548308770e+10, 93000.000, 1.0295593615e+10, 94000.000, 8.3338827301e+09, 95000.000, 6.6488536883e+09,
                               96000.000, 5.2936443303e+09, 97000.000, 4.2242029799e+09, 98000.000, 3.3594428424e+09, 99000.000, 2.6511281727e+09]).reshape([100, 2])
        altitudes = co2profile[:, 0]
        values = co2profile[:, 1]
        co2numberdensity = sk.ClimatologyUserDefined(altitudes, {'SKCLIMATOLOGY_CO2_CM3': values})

        atmosphere = sk.Atmosphere()
        atmosphere['rayleigh'] = sk.Species(sk.Rayleigh(), sk.MSIS90())
        atmosphere['co2'] = sk.Species(sk.HITRANChemical('CO2'), co2numberdensity)

        tanalts = np.array([95.542934418655, 93.030998230911, 90.518486023880, 87.999366761185, 85.485855103470, 82.971916199661, 80.457603455521, 77.942962647415, 75.421955109573, 72.906806946732,
                            70.391479493118, 67.869934082962, 65.354396820999, 62.838825226761, 60.317182541824, 57.801700592972, 55.286336899734, 52.765050888992, 50.250070572830, 47.735359192825,
                            45.220966340042, 42.682148825007, 40.254586233282, 37.901745439957, 35.689252976524, 33.619203107470, 31.633878541417, 29.706157206720, 27.941217916525, 26.315136637345,
                            24.759740931714, 23.273057386890, 21.701357220703, 20.435203333687, 19.296175927224, 18.238125008002, 17.137857798933, 15.665431416870, 14.623809766528, 13.581115284387,
                            12.793781944543, 11.901170623281, 10.978181776555, 10.1851695349872, 9.4383271471788, 8.7424541473265, 8.0540969039894, 7.5483134223615, 7.0824804787830, 6.7903857771487,
                            6.3015475934096])

        mjd = 54242.26386852                    # MJD("2007-05-22 06:19:58.24") Use ACE-FTS scan ace.sr20314 as an example.
        lat = 68.91
        lng = -79.65
        sza = 60.0
        saa = 157.5
        rayazi = 0.0
        geometry = sk.VerticalImage()
        geometry.from_sza_saa(sza, saa, lat, lng, tanalts, mjd, rayazi, satalt_km=600, refalt_km=20)

        wavenum = np.arange(934.0, 936.0, 0.0005)
        wavelengths = 1.0E7 / wavenum
        engine = sk.EngineOCC(geometry=geometry, atmosphere=atmosphere, wavelengths=wavelengths)

        extinction = engine.calculate_radiance()

        thisanswer = extinction[2780:2810, 25]
        hardcoded = np.array(
            (5.29863379109491e-05, 5.21272710464497e-05, 5.13521148211068e-05, 5.06735726674800e-05, 5.01108534229253e-05,
             4.96935639674039e-05, 4.94692728807194e-05, 4.95190316042768e-05, 4.99837579170962e-05, 5.10981028195002e-05,
             5.32916193821469e-05, 5.76325746890127e-05, 6.73740224043268e-05, 9.21567603248706e-05, 1.51671518658191e-04,
             2.55395613730317e-04, 3.52718811011423e-04, 3.55272015039846e-04, 2.59666338415723e-04, 1.52953886884157e-04,
             8.97161018477797e-05, 6.23810060383202e-05, 5.08759605344335e-05, 4.50929729991472e-05, 4.15985720677642e-05,
             3.92163342759140e-05, 3.74573218384241e-05, 3.60815128901188e-05, 3.49573512476612e-05, 3.40077910886348e-05))
        diff = np.abs((thisanswer - hardcoded) / hardcoded)
        maxdiff = np.max(diff)
        self.assertAlmostEqual(maxdiff, 0.0, places=5)


if __name__ == "__main__":
    tests = TestEngineOCC()
    unittest.main()
